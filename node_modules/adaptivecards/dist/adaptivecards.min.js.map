{"version":3,"sources":["webpack://AdaptiveCards/webpack/universalModuleDefinition","webpack://AdaptiveCards/webpack/bootstrap","webpack://AdaptiveCards/./src/enums.ts","webpack://AdaptiveCards/./src/shared.ts","webpack://AdaptiveCards/./src/serialization.ts","webpack://AdaptiveCards/./src/utils.ts","webpack://AdaptiveCards/./src/registry.ts","webpack://AdaptiveCards/./src/card-object.ts","webpack://AdaptiveCards/./src/host-capabilities.ts","webpack://AdaptiveCards/./src/host-config.ts","webpack://AdaptiveCards/./src/adaptivecards.ts","webpack://AdaptiveCards/./src/card-elements.ts","webpack://AdaptiveCards/./src/text-formatters.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Default","Positive","Destructive","ActionStyle","Size","ImageSize","SizeUnit","TextSize","TextWeight","FontType","Spacing","TextColor","HorizontalAlignment","VerticalAlignment","ActionAlignment","ImageStyle","ShowCardActionMode","Orientation","FillMode","ActionIconPlacement","InputTextStyle","InputValidationNecessity","Emphasis","Accent","Good","Attention","Warning","ContainerStyle","ValidationPhase","ValidationEvent","ContainerFitStatus","useAdvancedTextBlockTruncation","useAdvancedCardBottomTruncation","useMarkdownInRadioButtonAndCheckbox","allowMarkForTextHighlighting","alwaysBleedSeparators","enableFullJsonRoundTrip","useBuiltInInputValidation","displayInputValidationErrors","allowPreProcessingPropertyValues","setTabIndexAtCardRoot","GlobalSettings","ContentTypes","applicationJson","applicationXWwwFormUrlencoded","_isProcessed","getReferencedInputs","inputs","referencedInputs","Error","input","RegExp","id","exec","this","_original","substituteInputValues","contentType","_processed","regEx","matches","keys","toLowerCase","matchedInput","valueForReplace","JSON","stringify","slice","encodeURIComponent","replace","getOriginal","set","StringWithSubstitutions","top","right","bottom","left","SpacingDefinition","Enums","None","PaddingDefinition","physicalSize","unit","parse","requireUnitSpecifier","result","SizeAndUnit","Weight","expectedMatchCount","length","parseInt","Pixel","generate","d0","Math","random","d1","d2","d3","UUID","lut","initialize","toString","major","minor","label","_isValid","_major","_minor","_label","versionString","context","Version","_versionString","logParseEvent","InvalidPropertyValue","toJSON","compareTo","otherVersion","isValid","v1_0","v1_1","v1_2","v1_3","latest","Versions","version","targetVersion","_validationEvents","serializeValue","target","propertyName","propertyValue","defaultValue","serializeNumber","isNaN","serializeEnum","enumType","targetValue","canDeleteTarget","undefined","serializeArray","items","item","serializedItem","SerializableObject","push","Array","isArray","clearEvents","logEvent","phase","event","message","source","Parse","getEventAt","index","BaseSerializationContext","onGetInitialValue","sequentialNumber","PropertyDefinition","_sequentialNumber","getInternalName","sender","treatEmptyAsUndefined","parsedValue","Utils","parseString","StringProperty","parseBool","BoolProperty","parseNumber","NumProperty","size","PixelSizeProperty","values","sourceValue","versionedValue","valueFound","ToJSON","ValueSetProperty","_values","keyAsNumber","enumValue","getEnumValueByName","EnumProperty","objectType","serializedValue","SerializableObjectProperty","onItemAdded","sourceCollection","sourceItem","SerializableObjectCollectionProperty","onParse","onToJSON","CustomProperty","_properties","indexOf","add","properties","remove","splice","getItemAt","getCount","SerializableObjectSchema","propertyKey","descriptor","getOwnPropertyDescriptor","getValue","setValue","_propertyBag","_rawProperties","maxVersion","getSchema","populateSchema","schema","ctor","constructor","sortedProperties","sort","p1","p2","onRegisterCustomProperties","internalParse","UnsupportedProperty","resetDefaultValues","internalToJSON","serializedProperties","shouldSerialize","SimpleSerializationContext","effectiveContext","hasDefaultValue","hasAllDefaultValues","setCustomProperty","getCustomProperty","_schemaCache","getSchemaKey","stringToCssColor","color","a","findNextCharacter","html","currIdx","userAgent","navigator","match","Shared","node","child","appendChild","obj","hostConfig","separationDefinition","orientation","spacing","lineThickness","separator","document","createElement","className","makeCssClassName","Horizontal","lineColor","style","paddingTop","marginBottom","borderBottom","height","paddingLeft","marginRight","borderRight","width","overflow","flex","element","maxHeight","lineHeight","fits","scrollHeight","fullText","innerHTML","truncateAt","idx","substring","breakableIndices","results","findBreakableIndices","lo","hi","bestBreakIdx","mid","floor","containerEnd","start","offsetTop","clientHeight","FullyInContainer","Overflowing","FullyOutOfContainer","_items","findByName","typeName","clear","register","schemaVersion","registrationInfo","unregister","createInstance","getItemCount","CardObjectRegistry","allIds","validationEvents","addFailure","cardObject","Validation","ValidationResults","_shouldFallback","getJsonTypeName","CardObject","requiresProperty","preProcessPropertyValue","currentObject","onPreProcessPropertyValue","parent","setParent","_parent","setShouldFallback","shouldFallback","requires","areAllMet","hostCapabilities","getRootObject","rootObject","internalValidateProperties","DuplicateId","validateProperties","_renderedElement","typeNameProperty","idProperty","HostCapabilities","_capabilities","jsonVersion","addCapability","removeCapability","hasCapability","capabilityName","parseHostConfigEnum","targetEnum","parseEnum","defaultColor","subtleColor","default","subtle","ColorDefinition","highlightColors","TextColorDefinition","allowCustomStyle","AdaptiveCardConfig","imageSize","Medium","maxImageHeight","ImageSetConfig","allowInlinePlayback","defaultPoster","MediaConfig","isSubtle","weight","wrap","getDefaultWeight","FactTextDefinition","maxWidth","Bolder","FactTitleDefinition","title","FactSetConfig","actionMode","Inline","inlineTopMargin","ShowCardActionConfig","maxActions","buttonSpacing","showCard","preExpandSingleShowCardAction","actionsOrientation","actionAlignment","Left","iconPlacement","LeftOfTitle","allowTitleToWrap","iconSize","sizeAndUnit","e","ActionsConfig","dark","light","accent","good","warning","attention","parseSingleColor","ColorSetDefinition","foregroundColors","backgroundColor","highlightBackgroundColor","highlightForegroundColor","ContainerStyleDefinition","_allStyles","BuiltInContainerStyleDefinition","customStyleArray","customStyle","styleName","forEach","isBuiltIn","emphasis","customStyles","getStyleByName","ContainerStyleSet","fontFamily","fontSizes","small","medium","large","extraLarge","fontWeights","lighter","bolder","monospace","FontTypeDefinition","getStyleDefinition","Monospace","FontTypeSet","choiceSetInputValueSeparator","supportsInteractivity","padding","imageSizes","containerStyles","actions","adaptiveCard","imageSet","media","factSet","alwaysAllowBleed","String","_legacyFontType","fontTypes","lineHeights","getFontTypeDefinition","getEffectiveSpacing","Small","Large","ExtraLarge","Padding","paddingDefinitionToSpacingDefinition","paddingDefinition","makeCssClassNames","classNames","cssClassNamePrefix","join","HostConfig","defaultHostConfig","_truncatedDueToOverflow","lang","CardElement","langProperty","isVisibleProperty","undoOverflowTruncation","isVisible","updateRenderedElementVisibility","raiseElementVisibilityChangedEvent","internalRenderSeparator","renderedSeparator","renderSeparation","separatorOrientation","parentContainer","getParentContainer","getEffectivePadding","parentPhysicalPadding","marginLeft","displayMode","isDesignMode","_defaultRenderedElementDisplayMode","display","removeProperty","_separatorElement","isFirstElement","hideElementDueToOverflow","visibility","showElementHiddenDueToOverflow","handleOverflow","isHiddenDueToOverflow","handled","truncateOverflow","resetOverflow","sizeChanged","createPlaceholderElement","styleDefinition","getEffectiveStyleDefinition","foregroundCssColor","border","minHeight","fontSize","innerText","adjustRenderedElementSize","renderedElement","isDisplayed","offsetHeight","overrideInternalRender","internalRender","applyPadding","separatorElement","isBleeding","getImmediateSurroundingPadding","physicalPadding","getDefaultPadding","getHasBackground","getPadding","_padding","setPadding","elementRegistry","SerializationContext","asString","getEffectiveStyle","defaultStyle","getForbiddenActionTypes","processTop","processRight","processBottom","processLeft","doProcessTop","isTopElement","doProcessRight","isRightMostElement","doProcessBottom","isBottomElement","doProcessLeft","isLeftMostElement","effectivePadding","getActionCount","getActionAt","CardElementContainer","removeItem","render","customCssSelector","classList","boxSizing","updateLayout","processChildren","cardElement","rootElement","getRootElement","AdaptiveCard","designMode","isLastElement","isAtTheVeryLeft","isAtTheVeryRight","isAtTheVeryTop","isAtTheVeryBottom","isBleedingAtTop","isBleedingAtBottom","currentElement","Container","getAllInputs","getResourceInformation","getElementById","getActionById","allowCustomPadding","_hostConfig","separatorProperty","heightProperty","horizontalAlignmentProperty","spacingProperty","forbiddenActionTypes","parseAction","ActionProperty","BaseTextBlock","selectActionProperty","textProperty","setText","getFontSize","fontType","getColorDefinition","colorSet","Dark","Light","text","applyStylesTo","targetElement","fontWeight","colorDefinition","effectiveColor","Lighter","sizeProperty","weightProperty","colorProperty","isSubtleProperty","fontTypeProperty","_treatAsPlainText","useMarkdown","restoreOriginalContent","maxLines","_computedLineHeight","_originalInnerHtml","truncateIfSupported","children","isTextOnly","tagName","truncate","_processedText","getRenderedDomElementType","preProcessedText","selectAction","onclick","preventDefault","cancelBubble","execute","tabIndex","setAttribute","getAriaRole","formattedText","TextFormatters","formatText","markdownProcessingResult","applyMarkdown","didProcess","outputHtml","markStyle","effectiveStyle","firstElementChild","HTMLElement","marginTop","textOverflow","lastElementChild","anchors","getElementsByTagName","anchor","raiseAnchorClickedEvent","wordWrap","whiteSpace","isRtl","horizontalAlignment","Center","textAlign","Right","wrapProperty","maxLinesProperty","TextBlock","forElementId","htmlFor","italic","strikethrough","highlight","underline","href","getHref","fontStyle","textDecoration","italicProperty","strikethroughProperty","highlightProperty","underlineProperty","TextRun","_inlines","internalAddInline","inline","forceAdd","isInline","jsonInline","textRun","parseElement","jsonInlines","renderedInlines","renderedInline","getInlineCount","getInlineAt","addInline","removeInline","RichTextBlock","titleProperty","valueProperty","Fact","facts","borderWidth","borderSpacing","borderStyle","borderCollapse","trElement","tdElement","verticalAlign","textBlock","factsProperty","FactSet","internalName","Auto","applySize","pixelWidth","pixelHeight","Stretch","url","alignItems","onkeypress","keyCode","justifyContent","imageElement","onload","raiseImageLoadedEvent","onerror","card","errorElement","minWidth","Person","borderRadius","backgroundPosition","backgroundRepeat","src","Image","urlProperty","altTextProperty","alt","mimeType","backgroundColorProperty","styleProperty","pixelWidthProperty","ImageDimensionProperty","pixelHeightProperty","allowVerticalOverflow","isSelectable","isElementAllowed","isInteractive","paddingRight","paddingBottom","InteractivityNotAllowed","_selectAction","overflowX","overflowY","concat","_images","flexWrap","image","renderedImage","margin","getFirstVisibleRenderedItem","getLastVisibleRenderedItem","itemIndex","addImage","imagesProperty","imageSizeProperty","ImageSet","type","mimeTypeProperty","MediaSource","sources","getPosterUrl","poster","processSources","_selectedSources","_selectedMediaType","mimeComponents","split","Media","supportedMediaTypes","renderPoster","posterRootElement","altText","position","posterUrl","parentNode","removeChild","playButtonOuterElement","mediaPlayerElement","renderMediaPlayer","play","onPlay","playButtonInnerElement","playButtonArrowWidth","playButtonArrowHeight","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","borderTopColor","borderRightColor","borderBottomColor","transform","playButtonContainer","mediaElement","videoPlayer","autoplay","controls","isMobileOS","muted","preload","renderedSource","mediaSource","sourcesProperty","posterProperty","necessity","Optional","necessityProperty","errorMessageProperty","InputValidationOptions","Input","validationProperty","_renderedInputControlElement","_inputControlContainerElement","_outerContainerElement","flexDirection","renderedInputControlElement","isNullable","validation","RequiredWithVisualCue","valueChanged","onInputValueChangedHandler","resetValidationFailureCue","onValueChanged","onInputValueChanged","_errorMessageElement","showValidationErrorMessage","errorMessage","textContent","PropertyCantBeNull","validateValue","isSet","isMultiline","Text","setupInput","placeholder","maxLength","oninput","inlineAction","renderedInputControl","iconUrl","inputControlContainerElement","maxLengthProperty","isMultilineProperty","placeholderProperty","inlineActionProperty","TextInput","valueOn","valueOff","_checkboxInputElement","generateUniqueId","checked","onchange","Label","labelElement","spacerElement","valueOnProperty","valueOffProperty","ToggleInput","Choice","isMultiSelect","choices","getUniqueCategoryName","uniqueCategoryName","ChoiceSetInput","uniqueCategoryCounter","renderCompoundInput","cssClassName","defaultValues","_toggleInputs","choice","_uniqueCategoryName","compoundInput","internalApplyAriaCurrent","options","_selectElement","selected","removeAttribute","option","disabled","hidden","CollectionCantBeEmpty","toggleInput","isCompact","selectedIndex","choicesProperty","isMultiSelectProperty","_numberInputElement","min","max","valueAsNumber","minProperty","maxProperty","NumberInput","_dateInputElement","DateInput","test","TimeProperty","_timeInputElement","TimeInput","action","parentContainerStyle","_state","_parentContainerStyle","updateCssStyle","updateActionButtonCssStyle","click","onClick","addCssClasses","internalGetReferencedInputs","allInputs","internalPrepareForExecution","internalValidateInputs","ignoreInputValidation","actionRegistry","actionButtonElement","buttonState","baseCssClass","buttonElement","titleElement","AboveTitle","iconElement","onExecuteActionHandler","onExecute","onExecuteAction","prepareForExecution","_actionCollection","removeAction","validateInputs","iconUrlProperty","ignoreInputValidationProperty","Action","_ignoreInputValidation","_isPrepared","_originalData","_processedData","SubmitAction","JsonTypeName","dataProperty","OpenUrlAction","targetElements","ToggleVisibilityAction","elementId","addTargetElement","removeTargetElement","targetElementsProperty","_value","newValue","nameProperty","StringWithSubstitutionProperty","HttpHeader","_url","headers","_body","header","HttpAction","bodyProperty","methodProperty","headersProperty","InlineAdaptiveCard","jsonCard","ShowCardAction","owner","_renderedActionCount","buttons","_owner","isActionAllowed","forbiddenTypes","forbiddenType","refreshContainer","_actionCardContainer","_actionCard","layoutChanged","hideActionCard","previouslyExpandedAction","_expandedAction","raiseInlineCardExpandedEvent","showActionCard","suppressStyle","raiseEvent","renderedCard","collapseExpandedAction","state","expandShowCardAction","button","actionClicked","actionButton","Popup","findActionButton","jsonAction","addAction","TooManyActions","ActionTypeNotAllowed","buttonStrip","allowedActions","filter","ActionButton","ab","spacer","buttonStripContainer","expandedAction","actionIndex","ActionCollection","renderedActionCount","orientationProperty","ActionSet","_bleed","StylableCardElementContainer","minPixelHeight","applyBackground","surroundingPadding","currentElementHasBackgroundImage","backgroundImage","hasExplicitStyle","getHasExpandedAction","getBleed","setBleed","explicitStyle","bleedProperty","minHeightProperty","apply","BackgroundImage","fillMode","Repeat","RepeatHorizontally","RepeatVertically","Cover","backgroundSize","backgroundPositionX","verticalAlignment","backgroundPositionY","Bottom","fillModeProperty","verticalAlignmentProperty","Top","verticalContentAlignment","_renderedItems","backgroundImageProperty","insertItemAt","forceInsert","isStandalone","supportsExcplitiHeight","getItemsCollectionPropertyName","rtl","dir","renderedItem","placeholderElement","elt","getFitStatus","jsonItems","firstRenderedItem","lastRenderedItem","addItem","insertItemBefore","insertBefore","insertItemAfter","insertAfter","verticalContentAlignmentProperty","rtlProperty","_computedWeight","Vertical","ColumnSet","widthProperty","invalidWidth","Column","_columns","createColumnInstance","parseCardObject","errorType","error","ElementTypeNotAllowed","_renderedColumns","totalWeight","column","computedWeight","renderedColumn","jsonColumns","getColumnAt","weightedColumns","stretchedColumns","Hint","addColumn","onImageLoadedHandler","onImageLoaded","onAnchorClickedHandler","onAnchorClicked","isExpanded","onInlineCardExpandedHandler","onInlineCardExpanded","shouldUpdateLayout","onElementVisibilityChangedHandler","onElementVisibilityChanged","renderedActions","renderIfEmpty","ContainerWithActions","onProcessMarkdown","markdownit","markdownIt","console","warn","isVersionSupported","bypassVersionCheck","_fallbackCard","fallbackElement","versionProperty","MissingCardType","UnsupportedCardVersion","speak","schemaUrl","$schemaProperty","fallbackTextProperty","speakProperty","populateWithDefaultElements","registry","populateWithDefaultActions","reset","GlobalRegistry","elements","internalParseCardObject","forbiddenTypeNames","allowFallback","createInstanceCallback","tryToFallback","fallback","cardObjectParsed","onParseAction","onParseElement","UnknownElementType","UnknownActionType","_elementRegistry","setElementRegistry","_actionRegistry","setActionRegistry","regularExpression","_regularExpression","format","internalFormat","date","Date","toLocaleDateString","day","weekday","month","year","AbstractTextFormatter","toLocaleTimeString","hour","minute","DateFormatter","TimeFormatter"],"mappings":"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","file":"adaptivecards.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AdaptiveCards\"] = factory();\n\telse\n\t\troot[\"AdaptiveCards\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n// Note the \"weird\" way these readonly fields are declared is to work around\r\n// a breaking change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n// and adopt this syntax for all other static readonly fields.\r\nexport class ActionStyle {\r\n    static readonly Default: \"default\" = \"default\";\r\n    static readonly Positive: \"positive\" = \"positive\";\r\n    static readonly Destructive: \"destructive\" = \"destructive\";\r\n}\r\n\r\nexport enum Size {\r\n    Auto,\r\n    Stretch,\r\n    Small,\r\n    Medium,\r\n    Large\r\n}\r\n\r\nexport enum ImageSize {\r\n    Small,\r\n    Medium,\r\n    Large\r\n}\r\n\r\nexport enum SizeUnit {\r\n    Weight,\r\n    Pixel\r\n}\r\n\r\nexport enum TextSize {\r\n    Small,\r\n    Default,\r\n    Medium,\r\n    Large,\r\n    ExtraLarge\r\n}\r\n\r\nexport enum TextWeight {\r\n    Lighter,\r\n    Default,\r\n    Bolder\r\n}\r\n\r\nexport enum FontType {\r\n    Default,\r\n    Monospace\r\n}\r\n\r\nexport enum Spacing {\r\n    None,\r\n    Small,\r\n    Default,\r\n    Medium,\r\n    Large,\r\n    ExtraLarge,\r\n    Padding\r\n}\r\n\r\nexport enum TextColor {\r\n    Default,\r\n    Dark,\r\n    Light,\r\n    Accent,\r\n    Good,\r\n    Warning,\r\n    Attention\r\n}\r\n\r\nexport enum HorizontalAlignment {\r\n    Left,\r\n    Center,\r\n    Right\r\n}\r\n\r\nexport enum VerticalAlignment {\r\n    Top,\r\n    Center,\r\n    Bottom\r\n}\r\n\r\nexport enum ActionAlignment {\r\n    Left,\r\n    Center,\r\n    Right,\r\n    Stretch\r\n}\r\n\r\nexport enum ImageStyle {\r\n    Default,\r\n    Person\r\n}\r\n\r\nexport enum ShowCardActionMode {\r\n    Inline,\r\n    Popup\r\n}\r\n\r\nexport enum Orientation {\r\n    Horizontal,\r\n    Vertical\r\n}\r\n\r\nexport enum FillMode {\r\n    Cover,\r\n    RepeatHorizontally,\r\n    RepeatVertically,\r\n    Repeat\r\n}\r\n\r\nexport enum ActionIconPlacement {\r\n    LeftOfTitle,\r\n    AboveTitle\r\n}\r\n\r\nexport enum InputTextStyle {\r\n    Text,\r\n    Tel,\r\n    Url,\r\n    Email\r\n}\r\n\r\nexport enum InputValidationNecessity {\r\n    Optional,\r\n    Required,\r\n    RequiredWithVisualCue\r\n}\r\n\r\n/*\r\n    This should really be a string enum, e.g.\r\n\r\n        export enum ContainerStyle {\r\n            Default = \"default\",\r\n            Emphasis = \"emphasis\"\r\n        }\r\n\r\n    However, some hosts do not use a version of TypeScript\r\n    recent enough to understand string enums. This is\r\n    a compatible construct that does not require using\r\n    a more recent version of TypeScript.\r\n\r\n    Also note the \"weird\" way these readonly fields are declared is to work around\r\n    a breaking change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    and adopt this syntax for all other static readonly fields.\r\n*/\r\nexport class ContainerStyle {\r\n    static readonly Default: \"default\" = \"default\";\r\n    static readonly Emphasis: \"emphasis\" = \"emphasis\";\r\n    static readonly Accent: \"accent\" = \"accent\";\r\n    static readonly Good: \"good\" = \"good\";\r\n    static readonly Attention: \"attention\" = \"attention\";\r\n    static readonly Warning: \"warning\" = \"warning\";\r\n}\r\n\r\nexport enum ValidationPhase {\r\n    Parse,\r\n    ToJSON,\r\n    Validation\r\n}\r\n\r\nexport enum ValidationEvent {\r\n    Hint,\r\n    ActionTypeNotAllowed,\r\n    CollectionCantBeEmpty,\r\n    Deprecated,\r\n    ElementTypeNotAllowed,\r\n    InteractivityNotAllowed,\r\n    InvalidPropertyValue,\r\n    MissingCardType,\r\n    PropertyCantBeNull,\r\n    TooManyActions,\r\n    UnknownActionType,\r\n    UnknownElementType,\r\n    UnsupportedCardVersion,\r\n    DuplicateId,\r\n    UnsupportedProperty,\r\n    Other\r\n}\r\n\r\nexport enum ContainerFitStatus {\r\n    FullyInContainer,\r\n    Overflowing,\r\n    FullyOutOfContainer\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\n\r\nexport class GlobalSettings {\r\n    static useAdvancedTextBlockTruncation: boolean = true;\r\n    static useAdvancedCardBottomTruncation: boolean = false;\r\n    static useMarkdownInRadioButtonAndCheckbox: boolean = true;\r\n    static allowMarkForTextHighlighting: boolean = false;\r\n    static alwaysBleedSeparators: boolean = false;\r\n    static enableFullJsonRoundTrip: boolean = false;\r\n    static useBuiltInInputValidation: boolean = true;\r\n    static displayInputValidationErrors: boolean = true;\r\n    static allowPreProcessingPropertyValues: boolean = false;\r\n    static setTabIndexAtCardRoot: boolean = true;\r\n}\r\n\r\nexport const ContentTypes = {\r\n    applicationJson: \"application/json\",\r\n    applicationXWwwFormUrlencoded: \"application/x-www-form-urlencoded\"\r\n}\r\n\r\nexport interface ISeparationDefinition {\r\n    spacing: number,\r\n    lineThickness?: number,\r\n    lineColor?: string\r\n}\r\n\r\nexport interface IInput {\r\n    id?: string;\r\n    value?: string;\r\n    validateValue(): boolean;\r\n}\r\n\r\nexport type Dictionary<T> = { [key: string]: T };\r\n\r\nexport class StringWithSubstitutions {\r\n    private _isProcessed: boolean = false;\r\n    private _original?: string;\r\n    private _processed?: string;\r\n\r\n    getReferencedInputs(inputs: IInput[], referencedInputs: Dictionary<IInput>) {\r\n        if (!referencedInputs) {\r\n            throw new Error(\"The referencedInputs parameter cannot be null.\")\r\n        }\r\n\r\n        for (let input of inputs) {\r\n            let matches = new RegExp(\"\\\\{{2}(\" + input.id + \").value\\\\}{2}\", \"gi\").exec(<string>this._original);\r\n\r\n            if (matches != null && input.id) {\r\n                referencedInputs[input.id] = input;\r\n            }\r\n        }\r\n    }\r\n\r\n    substituteInputValues(inputs: Dictionary<IInput>, contentType: string) {\r\n        this._processed = this._original;\r\n\r\n        if (this._original) {\r\n            let regEx = /\\{{2}([a-z0-9_$@]+).value\\}{2}/gi;\r\n            let matches;\r\n\r\n            while ((matches = regEx.exec(<string>this._original)) !== null) {\r\n                for (let key of Object.keys(inputs)) {\r\n                    if (key.toLowerCase() == matches[1].toLowerCase()) {\r\n                        let matchedInput = inputs[key];\r\n\r\n                        let valueForReplace = \"\";\r\n\r\n                        if (matchedInput.value) {\r\n                            valueForReplace = matchedInput.value;\r\n                        }\r\n\r\n                        if (contentType === ContentTypes.applicationJson) {\r\n                            valueForReplace = JSON.stringify(valueForReplace);\r\n                            valueForReplace = valueForReplace.slice(1, -1);\r\n                        }\r\n                        else if (contentType === ContentTypes.applicationXWwwFormUrlencoded) {\r\n                            valueForReplace = encodeURIComponent(valueForReplace);\r\n                        }\r\n\r\n                        this._processed = (<string>this._processed).replace(matches[0], valueForReplace);\r\n\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._isProcessed = true;\r\n    }\r\n\r\n    getOriginal(): string | undefined {\r\n        return this._original;\r\n    }\r\n\r\n    get(): string | undefined {\r\n        if (!this._isProcessed) {\r\n            return this._original;\r\n        }\r\n        else {\r\n            return this._processed;\r\n        }\r\n    }\r\n\r\n    set(value: string | undefined) {\r\n        this._original = value;\r\n        this._isProcessed = false;\r\n    }\r\n}\r\n\r\nexport class SpacingDefinition {\r\n    left: number = 0;\r\n    top: number = 0;\r\n    right: number = 0;\r\n    bottom: number = 0;\r\n\r\n    constructor(top: number = 0,\r\n        right: number = 0,\r\n        bottom: number = 0,\r\n        left: number = 0) {\r\n        this.top = top;\r\n        this.right = right;\r\n        this.bottom = bottom;\r\n        this.left = left;\r\n    }\r\n}\r\n\r\nexport class PaddingDefinition {\r\n    top: Enums.Spacing = Enums.Spacing.None;\r\n    right: Enums.Spacing = Enums.Spacing.None;\r\n    bottom: Enums.Spacing = Enums.Spacing.None;\r\n    left: Enums.Spacing = Enums.Spacing.None;\r\n\r\n    constructor(top: Enums.Spacing = Enums.Spacing.None,\r\n        right: Enums.Spacing = Enums.Spacing.None,\r\n        bottom: Enums.Spacing = Enums.Spacing.None,\r\n        left: Enums.Spacing = Enums.Spacing.None) {\r\n        this.top = top;\r\n        this.right = right;\r\n        this.bottom = bottom;\r\n        this.left = left;\r\n    }\r\n}\r\n\r\nexport class SizeAndUnit {\r\n    physicalSize: number;\r\n    unit: Enums.SizeUnit;\r\n\r\n    static parse(input: string, requireUnitSpecifier: boolean = false): SizeAndUnit {\r\n        let result = new SizeAndUnit(0, Enums.SizeUnit.Weight);\r\n\r\n        if (typeof input === \"number\") {\r\n            result.physicalSize = input;\r\n\r\n            return result;\r\n        }\r\n        else if (typeof input === \"string\") {\r\n            let regExp = /^([0-9]+)(px|\\*)?$/g;\r\n            let matches = regExp.exec(input);\r\n            let expectedMatchCount = requireUnitSpecifier ? 3 : 2;\r\n\r\n            if (matches && matches.length >= expectedMatchCount) {\r\n                result.physicalSize = parseInt(matches[1]);\r\n\r\n                if (matches.length == 3) {\r\n                    if (matches[2] == \"px\") {\r\n                        result.unit = Enums.SizeUnit.Pixel;\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            }\r\n        }\r\n\r\n        throw new Error(\"Invalid size: \" + input);\r\n    }\r\n\r\n    constructor(physicalSize: number, unit: Enums.SizeUnit) {\r\n        this.physicalSize = physicalSize;\r\n        this.unit = unit;\r\n    }\r\n}\r\n\r\nexport interface IResourceInformation {\r\n    url: string;\r\n    mimeType: string;\r\n}\r\n\r\n/**\r\n * Fast UUID generator, RFC4122 version 4 compliant.\r\n * @author Jeff Ward (jcward.com).\r\n * @license MIT license\r\n * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\n **/\r\nexport class UUID {\r\n    private static lut: string[] = [];\r\n\r\n    static generate(): string {\r\n        let d0 = Math.random() * 0xffffffff | 0;\r\n        let d1 = Math.random() * 0xffffffff | 0;\r\n        let d2 = Math.random() * 0xffffffff | 0;\r\n        let d3 = Math.random() * 0xffffffff | 0;\r\n\r\n        return UUID.lut[d0 & 0xff] + UUID.lut[d0 >> 8 & 0xff] + UUID.lut[d0 >> 16 & 0xff] + UUID.lut[d0 >> 24 & 0xff] + '-' +\r\n            UUID.lut[d1 & 0xff] + UUID.lut[d1 >> 8 & 0xff] + '-' + UUID.lut[d1 >> 16 & 0x0f | 0x40] + UUID.lut[d1 >> 24 & 0xff] + '-' +\r\n            UUID.lut[d2 & 0x3f | 0x80] + UUID.lut[d2 >> 8 & 0xff] + '-' + UUID.lut[d2 >> 16 & 0xff] + UUID.lut[d2 >> 24 & 0xff] +\r\n            UUID.lut[d3 & 0xff] + UUID.lut[d3 >> 8 & 0xff] + UUID.lut[d3 >> 16 & 0xff] + UUID.lut[d3 >> 24 & 0xff];\r\n    }\r\n\r\n    static initialize() {\r\n        for (let i = 0; i < 256; i++) {\r\n            UUID.lut[i] = (i < 16 ? '0' : '') + i.toString(16);\r\n        }\r\n    }\r\n}\r\n\r\nUUID.initialize();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { GlobalSettings, SizeAndUnit } from \"./shared\";\r\nimport * as Utils from \"./utils\";\r\nimport * as Enums from \"./enums\";\r\n\r\nexport interface IValidationEvent {\r\n    source?: SerializableObject,\r\n    phase: Enums.ValidationPhase,\r\n    event: Enums.ValidationEvent,\r\n    message: string;\r\n}\r\n\r\nexport class Version {\r\n    private _versionString: string;\r\n    private _major: number;\r\n    private _minor: number;\r\n    private _isValid: boolean = true;\r\n    private _label?: string;\r\n\r\n    constructor(major: number = 1, minor: number = 1, label?: string) {\r\n        this._major = major;\r\n        this._minor = minor;\r\n        this._label = label;\r\n    }\r\n\r\n    static parse(versionString: string, context: BaseSerializationContext): Version | undefined {\r\n        if (!versionString) {\r\n            return undefined;\r\n        }\r\n\r\n        let result = new Version();\r\n        result._versionString = versionString;\r\n\r\n        let regEx = /(\\d+).(\\d+)/gi;\r\n        let matches = regEx.exec(versionString);\r\n\r\n        if (matches != null && matches.length == 3) {\r\n            result._major = parseInt(matches[1]);\r\n            result._minor = parseInt(matches[2]);\r\n        }\r\n        else {\r\n            result._isValid = false;\r\n        }\r\n\r\n        if (!result._isValid) {\r\n            context.logParseEvent(\r\n                Enums.ValidationEvent.InvalidPropertyValue,\r\n                \"Invalid version string: \" + result._versionString);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    toString(): string {\r\n        return !this._isValid ? this._versionString : this._major + \".\" + this._minor;\r\n    }\r\n\r\n    toJSON(): any {\r\n        return this.toString();\r\n    }\r\n\r\n    compareTo(otherVersion: Version): number {\r\n        if (!this.isValid || !otherVersion.isValid) {\r\n            throw new Error(\"Cannot compare invalid version.\");\r\n        }\r\n\r\n        if (this.major > otherVersion.major) {\r\n            return 1;\r\n        }\r\n        else if (this.major < otherVersion.major) {\r\n            return -1;\r\n        }\r\n        else if (this.minor > otherVersion.minor) {\r\n            return 1;\r\n        }\r\n        else if (this.minor < otherVersion.minor) {\r\n            return -1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    get label(): string {\r\n        return this._label ? this._label : this.toString();\r\n    }\r\n\r\n    get major(): number {\r\n        return this._major;\r\n    }\r\n\r\n    get minor(): number {\r\n        return this._minor;\r\n    }\r\n\r\n    get isValid(): boolean {\r\n        return this._isValid;\r\n    }\r\n}\r\n\r\nexport type TargetVersion = Version | \"*\";\r\n\r\nexport class Versions {\r\n    static readonly v1_0 = new Version(1, 0);\r\n    static readonly v1_1 = new Version(1, 1);\r\n    static readonly v1_2 = new Version(1, 2);\r\n    static readonly v1_3 = new Version(1, 3, \"1.3 (Preview)\");\r\n    static readonly latest = Versions.v1_2;\r\n}\r\n\r\nexport function isVersionLessOrEqual(version: TargetVersion, targetVersion: TargetVersion): boolean {\r\n    if (version instanceof Version) {\r\n        if (targetVersion instanceof Version) {\r\n            return targetVersion.compareTo(version) >= 0;\r\n        }\r\n        else {\r\n            // Target version is *\r\n            return true;\r\n        }\r\n    }\r\n    else {\r\n        // Version is *\r\n        return true;\r\n    }\r\n}\r\n\r\nexport abstract class BaseSerializationContext {\r\n    private _validationEvents: IValidationEvent[] = [];\r\n\r\n    serializeValue(target: { [key: string]: any }, propertyName: string, propertyValue: any, defaultValue: any = undefined) {\r\n        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {\r\n            delete target[propertyName];\r\n        }\r\n        else {\r\n            target[propertyName] = propertyValue;\r\n        }\r\n    }\r\n\r\n    serializeNumber(target: { [key: string]: any }, propertyName: string, propertyValue: number | undefined, defaultValue: number | undefined = undefined) {\r\n        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue || isNaN(propertyValue)) {\r\n            delete target[propertyName];\r\n        }\r\n        else {\r\n            target[propertyName] = propertyValue;\r\n        }\r\n    }\r\n\r\n    serializeEnum(\r\n        enumType: { [s: number]: string },\r\n        target: { [key: string]: any },\r\n        propertyName: string,\r\n        propertyValue: number | undefined,\r\n        defaultValue: number | undefined = undefined) {\r\n        let targetValue = target[propertyName];\r\n\r\n        let canDeleteTarget = targetValue == undefined ? true : enumType[targetValue] !== undefined;\r\n\r\n        if (propertyValue == defaultValue) {\r\n            if (canDeleteTarget) {\r\n                delete target[propertyName];\r\n            }\r\n        }\r\n        else {\r\n            if (propertyValue == undefined) {\r\n                if (canDeleteTarget) {\r\n                    delete target[propertyName];\r\n                }\r\n            }\r\n            else {\r\n                target[propertyName] = enumType[propertyValue];\r\n            }\r\n        }\r\n    }\r\n\r\n    serializeArray(target: { [key: string]: any }, propertyName: string, propertyValue: any[] | undefined) {\r\n        let items = [];\r\n\r\n        if (propertyValue) {\r\n            for (let item of propertyValue) {\r\n                let serializedItem: any = undefined;\r\n\r\n                if (item instanceof SerializableObject) {\r\n                    serializedItem = item.toJSON(this);\r\n                }\r\n                else if (item.toJSON) {\r\n                    serializedItem = item.toJSON();\r\n                }\r\n                else {\r\n                    serializedItem = item;\r\n                }\r\n\r\n                if (serializedItem !== undefined) {\r\n                    items.push(serializedItem);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (items.length == 0) {\r\n            if (target.hasOwnProperty(propertyName) && Array.isArray(target[propertyName])) {\r\n                delete target[propertyName];\r\n            }\r\n        }\r\n        else {\r\n            this.serializeValue(target, propertyName, items);\r\n        }\r\n    }\r\n\r\n    clearEvents() {\r\n        this._validationEvents = [];\r\n    }\r\n\r\n    logEvent(\r\n        phase: Enums.ValidationPhase,\r\n        event: Enums.ValidationEvent,\r\n        message: string,\r\n        source?: SerializableObject) {\r\n        this._validationEvents.push(\r\n            {\r\n                phase: phase,\r\n                event: event,\r\n                message: message\r\n            }\r\n        )\r\n    }\r\n\r\n    logParseEvent(event: Enums.ValidationEvent, message: string, source?: SerializableObject) {\r\n        this.logEvent(Enums.ValidationPhase.Parse, event, message, source);\r\n    }\r\n\r\n    getEventAt(index: number): IValidationEvent {\r\n        return this._validationEvents[index];\r\n    }\r\n\r\n    constructor(public targetVersion: Version = Versions.latest) {}\r\n\r\n    get eventCount(): number {\r\n        return this._validationEvents.length;\r\n    }\r\n}\r\n\r\nclass SimpleSerializationContext extends BaseSerializationContext {}\r\n\r\nexport class PropertyDefinition {\r\n    private static _sequentialNumber: number = 0;\r\n\r\n    getInternalName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): any {\r\n        return source[this.name];\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: any, context: BaseSerializationContext): void {\r\n        context.serializeValue(target, this.name, value, this.defaultValue);\r\n    }\r\n\r\n    readonly sequentialNumber: number;\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly defaultValue?: any,\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => any) {\r\n            this.sequentialNumber = PropertyDefinition._sequentialNumber;\r\n\r\n            PropertyDefinition._sequentialNumber++;\r\n        }\r\n}\r\n\r\nexport class StringProperty extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): string | undefined {\r\n        let parsedValue = Utils.parseString(source[this.name], this.defaultValue);\r\n        let isUndefined = parsedValue === undefined || (parsedValue === \"\" && this.treatEmptyAsUndefined);\r\n\r\n        if (!isUndefined && this.regEx !== undefined) {\r\n            let matches = this.regEx.exec(<string>parsedValue);\r\n\r\n            if (!matches) {\r\n                context.logParseEvent(\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    `Invalid \"${this.name}\" value \"${parsedValue}\"`,\r\n                    sender);\r\n\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        return parsedValue;\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: string | undefined, context: BaseSerializationContext) {\r\n        context.serializeValue(\r\n            target,\r\n            this.name,\r\n            value === \"\" && this.treatEmptyAsUndefined ? undefined : value,\r\n            this.defaultValue);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly treatEmptyAsUndefined: boolean = true,\r\n        readonly regEx?: RegExp,\r\n        readonly defaultValue?: string,\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => string) {\r\n        super(targetVersion, name, defaultValue, onGetInitialValue);\r\n    }\r\n}\r\n\r\nexport class BoolProperty extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): boolean | undefined {\r\n        return Utils.parseBool(source[this.name], this.defaultValue);\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: object, value: boolean | undefined, context: BaseSerializationContext) {\r\n        context.serializeValue(\r\n            target,\r\n            this.name,\r\n            value,\r\n            this.defaultValue);\r\n    }\r\n}\r\n\r\nexport class NumProperty extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\r\n        return Utils.parseNumber(source[this.name], this.defaultValue);\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\r\n        context.serializeNumber(\r\n            target,\r\n            this.name,\r\n            value,\r\n            this.defaultValue);\r\n    }\r\n}\r\n\r\nexport class PixelSizeProperty extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\r\n        let result: number | undefined = undefined;\r\n        let value = source[this.name];\r\n\r\n        if (typeof value === \"string\") {\r\n            let isValid = false;\r\n\r\n            try {\r\n                let size = SizeAndUnit.parse(value, true);\r\n\r\n                if (size.unit == Enums.SizeUnit.Pixel) {\r\n                    result = size.physicalSize;\r\n\r\n                    isValid = true;\r\n                }\r\n            }\r\n            catch {\r\n                // Do nothing. A parse error is emitted below\r\n            }\r\n\r\n            if (!isValid) {\r\n                context.logParseEvent(\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    \"Invalid \\\"minHeight\\\" value: \" + source[this.name],\r\n                    sender);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\r\n        context.serializeValue(\r\n            target,\r\n            this.name,\r\n            typeof value === \"number\" && !isNaN(value) ? value + \"px\" : undefined);\r\n    }\r\n}\r\n\r\nexport interface IVersionedValue<TValue> {\r\n    value: TValue;\r\n    targetVersion?: Version;\r\n}\r\n\r\nexport class ValueSetProperty extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): string | undefined {\r\n        let sourceValue = source[this.name];\r\n\r\n        if (sourceValue === undefined) {\r\n            return this.defaultValue;\r\n        }\r\n\r\n        if (typeof sourceValue === \"string\") {\r\n            for (let versionedValue of this.values) {\r\n                if (sourceValue.toLowerCase() === versionedValue.value.toLowerCase()) {\r\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\r\n\r\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\r\n                        return versionedValue.value;\r\n                    }\r\n                    else {\r\n                        context.logParseEvent(\r\n                            Enums.ValidationEvent.InvalidPropertyValue,\r\n                            `\"${this.name}\" value \"${sourceValue}\" is supported in version ${targetVersion.toString()}, but you are using version ${context.targetVersion.toString()}`,\r\n                            sender);\r\n\r\n                        return this.defaultValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        context.logParseEvent(\r\n            Enums.ValidationEvent.InvalidPropertyValue,\r\n            `Invalid \"${this.name}\" value \"${sourceValue}\"`,\r\n            sender);\r\n\r\n        return this.defaultValue;\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: string | undefined, context: BaseSerializationContext) {\r\n        let valueFound = false;\r\n\r\n        for (let versionedValue of this.values) {\r\n            if (versionedValue.value === value) {\r\n                let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\r\n\r\n                if (targetVersion.compareTo(context.targetVersion) <= 0) {\r\n                    valueFound = true;\r\n\r\n                    break;\r\n                }\r\n                else {\r\n                    context.logEvent(\r\n                        Enums.ValidationPhase.ToJSON,\r\n                        Enums.ValidationEvent.InvalidPropertyValue,\r\n                        `\"${this.name}\" value \"${value}\" is supported in version ${targetVersion.toString()}, but you are using version ${context.targetVersion.toString()}`,\r\n                        sender);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (valueFound) {\r\n            context.serializeValue(\r\n                target,\r\n                this.name,\r\n                value,\r\n                this.defaultValue);\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly values: IVersionedValue<string>[],\r\n        readonly defaultValue?: string,\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => string) {\r\n        super(targetVersion, name, defaultValue, onGetInitialValue);\r\n    }\r\n}\r\n\r\nexport class EnumProperty<TEnum extends { [s: number]: string }> extends PropertyDefinition {\r\n    private _values: IVersionedValue<number>[] = [];\r\n\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\r\n        let sourceValue = source[this.name];\r\n\r\n        if (typeof sourceValue !== \"string\") {\r\n            return this.defaultValue;\r\n        }\r\n\r\n        let enumValue = Utils.getEnumValueByName(this.enumType, sourceValue);\r\n\r\n        if (enumValue !== undefined) {\r\n            for (let versionedValue of this.values) {\r\n                if (versionedValue.value === enumValue) {\r\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\r\n\r\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\r\n                        return enumValue;\r\n                    }\r\n                    else {\r\n                        context.logParseEvent(\r\n                            Enums.ValidationEvent.InvalidPropertyValue,\r\n                            `\"${this.name}\" value \"${sourceValue}\" is supported in version ${targetVersion.toString()}, but you are using version ${context.targetVersion.toString()}`,\r\n                            sender);\r\n\r\n                        return this.defaultValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        context.logParseEvent(\r\n            Enums.ValidationEvent.InvalidPropertyValue,\r\n            `Invalid \"${this.name}\" value \"${sourceValue}\"`,\r\n            sender);\r\n\r\n        return this.defaultValue;\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\r\n        if (value !== undefined) {\r\n            let valueFound = false;\r\n\r\n            for (let versionedValue of this.values) {\r\n                if (versionedValue.value === value) {\r\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\r\n\r\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\r\n                        valueFound = true;\r\n\r\n                        break;\r\n                    }\r\n                    else {\r\n                        context.logEvent(\r\n                            Enums.ValidationPhase.ToJSON,\r\n                            Enums.ValidationEvent.InvalidPropertyValue,\r\n                            `Invalid \"${this.name}\" value \"${value}\"`,\r\n                            sender);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (valueFound) {\r\n                context.serializeEnum(\r\n                    this.enumType,\r\n                    target,\r\n                    this.name,\r\n                    value,\r\n                    this.defaultValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly enumType: TEnum,\r\n        readonly defaultValue?: number,\r\n        values?: IVersionedValue<number>[],\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => number) {\r\n        super(targetVersion, name, defaultValue, onGetInitialValue);\r\n\r\n        if (!values) {\r\n            for (let key in enumType) {\r\n                let keyAsNumber = parseInt(key, 10);\r\n\r\n                if (keyAsNumber >= 0) {\r\n                    this._values.push( { value: keyAsNumber });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._values = values;\r\n        }\r\n    }\r\n\r\n    get values(): IVersionedValue<number>[] {\r\n        return this._values;\r\n    }\r\n}\r\n\r\nexport type SerializableObjectType = { new(): SerializableObject };\r\n\r\nexport class SerializableObjectProperty extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): SerializableObject | undefined {\r\n        let sourceValue = source[this.name];\r\n\r\n        if (sourceValue === undefined) {\r\n            return this.onGetInitialValue ? this.onGetInitialValue(sender) : this.defaultValue;\r\n        }\r\n\r\n        let result = new this.objectType();\r\n        result.parse(sourceValue, context);\r\n\r\n        return result;\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: SerializableObject | undefined, context: BaseSerializationContext) {\r\n        let serializedValue = value !== undefined ? value.toJSON(context) : value;\r\n\r\n        if (typeof serializedValue === \"object\" && Object.keys(serializedValue).length === 0) {\r\n            serializedValue = undefined;\r\n        }\r\n\r\n        super.toJSON(sender, target, serializedValue, context);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly objectType: SerializableObjectType) {\r\n        super(\r\n            targetVersion,\r\n            name,\r\n            undefined,\r\n            (sender: SerializableObject) => { return new this.objectType(); });\r\n    }\r\n}\r\n\r\nexport class SerializableObjectCollectionProperty extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): SerializableObject[] | undefined {\r\n        let result: SerializableObject[] | undefined = [];\r\n\r\n        let sourceCollection = source[this.name];\r\n\r\n        if (Array.isArray(sourceCollection)) {\r\n            for (let sourceItem of sourceCollection) {\r\n                let item = new this.objectType();\r\n                item.parse(sourceItem, context);\r\n\r\n                result.push(item);\r\n\r\n                if (this.onItemAdded) {\r\n                    this.onItemAdded(sender, item);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result.length > 0 ? result : (this.onGetInitialValue ? this.onGetInitialValue(sender) : undefined);\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: SerializableObject[] | undefined, context: BaseSerializationContext) {\r\n        context.serializeArray(target, this.name, value);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly objectType: SerializableObjectType,\r\n        readonly onItemAdded?: (sender: SerializableObject, item: SerializableObject) => void) {\r\n        super(\r\n            targetVersion,\r\n            name,\r\n            undefined,\r\n            (sender: SerializableObject) => { return []; });\r\n    }\r\n}\r\n\r\nexport class CustomProperty<T> extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): T {\r\n        return this.onParse(sender, this, source, context);\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: T, context: BaseSerializationContext) {\r\n        this.onToJSON(sender, this, target, value, context);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly onParse: (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => T,\r\n        readonly onToJSON: (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: T, context: BaseSerializationContext) => void,\r\n        readonly defaultValue?: T,\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => T) {\r\n        super(targetVersion, name, defaultValue, onGetInitialValue);\r\n\r\n        if (!this.onParse) {\r\n            throw new Error(\"CustomPropertyDefinition instances must have an onParse handler.\");\r\n        }\r\n\r\n        if (!this.onToJSON) {\r\n            throw new Error(\"CustomPropertyDefinition instances must have an onToJSON handler.\");\r\n        }\r\n    }\r\n}\r\n\r\nexport class SerializableObjectSchema {\r\n    private _properties: PropertyDefinition[] = [];\r\n\r\n    indexOf(property: PropertyDefinition): number {\r\n        for (let i = 0; i < this._properties.length; i++) {\r\n            if (this._properties[i] === property) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    add(...properties: PropertyDefinition[]) {\r\n        for (let i = 0; i < properties.length; i++) {\r\n            if (this.indexOf(properties[i]) === -1) {\r\n                this._properties.push(properties[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(...properties: PropertyDefinition[]) {\r\n        for (let property of properties) {\r\n            while (true) {\r\n                let index = this.indexOf(property);\r\n\r\n                if (index >= 0) {\r\n                    this._properties.splice(index, 1);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getItemAt(index: number): PropertyDefinition {\r\n        return this._properties[index];\r\n    }\r\n\r\n    getCount(): number {\r\n        return this._properties.length;\r\n    }\r\n}\r\n\r\n// This is a decorator function, used to map SerializableObject descendant class members to\r\n// schema properties\r\nexport function property(property: PropertyDefinition) {\r\n    return function(target: any, propertyKey: string) {\r\n        let descriptor = Object.getOwnPropertyDescriptor(target, propertyKey) || {};\r\n\r\n        if (!descriptor.get && !descriptor.set) {\r\n            descriptor.get = function(this: SerializableObject) { return this.getValue(property); };\r\n            descriptor.set = function(this: SerializableObject, value: any) { this.setValue(property, value); };\r\n\r\n            Object.defineProperty(target, propertyKey, descriptor)\r\n        }\r\n    }\r\n}\r\n\r\nexport type PropertyBag = { [propertyName: string]: any };\r\n\r\nexport abstract class SerializableObject {\r\n    static onRegisterCustomProperties?: (sender: SerializableObject, schema: SerializableObjectSchema) => void;\r\n\r\n    private static readonly _schemaCache: { [typeName: string]: SerializableObjectSchema } = {};\r\n\r\n    private _propertyBag: PropertyBag = {};\r\n    private _rawProperties: PropertyBag = {};\r\n\r\n    protected abstract getSchemaKey(): string;\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        let ctor = <any>this.constructor;\r\n        let properties: PropertyDefinition[] = [];\r\n\r\n        for (let propertyName in ctor) {\r\n            try {\r\n                let propertyValue = ctor[propertyName];\r\n\r\n                if (propertyValue instanceof PropertyDefinition) {\r\n                    properties.push(propertyValue);\r\n                }\r\n            }\r\n            catch {\r\n                // If a property happens to have a getter function and\r\n                // it throws an exception, we need to catch it here\r\n            }\r\n        }\r\n\r\n        if (properties.length > 0) {\r\n            let sortedProperties = properties.sort((p1: PropertyDefinition, p2: PropertyDefinition) => {\r\n                if (p1.sequentialNumber > p2.sequentialNumber) {\r\n                    return 1;\r\n                }\r\n                else if (p1.sequentialNumber < p2.sequentialNumber) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            schema.add(...sortedProperties);\r\n        }\r\n\r\n        if (SerializableObject.onRegisterCustomProperties) {\r\n            SerializableObject.onRegisterCustomProperties(this, schema);\r\n        }\r\n    }\r\n\r\n    protected getValue(property: PropertyDefinition): any {\r\n        return this._propertyBag.hasOwnProperty(property.getInternalName()) ? this._propertyBag[property.getInternalName()] : property.defaultValue;\r\n    }\r\n\r\n    protected setValue(property: PropertyDefinition, value: any) {\r\n        if (value === undefined || value === null) {\r\n            delete this._propertyBag[property.getInternalName()];\r\n        }\r\n        else {\r\n            this._propertyBag[property.getInternalName()] = value;\r\n        }\r\n    }\r\n\r\n    protected internalParse(source: PropertyBag, context: BaseSerializationContext) {\r\n        this._propertyBag = {};\r\n        this._rawProperties = GlobalSettings.enableFullJsonRoundTrip ? (source ? source : {}) : {};\r\n\r\n        if (source) {\r\n            let s = this.getSchema();\r\n\r\n            for (let i = 0; i < s.getCount(); i++) {\r\n                let property = s.getItemAt(i);\r\n\r\n                let propertyValue = property.onGetInitialValue ? property.onGetInitialValue(this) : undefined;\r\n\r\n                if (source.hasOwnProperty(property.name)) {\r\n                    if (property.targetVersion.compareTo(context.targetVersion) <= 0) {\r\n                        propertyValue = property.parse(this, source, context);\r\n                    }\r\n                    else {\r\n                        context.logParseEvent(\r\n                            Enums.ValidationEvent.UnsupportedProperty,\r\n                            `Property \"${property.name}\" is supported in version ${property.targetVersion.toString()}, but you are using version ${context.targetVersion.toString()}`,\r\n                            this);\r\n                    }\r\n                }\r\n\r\n                this.setValue(property, propertyValue);\r\n            }\r\n        }\r\n        else {\r\n            this.resetDefaultValues();\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: BaseSerializationContext) {\r\n        let s = this.getSchema();\r\n        let serializedProperties: string[] = [];\r\n\r\n        for (let i = 0; i < s.getCount(); i++) {\r\n            let property = s.getItemAt(i);\r\n\r\n            // Avoid serializing the same property multiple times. This is necessary\r\n            // because some property definitions map to the same underlying schema\r\n            // property\r\n            if (property.targetVersion.compareTo(context.targetVersion) <= 0 && serializedProperties.indexOf(property.name) === -1) {\r\n                property.toJSON(this, target, this.getValue(property), context);\r\n\r\n                serializedProperties.push(property.name);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected shouldSerialize(context: BaseSerializationContext): boolean {\r\n        return true;\r\n    }\r\n\r\n    maxVersion: Version = Versions.v1_3;\r\n\r\n    constructor() {\r\n        let s = this.getSchema();\r\n\r\n        for (let i = 0; i < s.getCount(); i++) {\r\n            let property = s.getItemAt(i);\r\n\r\n            if (property.onGetInitialValue) {\r\n                this.setValue(property, property.onGetInitialValue(this));\r\n            }\r\n        }\r\n    }\r\n\r\n    parse(source: PropertyBag, context?: BaseSerializationContext) {\r\n        this.internalParse(source, context ? context : new SimpleSerializationContext());\r\n    }\r\n\r\n    toJSON(context?: BaseSerializationContext): PropertyBag | undefined {\r\n        let effectiveContext = context ? context : new SimpleSerializationContext();\r\n\r\n        if (this.shouldSerialize(effectiveContext)) {\r\n            let result: PropertyBag;\r\n\r\n            if (GlobalSettings.enableFullJsonRoundTrip && this._rawProperties && typeof this._rawProperties === \"object\") {\r\n                result = this._rawProperties;\r\n            }\r\n            else {\r\n                result = {};\r\n            }\r\n\r\n            this.internalToJSON(result, effectiveContext);\r\n\r\n            return result;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    hasDefaultValue(property: PropertyDefinition): boolean {\r\n        return this.getValue(property) === property.defaultValue;\r\n    }\r\n\r\n    hasAllDefaultValues(): boolean {\r\n        let s = this.getSchema();\r\n\r\n        for (let i = 0; i < s.getCount(); i++) {\r\n            let property = s.getItemAt(i);\r\n\r\n            if (!this.hasDefaultValue(property)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    resetDefaultValues() {\r\n        let s = this.getSchema();\r\n\r\n        for (let i = 0; i < s.getCount(); i++) {\r\n            let property = s.getItemAt(i);\r\n\r\n            this.setValue(property, property.defaultValue);\r\n        }\r\n    }\r\n\r\n    setCustomProperty(name: string, value: any) {\r\n        let shouldDeleteProperty = (typeof value === \"string\" && !value) || value === undefined || value === null;\r\n\r\n        if (shouldDeleteProperty) {\r\n            delete this._rawProperties[name];\r\n        }\r\n        else {\r\n            this._rawProperties[name] = value;\r\n        }\r\n    }\r\n\r\n    getCustomProperty(name: string): any {\r\n        return this._rawProperties[name];\r\n    }\r\n\r\n    getSchema(): SerializableObjectSchema {\r\n        let schema: SerializableObjectSchema = SerializableObject._schemaCache[this.getSchemaKey()];\r\n\r\n        if (!schema) {\r\n            schema = new SerializableObjectSchema();\r\n\r\n            this.populateSchema(schema);\r\n\r\n            SerializableObject._schemaCache[this.getSchemaKey()] = schema;\r\n        }\r\n\r\n        return schema;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\nimport * as Shared from \"./shared\";\r\nimport { HostConfig } from \"./host-config\";\r\n\r\nexport function isMobileOS(): boolean {\r\n    let userAgent = window.navigator.userAgent;\r\n\r\n    return !!userAgent.match(/Android/i) || !!userAgent.match(/iPad/i) || !!userAgent.match(/iPhone/i);\r\n}\r\n\r\n/**\r\n * Generate a UUID prepended with \"__ac-\"\r\n */\r\nexport function generateUniqueId(): string {\r\n    return \"__ac-\" + Shared.UUID.generate();\r\n}\r\n\r\nexport function appendChild(node: Node, child: Node | undefined) {\r\n    if (child) {\r\n        node.appendChild(child);\r\n    }\r\n}\r\n\r\nexport function parseString(obj: any, defaultValue?: string): string | undefined {\r\n    return typeof obj === \"string\" ? obj : defaultValue;\r\n}\r\n\r\nexport function parseNumber(obj: any, defaultValue?: number): number | undefined {\r\n    return typeof obj === \"number\" ? obj : defaultValue;\r\n}\r\n\r\nexport function parseBool(value: any, defaultValue?: boolean): boolean | undefined {\r\n    if (typeof value === \"boolean\") {\r\n        return value;\r\n    }\r\n    else if (typeof value === \"string\") {\r\n        switch (value.toLowerCase()) {\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n            default:\r\n                return defaultValue;\r\n        }\r\n    }\r\n\r\n    return defaultValue;\r\n}\r\n\r\nexport function getEnumValueByName(enumType: { [s: number]: string }, name: string) : number | undefined {\r\n    for (let key in enumType) {\r\n        let keyAsNumber = parseInt(key, 10);\r\n\r\n        if (keyAsNumber >= 0) {\r\n            let value = enumType[key];\r\n\r\n            if (value && typeof value === \"string\" && value.toLowerCase() === name.toLowerCase()) {\r\n                return keyAsNumber;\r\n            }\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nexport function parseEnum(enumType: { [s: number]: string }, name: string, defaultValue?: number): number | undefined {\r\n    if (!name) {\r\n        return defaultValue;\r\n    }\r\n\r\n    let enumValue = getEnumValueByName(enumType, name);\r\n\r\n    return enumValue !== undefined ? enumValue : defaultValue;\r\n}\r\n\r\nexport function renderSeparation(hostConfig: HostConfig, separationDefinition: Shared.ISeparationDefinition, orientation: Enums.Orientation): HTMLElement | undefined {\r\n    if (separationDefinition.spacing > 0 || (separationDefinition.lineThickness && separationDefinition.lineThickness > 0)) {\r\n        let separator = document.createElement(\"div\");\r\n        separator.className = hostConfig.makeCssClassName(\"ac-\" + (orientation == Enums.Orientation.Horizontal ? \"horizontal\" : \"vertical\") + \"-separator\");\r\n\r\n        let color = separationDefinition.lineColor ? stringToCssColor(separationDefinition.lineColor) : \"\";\r\n\r\n        if (orientation == Enums.Orientation.Horizontal) {\r\n            if (separationDefinition.lineThickness) {\r\n                separator.style.paddingTop = (separationDefinition.spacing / 2) + \"px\";\r\n                separator.style.marginBottom = (separationDefinition.spacing / 2) + \"px\";\r\n                separator.style.borderBottom = separationDefinition.lineThickness + \"px solid \" + color;\r\n            }\r\n            else {\r\n                separator.style.height = separationDefinition.spacing + \"px\";\r\n            }\r\n        }\r\n        else {\r\n            if (separationDefinition.lineThickness) {\r\n                separator.style.paddingLeft = (separationDefinition.spacing / 2) + \"px\";\r\n                separator.style.marginRight = (separationDefinition.spacing / 2) + \"px\";\r\n                separator.style.borderRight = separationDefinition.lineThickness + \"px solid \" + color;\r\n            }\r\n            else {\r\n                separator.style.width = separationDefinition.spacing + \"px\";\r\n            }\r\n        }\r\n\r\n        separator.style.overflow = \"hidden\";\r\n        separator.style.flex = \"0 0 auto\";\r\n\r\n        return separator;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport function stringToCssColor(color: string | undefined): string | undefined {\r\n    if (color) {\r\n        let regEx = /#([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})?/gi;\r\n        let matches = regEx.exec(color);\r\n\r\n        if (matches && matches[4]) {\r\n            let a = parseInt(matches[1], 16) / 255;\r\n            let r = parseInt(matches[2], 16);\r\n            let g = parseInt(matches[3], 16);\r\n            let b = parseInt(matches[4], 16);\r\n\r\n            return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\r\n        }\r\n    }\r\n\r\n    return color;\r\n}\r\n\r\nexport function truncate(element: HTMLElement,\r\n    maxHeight: number,\r\n    lineHeight?: number) {\r\n    let fits = () => {\r\n        // Allow a one pixel overflow to account for rounding differences\r\n        // between browsers\r\n        return maxHeight - element.scrollHeight >= -1.0;\r\n    };\r\n\r\n    if (fits()) return;\r\n\r\n    let fullText = element.innerHTML;\r\n    let truncateAt = (idx: any) => {\r\n        element.innerHTML = fullText.substring(0, idx) + '...';\r\n    }\r\n\r\n    let breakableIndices = findBreakableIndices(fullText);\r\n    let lo = 0;\r\n    let hi = breakableIndices.length;\r\n    let bestBreakIdx = 0;\r\n\r\n    // Do a binary search for the longest string that fits\r\n    while (lo < hi) {\r\n        let mid = Math.floor((lo + hi) / 2);\r\n        truncateAt(breakableIndices[mid]);\r\n\r\n        if (fits()) {\r\n            bestBreakIdx = breakableIndices[mid];\r\n            lo = mid + 1;\r\n        }\r\n        else {\r\n            hi = mid;\r\n        }\r\n    }\r\n\r\n    truncateAt(bestBreakIdx);\r\n\r\n    // If we have extra room, try to expand the string letter by letter\r\n    // (covers the case where we have to break in the middle of a long word)\r\n    if (lineHeight && maxHeight - element.scrollHeight >= lineHeight - 1.0) {\r\n        let idx = findNextCharacter(fullText, bestBreakIdx);\r\n\r\n        while (idx < fullText.length) {\r\n            truncateAt(idx);\r\n\r\n            if (fits()) {\r\n                bestBreakIdx = idx;\r\n                idx = findNextCharacter(fullText, idx);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        truncateAt(bestBreakIdx);\r\n    }\r\n}\r\n\r\nfunction findBreakableIndices(html: string): number[] {\r\n    let results: number[] = [];\r\n    let idx = findNextCharacter(html, -1);\r\n\r\n    while (idx < html.length) {\r\n        if (html[idx] == ' ') {\r\n            results.push(idx);\r\n        }\r\n\r\n        idx = findNextCharacter(html, idx);\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\nfunction findNextCharacter(html: string, currIdx: number): number {\r\n    currIdx += 1;\r\n\r\n    // If we found the start of an HTML tag, keep advancing until we get\r\n    // past it, so we don't end up truncating in the middle of the tag\r\n    while (currIdx < html.length && html[currIdx] == '<') {\r\n        while (currIdx < html.length && html[currIdx++] != '>');\r\n    }\r\n\r\n    return currIdx;\r\n}\r\n\r\nexport function getFitStatus(element: HTMLElement, containerEnd: number): Enums.ContainerFitStatus {\r\n    let start = element.offsetTop;\r\n    let end = start + element.clientHeight;\r\n\r\n    if (end <= containerEnd) {\r\n        return Enums.ContainerFitStatus.FullyInContainer;\r\n    }\r\n    else if (start < containerEnd) {\r\n        return Enums.ContainerFitStatus.Overflowing;\r\n    }\r\n    else {\r\n        return Enums.ContainerFitStatus.FullyOutOfContainer;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { SerializableObject, Version, Versions } from \"./serialization\";\r\n\r\nexport interface ITypeRegistration<T extends SerializableObject> {\r\n    typeName: string,\r\n    objectType: { new(): T },\r\n    schemaVersion: Version\r\n}\r\n\r\nexport class CardObjectRegistry<T extends SerializableObject> {\r\n    private _items: { [typeName: string]: ITypeRegistration<T> } = {};\r\n\r\n    findByName(typeName: string): ITypeRegistration<T> | undefined {\r\n        return this._items.hasOwnProperty(typeName) ? this._items[typeName] : undefined;\r\n    }\r\n\r\n    clear() {\r\n        this._items = {};\r\n    }\r\n\r\n    register(typeName: string, objectType: { new(): T }, schemaVersion: Version = Versions.v1_0) {\r\n        let registrationInfo = this.findByName(typeName);\r\n\r\n        if (registrationInfo !== undefined) {\r\n            registrationInfo.objectType = objectType;\r\n        }\r\n        else {\r\n            registrationInfo = {\r\n                typeName: typeName,\r\n                objectType: objectType,\r\n                schemaVersion: schemaVersion\r\n            }\r\n        }\r\n\r\n        this._items[typeName] = registrationInfo;\r\n    }\r\n\r\n    unregister(typeName: string) {\r\n        delete this._items[typeName];\r\n    }\r\n\r\n    createInstance(typeName: string, targetVersion: Version): T | undefined {\r\n        let registrationInfo = this.findByName(typeName);\r\n\r\n        return (registrationInfo && registrationInfo.schemaVersion.compareTo(targetVersion) <= 0) ? new registrationInfo.objectType() : undefined;\r\n    }\r\n\r\n    getItemCount(): number {\r\n        return Object.keys(this._items).length;\r\n    }\r\n\r\n    getItemAt(index: number): ITypeRegistration<T> {\r\n        return Object.values(this._items)[index];\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\nimport { Dictionary, GlobalSettings } from \"./shared\";\r\nimport { HostConfig } from \"./host-config\";\r\nimport { HostCapabilities } from \"./host-capabilities\";\r\nimport { Versions, property, SerializableObject, StringProperty, SerializableObjectProperty, IValidationEvent, PropertyDefinition } from \"./serialization\";\r\n\r\nexport class ValidationResults {\r\n    readonly allIds: Dictionary<number> = {};\r\n    readonly validationEvents: IValidationEvent[] = [];\r\n\r\n    addFailure(cardObject: CardObject, event: Enums.ValidationEvent, message: string) {\r\n        this.validationEvents.push(\r\n            {\r\n                phase: Enums.ValidationPhase.Validation,\r\n                source: cardObject,\r\n                event: event,\r\n                message: message\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport type CardObjectType = { new(): CardObject };\r\n\r\nexport abstract class CardObject extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly typeNameProperty = new StringProperty(\r\n        Versions.v1_0,\r\n        \"type\",\r\n        undefined,\r\n        undefined,\r\n        undefined,\r\n        (sender: object) => {\r\n            return (<CardObject>sender).getJsonTypeName()\r\n        });\r\n    static readonly idProperty = new StringProperty(Versions.v1_0, \"id\");\r\n    static readonly requiresProperty = new SerializableObjectProperty(\r\n        Versions.v1_2,\r\n        \"requires\",\r\n        HostCapabilities);\r\n\r\n    protected getSchemaKey(): string {\r\n        return this.getJsonTypeName();\r\n    }\r\n\r\n    @property(CardObject.idProperty)\r\n    id?: string;\r\n\r\n    @property(CardObject.requiresProperty)\r\n    get requires(): HostCapabilities {\r\n        return this.getValue(CardObject.requiresProperty);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    private _shouldFallback: boolean = false;\r\n\r\n    protected _parent?: CardObject;\r\n    protected _renderedElement?: HTMLElement;\r\n\r\n    onPreProcessPropertyValue?: (sender: CardObject, property: PropertyDefinition, value: any) => any;\r\n\r\n    abstract getJsonTypeName(): string;\r\n\r\n    abstract get hostConfig(): HostConfig;\r\n\r\n    preProcessPropertyValue(property: PropertyDefinition, propertyValue?: any): any {\r\n        let value = propertyValue === undefined ? this.getValue(property) : propertyValue;\r\n\r\n        if (GlobalSettings.allowPreProcessingPropertyValues) {\r\n            let currentObject: CardObject | undefined = this;\r\n\r\n            while (currentObject && !currentObject.onPreProcessPropertyValue) {\r\n                currentObject = currentObject.parent;\r\n            }\r\n\r\n            if (currentObject && currentObject.onPreProcessPropertyValue) {\r\n                return currentObject.onPreProcessPropertyValue(this, property, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    setParent(value: CardObject | undefined) {\r\n        this._parent = value;\r\n    }\r\n\r\n    setShouldFallback(value: boolean) {\r\n        this._shouldFallback = value;\r\n    }\r\n\r\n    shouldFallback(): boolean {\r\n        return this._shouldFallback || !this.requires.areAllMet(this.hostConfig.hostCapabilities);\r\n    }\r\n\r\n    getRootObject(): CardObject {\r\n        let rootObject: CardObject = this;\r\n\r\n        while (rootObject.parent) {\r\n            rootObject = rootObject.parent;\r\n        }\r\n\r\n        return rootObject;\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        if (this.id) {\r\n            if (context.allIds.hasOwnProperty(this.id)) {\r\n                if (context.allIds[this.id] == 1) {\r\n                    context.addFailure(\r\n                        this,\r\n                        Enums.ValidationEvent.DuplicateId,\r\n                        \"Duplicate Id: \" + this.id);\r\n                }\r\n\r\n                context.allIds[this.id] += 1;\r\n            }\r\n            else {\r\n                context.allIds[this.id] = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    validateProperties(): ValidationResults {\r\n        let result = new ValidationResults();\r\n\r\n        this.internalValidateProperties(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    get parent(): CardObject | undefined {\r\n        return this._parent;\r\n    }\r\n\r\n    get renderedElement(): HTMLElement | undefined {\r\n        return this._renderedElement;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { TargetVersion, Version, SerializableObject, BaseSerializationContext, PropertyBag } from \"./serialization\";\r\n\r\nexport class HostCapabilities extends SerializableObject {\r\n    private _capabilities: { [key: string]: TargetVersion } = {};\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"HostCapabilities\";\r\n    }\r\n\r\n    protected internalParse(source: any, context: BaseSerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        if (source) {\r\n            for (let name in source) {\r\n                let jsonVersion = source[name];\r\n\r\n                if (typeof jsonVersion === \"string\") {\r\n                    if (jsonVersion == \"*\") {\r\n                        this.addCapability(name, \"*\");\r\n                    }\r\n                    else {\r\n                        let version = Version.parse(jsonVersion, context);\r\n\r\n                        if (version && version.isValid) {\r\n                            this.addCapability(name, version);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: BaseSerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        for (let key in this._capabilities) {\r\n            target[key] = this._capabilities[key];\r\n        }\r\n    }\r\n\r\n    addCapability(name: string, version: TargetVersion) {\r\n        this._capabilities[name] = version;\r\n    }\r\n\r\n    removeCapability(name: string) {\r\n        delete this._capabilities[name];\r\n    }\r\n\r\n    clear() {\r\n        this._capabilities = {};\r\n    }\r\n\r\n    hasCapability(name: string, version: TargetVersion): boolean {\r\n        if (this._capabilities.hasOwnProperty(name)) {\r\n            if (version == \"*\" || this._capabilities[name] == \"*\") {\r\n                return true;\r\n            }\r\n\r\n            return version.compareTo(<Version>this._capabilities[name]) <= 0;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    areAllMet(hostCapabilities: HostCapabilities): boolean {\r\n        for (let capabilityName in this._capabilities) {\r\n            if (!hostCapabilities.hasCapability(capabilityName, this._capabilities[capabilityName])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\nimport * as Utils from \"./utils\";\r\nimport * as Shared from \"./shared\";\r\nimport { HostCapabilities } from \"./host-capabilities\";\r\n\r\nfunction parseHostConfigEnum(targetEnum: { [s: number]: string }, value: string | number, defaultValue: number): number {\r\n    if (typeof value === \"string\") {\r\n        let parsedValue = Utils.parseEnum(targetEnum, value, defaultValue);\r\n\r\n        return parsedValue !== undefined ? parsedValue : defaultValue;\r\n    }\r\n    else if (typeof value === \"number\") {\r\n        return value;\r\n    }\r\n    else {\r\n        return defaultValue;\r\n    }\r\n}\r\n\r\nexport class ColorDefinition {\r\n    default: string = \"#000000\";\r\n    subtle: string = \"#666666\";\r\n\r\n    constructor(defaultColor?: string, subtleColor?: string) {\r\n        if (defaultColor) {\r\n            this.default = defaultColor;\r\n        }\r\n\r\n        if (subtleColor) {\r\n            this.subtle = subtleColor;\r\n        }\r\n    }\r\n\r\n    parse(obj?: any) {\r\n        if (obj) {\r\n            this.default = obj[\"default\"] || this.default;\r\n            this.subtle = obj[\"subtle\"] || this.subtle;\r\n        }\r\n    }\r\n}\r\n\r\nexport class TextColorDefinition extends ColorDefinition {\r\n    readonly highlightColors = new ColorDefinition(\"#22000000\", \"#11000000\");\r\n\r\n    parse(obj?: any) {\r\n        super.parse(obj);\r\n\r\n        if (obj) {\r\n            this.highlightColors.parse(obj[\"highlightColors\"]);\r\n        }\r\n    }\r\n}\r\n\r\nexport class AdaptiveCardConfig {\r\n    allowCustomStyle: boolean = false;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.allowCustomStyle = obj[\"allowCustomStyle\"] || this.allowCustomStyle;\r\n        }\r\n    }\r\n}\r\n\r\nexport class ImageSetConfig {\r\n    imageSize: Enums.Size = Enums.Size.Medium;\r\n    maxImageHeight: number = 100;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.imageSize = obj[\"imageSize\"] != null ? obj[\"imageSize\"] : this.imageSize;\r\n            this.maxImageHeight = <number>Utils.parseNumber(obj[\"maxImageHeight\"], 100);\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            imageSize: Enums.Size[this.imageSize],\r\n            maxImageHeight: this.maxImageHeight\r\n        }\r\n    }\r\n}\r\n\r\nexport class MediaConfig {\r\n    defaultPoster?: string;\r\n    allowInlinePlayback: boolean = true;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.defaultPoster = obj[\"defaultPoster\"];\r\n            this.allowInlinePlayback = obj[\"allowInlinePlayback\"] || this.allowInlinePlayback;\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            defaultPoster: this.defaultPoster,\r\n            allowInlinePlayback: this.allowInlinePlayback\r\n        }\r\n    }\r\n}\r\n\r\nexport class FactTextDefinition {\r\n    size: Enums.TextSize = Enums.TextSize.Default;\r\n    color: Enums.TextColor = Enums.TextColor.Default;;\r\n    isSubtle: boolean = false;\r\n    weight: Enums.TextWeight = Enums.TextWeight.Default;\r\n    wrap: boolean = true;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.size = parseHostConfigEnum(Enums.TextSize, obj[\"size\"], Enums.TextSize.Default);\r\n            this.color = parseHostConfigEnum(Enums.TextColor, obj[\"color\"], Enums.TextColor.Default);\r\n            this.isSubtle = obj[\"isSubtle\"] || this.isSubtle;\r\n            this.weight = parseHostConfigEnum(Enums.TextWeight, obj[\"weight\"], this.getDefaultWeight());\r\n            this.wrap = obj[\"wrap\"] != null ? obj[\"wrap\"] : this.wrap;\r\n        }\r\n    }\r\n\r\n    getDefaultWeight() {\r\n        return Enums.TextWeight.Default;\r\n    }\r\n\r\n    toJSON(): any {\r\n        return {\r\n            size: Enums.TextSize[this.size],\r\n            color: Enums.TextColor[this.color],\r\n            isSubtle: this.isSubtle,\r\n            weight: Enums.TextWeight[this.weight],\r\n            wrap: this.wrap\r\n        }\r\n    }\r\n}\r\n\r\nexport class FactTitleDefinition extends FactTextDefinition {\r\n    maxWidth?: number = 150;\r\n    weight: Enums.TextWeight = Enums.TextWeight.Bolder;\r\n\r\n    constructor(obj?: any) {\r\n        super(obj);\r\n\r\n        if (obj) {\r\n            this.maxWidth = obj[\"maxWidth\"] != null ? obj[\"maxWidth\"] : this.maxWidth;\r\n            this.weight = parseHostConfigEnum(Enums.TextWeight, obj[\"weight\"], Enums.TextWeight.Bolder);\r\n        }\r\n    }\r\n\r\n    getDefaultWeight() {\r\n        return Enums.TextWeight.Bolder;\r\n    }\r\n}\r\n\r\nexport class FactSetConfig {\r\n    readonly title: FactTitleDefinition = new FactTitleDefinition();\r\n    readonly value: FactTextDefinition = new FactTextDefinition();\r\n    spacing: number = 10;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.title = new FactTitleDefinition(obj[\"title\"]);\r\n            this.value = new FactTextDefinition(obj[\"value\"]);\r\n            this.spacing = obj.spacing && obj.spacing != null ? obj.spacing && obj.spacing : this.spacing;\r\n        }\r\n    }\r\n}\r\n\r\nexport class ShowCardActionConfig {\r\n    actionMode: Enums.ShowCardActionMode = Enums.ShowCardActionMode.Inline;\r\n    inlineTopMargin: number = 16;\r\n    style?: string = Enums.ContainerStyle.Emphasis;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.actionMode = parseHostConfigEnum(Enums.ShowCardActionMode, obj[\"actionMode\"], Enums.ShowCardActionMode.Inline);\r\n            this.inlineTopMargin = obj[\"inlineTopMargin\"] != null ? obj[\"inlineTopMargin\"] : this.inlineTopMargin;\r\n            this.style = obj[\"style\"] && typeof obj[\"style\"] === \"string\" ? obj[\"style\"] : Enums.ContainerStyle.Emphasis;\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            actionMode: Enums.ShowCardActionMode[this.actionMode],\r\n            inlineTopMargin: this.inlineTopMargin,\r\n            style: this.style\r\n        }\r\n    }\r\n}\r\n\r\nexport class ActionsConfig {\r\n    maxActions: number = 5;\r\n    spacing: Enums.Spacing = Enums.Spacing.Default;\r\n    buttonSpacing: number = 20;\r\n    readonly showCard: ShowCardActionConfig = new ShowCardActionConfig();\r\n    preExpandSingleShowCardAction?: boolean = false;\r\n    actionsOrientation: Enums.Orientation = Enums.Orientation.Horizontal;\r\n    actionAlignment: Enums.ActionAlignment = Enums.ActionAlignment.Left;\r\n    iconPlacement: Enums.ActionIconPlacement = Enums.ActionIconPlacement.LeftOfTitle;\r\n    allowTitleToWrap: boolean = false;\r\n    iconSize: number = 16;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.maxActions = obj[\"maxActions\"] != null ? obj[\"maxActions\"] : this.maxActions;\r\n            this.spacing = parseHostConfigEnum(Enums.Spacing, obj.spacing && obj.spacing, Enums.Spacing.Default);\r\n            this.buttonSpacing = obj[\"buttonSpacing\"] != null ? obj[\"buttonSpacing\"] : this.buttonSpacing;\r\n            this.showCard = new ShowCardActionConfig(obj[\"showCard\"]);\r\n            this.preExpandSingleShowCardAction = Utils.parseBool(obj[\"preExpandSingleShowCardAction\"], false);\r\n            this.actionsOrientation = parseHostConfigEnum(Enums.Orientation, obj[\"actionsOrientation\"], Enums.Orientation.Horizontal);\r\n            this.actionAlignment = parseHostConfigEnum(Enums.ActionAlignment, obj[\"actionAlignment\"], Enums.ActionAlignment.Left);\r\n            this.iconPlacement = parseHostConfigEnum(Enums.ActionIconPlacement, obj[\"iconPlacement\"], Enums.ActionIconPlacement.LeftOfTitle);\r\n            this.allowTitleToWrap = obj[\"allowTitleToWrap\"] != null ? obj[\"allowTitleToWrap\"] : this.allowTitleToWrap;\r\n\r\n            try {\r\n                let sizeAndUnit = Shared.SizeAndUnit.parse(obj[\"iconSize\"]);\r\n\r\n                if (sizeAndUnit.unit == Enums.SizeUnit.Pixel) {\r\n                    this.iconSize = sizeAndUnit.physicalSize;\r\n                }\r\n            }\r\n            catch (e) {\r\n                // Swallow this, keep default icon size\r\n            }\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            maxActions: this.maxActions,\r\n            spacing: Enums.Spacing[this.spacing],\r\n            buttonSpacing: this.buttonSpacing,\r\n            showCard: this.showCard,\r\n            preExpandSingleShowCardAction: this.preExpandSingleShowCardAction,\r\n            actionsOrientation: Enums.Orientation[this.actionsOrientation],\r\n            actionAlignment: Enums.ActionAlignment[this.actionAlignment]\r\n        }\r\n    }\r\n}\r\n\r\nexport class ColorSetDefinition {\r\n    private parseSingleColor(obj: any, propertyName: string) {\r\n        if (obj) {\r\n            ((<any>this)[propertyName] as TextColorDefinition).parse(obj[propertyName]);\r\n        }\r\n    }\r\n\r\n    default: TextColorDefinition = new TextColorDefinition();\r\n    dark: TextColorDefinition = new TextColorDefinition();\r\n    light: TextColorDefinition = new TextColorDefinition();\r\n    accent: TextColorDefinition = new TextColorDefinition();\r\n    good: TextColorDefinition = new TextColorDefinition();\r\n    warning: TextColorDefinition = new TextColorDefinition();\r\n    attention: TextColorDefinition = new TextColorDefinition();\r\n\r\n    constructor(obj?: any) {\r\n        this.parse(obj);\r\n    }\r\n\r\n    parse(obj: any) {\r\n        if (obj) {\r\n            this.parseSingleColor(obj, \"default\");\r\n            this.parseSingleColor(obj, \"dark\");\r\n            this.parseSingleColor(obj, \"light\");\r\n            this.parseSingleColor(obj, \"accent\");\r\n            this.parseSingleColor(obj, \"good\");\r\n            this.parseSingleColor(obj, \"warning\");\r\n            this.parseSingleColor(obj, \"attention\");\r\n        }\r\n    }\r\n}\r\n\r\nexport class ContainerStyleDefinition {\r\n    backgroundColor?: string;\r\n\r\n    readonly foregroundColors: ColorSetDefinition = new ColorSetDefinition(\r\n        {\r\n            \"default\": { default: \"#333333\", subtle: \"#EE333333\" },\r\n            \"dark\": { default: \"#000000\", subtle: \"#66000000\" },\r\n            \"light\": { default: \"#FFFFFF\", subtle: \"#33000000\" },\r\n            \"accent\": { default: \"#2E89FC\", subtle: \"#882E89FC\" },\r\n            \"good\": { default: \"#028A02\", subtle: \"#DD027502\" },\r\n            \"warning\": { default: \"#E69500\", subtle: \"#DDE69500\" },\r\n            \"attention\": { default: \"#CC3300\", subtle: \"#DDCC3300\" }\r\n        }\r\n    );\r\n\r\n    highlightBackgroundColor?: string;\r\n    highlightForegroundColor?: string;\r\n\r\n    parse(obj: any) {\r\n        if (obj) {\r\n            this.backgroundColor = obj[\"backgroundColor\"];\r\n\r\n            this.foregroundColors.parse(obj[\"foregroundColors\"]);\r\n\r\n            this.highlightBackgroundColor = obj[\"highlightBackgroundColor\"];\r\n            this.highlightForegroundColor = obj[\"highlightForegroundColor\"];\r\n        }\r\n    }\r\n\r\n    constructor(obj?: any) {\r\n        this.parse(obj);\r\n    }\r\n\r\n    get isBuiltIn(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nclass BuiltInContainerStyleDefinition extends ContainerStyleDefinition {\r\n    get isBuiltIn(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport interface ILineHeightDefinitions {\r\n    small: number;\r\n    medium: number;\r\n    default: number;\r\n    large: number;\r\n    extraLarge: number;\r\n}\r\n\r\nexport class ContainerStyleSet {\r\n    private _allStyles: { [key: string]: ContainerStyleDefinition } = {};\r\n\r\n    constructor(obj?: any) {\r\n        this._allStyles[Enums.ContainerStyle.Default] = new BuiltInContainerStyleDefinition();\r\n        this._allStyles[Enums.ContainerStyle.Emphasis] = new BuiltInContainerStyleDefinition();\r\n        this._allStyles[Enums.ContainerStyle.Accent] = new BuiltInContainerStyleDefinition();\r\n        this._allStyles[Enums.ContainerStyle.Good] = new BuiltInContainerStyleDefinition();\r\n        this._allStyles[Enums.ContainerStyle.Attention] = new BuiltInContainerStyleDefinition();\r\n        this._allStyles[Enums.ContainerStyle.Warning] = new BuiltInContainerStyleDefinition();\r\n\r\n        if (obj) {\r\n            this._allStyles[Enums.ContainerStyle.Default].parse(obj[Enums.ContainerStyle.Default]);\r\n            this._allStyles[Enums.ContainerStyle.Emphasis].parse(obj[Enums.ContainerStyle.Emphasis]);\r\n            this._allStyles[Enums.ContainerStyle.Accent].parse(obj[Enums.ContainerStyle.Accent]);\r\n            this._allStyles[Enums.ContainerStyle.Good].parse(obj[Enums.ContainerStyle.Good]);\r\n            this._allStyles[Enums.ContainerStyle.Attention].parse(obj[Enums.ContainerStyle.Attention]);\r\n            this._allStyles[Enums.ContainerStyle.Warning].parse(obj[Enums.ContainerStyle.Warning]);\r\n\r\n            const customStyleArray = obj[\"customStyles\"];\r\n\r\n            if (customStyleArray && Array.isArray(customStyleArray)) {\r\n                for (let customStyle of customStyleArray) {\r\n                    if (customStyle) {\r\n                        let styleName = customStyle[\"name\"];\r\n\r\n                        if (styleName && typeof styleName === \"string\") {\r\n                            if (this._allStyles.hasOwnProperty(styleName)) {\r\n                                this._allStyles[styleName].parse(customStyle[\"style\"]);\r\n                            }\r\n                            else {\r\n                                this._allStyles[styleName] = new ContainerStyleDefinition(customStyle[\"style\"]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        let customStyleArray: any[] = [];\r\n\r\n        Object.keys(this._allStyles).forEach(\r\n            (key) => {\r\n                if (!this._allStyles[key].isBuiltIn) {\r\n                    customStyleArray.push({\r\n                        name: key,\r\n                        style: this._allStyles[key]\r\n                    });\r\n                }\r\n            });\r\n\r\n        let result: any = {\r\n            default: this.default,\r\n            emphasis: this.emphasis\r\n        }\r\n\r\n        if (customStyleArray.length > 0) {\r\n            result.customStyles = customStyleArray;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getStyleByName(name: string | undefined, defaultValue?: ContainerStyleDefinition): ContainerStyleDefinition {\r\n        if (name && this._allStyles.hasOwnProperty(name)) {\r\n            return this._allStyles[name];\r\n        }\r\n        else {\r\n            return defaultValue ? defaultValue : this._allStyles[Enums.ContainerStyle.Default];\r\n        }\r\n    }\r\n\r\n    get default(): ContainerStyleDefinition {\r\n        return this._allStyles[Enums.ContainerStyle.Default];\r\n    }\r\n\r\n    get emphasis(): ContainerStyleDefinition {\r\n        return this._allStyles[Enums.ContainerStyle.Emphasis];\r\n    }\r\n}\r\n\r\nexport interface IFontSizeDefinitions {\r\n    small: number;\r\n    default: number;\r\n    medium: number;\r\n    large: number;\r\n    extraLarge: number;\r\n}\r\n\r\nexport interface IFontWeightDefinitions {\r\n    lighter: number;\r\n    default: number;\r\n    bolder: number;\r\n}\r\n\r\nexport class FontTypeDefinition {\r\n    static readonly monospace = new FontTypeDefinition(\"'Courier New', Courier, monospace\");\r\n\r\n    fontFamily?: string = \"Segoe UI,Segoe,Segoe WP,Helvetica Neue,Helvetica,sans-serif\";\r\n\r\n    fontSizes: IFontSizeDefinitions = {\r\n        small: 12,\r\n        default: 14,\r\n        medium: 17,\r\n        large: 21,\r\n        extraLarge: 26\r\n    };\r\n\r\n    fontWeights: IFontWeightDefinitions = {\r\n        lighter: 200,\r\n        default: 400,\r\n        bolder: 600\r\n    };\r\n\r\n    constructor(fontFamily?: string) {\r\n        if (fontFamily) {\r\n            this.fontFamily = fontFamily;\r\n        }\r\n    }\r\n\r\n    parse(obj?: any) {\r\n        this.fontFamily = obj[\"fontFamily\"] || this.fontFamily;\r\n        this.fontSizes = {\r\n            small: obj.fontSizes && obj.fontSizes[\"small\"] || this.fontSizes.small,\r\n            default: obj.fontSizes && obj.fontSizes[\"default\"] || this.fontSizes.default,\r\n            medium: obj.fontSizes && obj.fontSizes[\"medium\"] || this.fontSizes.medium,\r\n            large: obj.fontSizes && obj.fontSizes[\"large\"] || this.fontSizes.large,\r\n            extraLarge: obj.fontSizes && obj.fontSizes[\"extraLarge\"] || this.fontSizes.extraLarge\r\n        };\r\n        this.fontWeights = {\r\n            lighter: obj.fontWeights && obj.fontWeights[\"lighter\"] || this.fontWeights.lighter,\r\n            default: obj.fontWeights && obj.fontWeights[\"default\"] || this.fontWeights.default,\r\n            bolder: obj.fontWeights && obj.fontWeights[\"bolder\"] || this.fontWeights.bolder\r\n        };\r\n    }\r\n}\r\n\r\nexport class FontTypeSet {\r\n    default: FontTypeDefinition;\r\n    monospace: FontTypeDefinition;\r\n\r\n    constructor(obj?: any) {\r\n        this.default = new FontTypeDefinition();\r\n        this.monospace = new FontTypeDefinition(\"'Courier New', Courier, monospace\");\r\n\r\n        if (obj) {\r\n            this.default.parse(obj[\"default\"]);\r\n            this.monospace.parse(obj[\"monospace\"]);\r\n        }\r\n    }\r\n\r\n    getStyleDefinition(style: Enums.FontType | undefined): FontTypeDefinition {\r\n        switch (style) {\r\n            case Enums.FontType.Monospace:\r\n                return this.monospace;\r\n            case Enums.FontType.Default:\r\n            default:\r\n                return this.default;\r\n        }\r\n    }\r\n}\r\n\r\nexport class HostConfig {\r\n    readonly hostCapabilities = new HostCapabilities();\r\n\r\n    private _legacyFontType: FontTypeDefinition;\r\n\r\n    choiceSetInputValueSeparator: string = \",\";\r\n    supportsInteractivity: boolean = true;\r\n    lineHeights?: ILineHeightDefinitions;\r\n    fontTypes?: FontTypeSet;\r\n\r\n    readonly spacing = {\r\n        small: 3,\r\n        default: 8,\r\n        medium: 20,\r\n        large: 30,\r\n        extraLarge: 40,\r\n        padding: 15\r\n    };\r\n\r\n    readonly separator = {\r\n        lineThickness: 1,\r\n        lineColor: \"#EEEEEE\"\r\n    };\r\n\r\n    readonly imageSizes = {\r\n        small: 40,\r\n        medium: 80,\r\n        large: 160\r\n    };\r\n\r\n    readonly containerStyles: ContainerStyleSet = new ContainerStyleSet();\r\n    readonly actions: ActionsConfig = new ActionsConfig();\r\n    readonly adaptiveCard: AdaptiveCardConfig = new AdaptiveCardConfig();\r\n    readonly imageSet: ImageSetConfig = new ImageSetConfig();\r\n    readonly media: MediaConfig = new MediaConfig();\r\n    readonly factSet: FactSetConfig = new FactSetConfig();\r\n\r\n    cssClassNamePrefix?: string;\r\n    alwaysAllowBleed: boolean = false;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            if (typeof obj === \"string\" || obj instanceof String) {\r\n                obj = JSON.parse(obj as string);\r\n            }\r\n\r\n            this.choiceSetInputValueSeparator = (obj && typeof obj[\"choiceSetInputValueSeparator\"] === \"string\") ? obj[\"choiceSetInputValueSeparator\"] : this.choiceSetInputValueSeparator;\r\n            this.supportsInteractivity = (obj && typeof obj[\"supportsInteractivity\"] === \"boolean\") ? obj[\"supportsInteractivity\"] : this.supportsInteractivity;\r\n\r\n            this._legacyFontType = new FontTypeDefinition();\r\n            this._legacyFontType.parse(obj);\r\n\r\n            if (obj.fontTypes) {\r\n                this.fontTypes = new FontTypeSet(obj.fontTypes);\r\n            }\r\n\r\n            if (obj.lineHeights) {\r\n                this.lineHeights = {\r\n                    small: obj.lineHeights[\"small\"],\r\n                    default: obj.lineHeights[\"default\"],\r\n                    medium: obj.lineHeights[\"medium\"],\r\n                    large: obj.lineHeights[\"large\"],\r\n                    extraLarge: obj.lineHeights[\"extraLarge\"]\r\n                };\r\n            };\r\n\r\n            this.imageSizes = {\r\n                small: obj.imageSizes && obj.imageSizes[\"small\"] || this.imageSizes.small,\r\n                medium: obj.imageSizes && obj.imageSizes[\"medium\"] || this.imageSizes.medium,\r\n                large: obj.imageSizes && obj.imageSizes[\"large\"] || this.imageSizes.large,\r\n            };\r\n\r\n            this.containerStyles = new ContainerStyleSet(obj[\"containerStyles\"]);\r\n            this.spacing = {\r\n                small: obj.spacing && obj.spacing[\"small\"] || this.spacing.small,\r\n                default: obj.spacing && obj.spacing[\"default\"] || this.spacing.default,\r\n                medium: obj.spacing && obj.spacing[\"medium\"] || this.spacing.medium,\r\n                large: obj.spacing && obj.spacing[\"large\"] || this.spacing.large,\r\n                extraLarge: obj.spacing && obj.spacing[\"extraLarge\"] || this.spacing.extraLarge,\r\n                padding: obj.spacing && obj.spacing[\"padding\"] || this.spacing.padding\r\n            };\r\n\r\n            this.separator = {\r\n                lineThickness: obj.separator && obj.separator[\"lineThickness\"] || this.separator.lineThickness,\r\n                lineColor: obj.separator && obj.separator[\"lineColor\"] || this.separator.lineColor\r\n            }\r\n\r\n            this.actions = new ActionsConfig(obj.actions || this.actions);\r\n            this.adaptiveCard = new AdaptiveCardConfig(obj.adaptiveCard || this.adaptiveCard);\r\n            this.imageSet = new ImageSetConfig(obj[\"imageSet\"]);\r\n            this.factSet = new FactSetConfig(obj[\"factSet\"])\r\n        }\r\n    }\r\n\r\n    getFontTypeDefinition(style?: Enums.FontType): FontTypeDefinition {\r\n        if (this.fontTypes) {\r\n            return this.fontTypes.getStyleDefinition(style);\r\n        }\r\n        else {\r\n            return style == Enums.FontType.Monospace ? FontTypeDefinition.monospace : this._legacyFontType;\r\n        }\r\n    }\r\n\r\n    getEffectiveSpacing(spacing: Enums.Spacing): number {\r\n        switch (spacing) {\r\n            case Enums.Spacing.Small:\r\n                return this.spacing.small;\r\n            case Enums.Spacing.Default:\r\n                return this.spacing.default;\r\n            case Enums.Spacing.Medium:\r\n                return this.spacing.medium;\r\n            case Enums.Spacing.Large:\r\n                return this.spacing.large;\r\n            case Enums.Spacing.ExtraLarge:\r\n                return this.spacing.extraLarge;\r\n            case Enums.Spacing.Padding:\r\n                return this.spacing.padding;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    paddingDefinitionToSpacingDefinition(paddingDefinition: Shared.PaddingDefinition): Shared.SpacingDefinition {\r\n        return new Shared.SpacingDefinition(\r\n            this.getEffectiveSpacing(paddingDefinition.top),\r\n            this.getEffectiveSpacing(paddingDefinition.right),\r\n            this.getEffectiveSpacing(paddingDefinition.bottom),\r\n            this.getEffectiveSpacing(paddingDefinition.left));\r\n    }\r\n\r\n    makeCssClassNames(...classNames: string[]): string[] {\r\n        let result: string[] = [];\r\n\r\n        for (let className of classNames) {\r\n            result.push((this.cssClassNamePrefix ? this.cssClassNamePrefix + \"-\" : \"\") + className);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    makeCssClassName(...classNames: string[]): string {\r\n        let result = this.makeCssClassNames(...classNames).join(\" \");\r\n\r\n        return result ? result : \"\";\r\n    }\r\n\r\n    get fontFamily(): string | undefined {\r\n        return this._legacyFontType.fontFamily;\r\n    }\r\n\r\n    set fontFamily(value: string | undefined) {\r\n        this._legacyFontType.fontFamily = value;\r\n    }\r\n\r\n    get fontSizes(): IFontSizeDefinitions {\r\n        return this._legacyFontType.fontSizes;\r\n    }\r\n\r\n    get fontWeights(): IFontWeightDefinitions {\r\n        return this._legacyFontType.fontWeights;\r\n    }\r\n}\r\n\r\nexport const defaultHostConfig: HostConfig = new HostConfig(\r\n    {\r\n        supportsInteractivity: true,\r\n        spacing: {\r\n            small: 10,\r\n            default: 20,\r\n            medium: 30,\r\n            large: 40,\r\n            extraLarge: 50,\r\n            padding: 20\r\n        },\r\n        separator: {\r\n            lineThickness: 1,\r\n            lineColor: \"#EEEEEE\"\r\n        },\r\n        fontTypes: {\r\n            default: {\r\n                fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\r\n                fontSizes: {\r\n                    small: 12,\r\n                    default: 14,\r\n                    medium: 17,\r\n                    large: 21,\r\n                    extraLarge: 26\r\n                },\r\n                fontWeights: {\r\n                    lighter: 200,\r\n                    default: 400,\r\n                    bolder: 600\r\n                }\r\n            },\r\n            monospace: {\r\n                fontFamily: \"'Courier New', Courier, monospace\",\r\n                fontSizes: {\r\n                    small: 12,\r\n                    default: 14,\r\n                    medium: 17,\r\n                    large: 21,\r\n                    extraLarge: 26\r\n                },\r\n                fontWeights: {\r\n                    lighter: 200,\r\n                    default: 400,\r\n                    bolder: 600\r\n                }\r\n            }\r\n        },\r\n        imageSizes: {\r\n            small: 40,\r\n            medium: 80,\r\n            large: 160\r\n        },\r\n        containerStyles: {\r\n            default: {\r\n                backgroundColor: \"#FFFFFF\",\r\n                foregroundColors: {\r\n                    default: {\r\n                        default: \"#333333\",\r\n                        subtle: \"#EE333333\"\r\n                    },\r\n                    dark: {\r\n                        default: \"#000000\",\r\n                        subtle: \"#66000000\"\r\n                    },\r\n                    light: {\r\n                        default: \"#FFFFFF\",\r\n                        subtle: \"#33000000\"\r\n                    },\r\n                    accent: {\r\n                        default: \"#2E89FC\",\r\n                        subtle: \"#882E89FC\"\r\n                    },\r\n                    attention: {\r\n                        default: \"#cc3300\",\r\n                        subtle: \"#DDcc3300\"\r\n                    },\r\n                    good: {\r\n                        default: \"#028A02\",\r\n                        subtle: \"#DD027502\"\r\n                    },\r\n                    warning: {\r\n                        default: \"#e69500\",\r\n                        subtle: \"#DDe69500\"\r\n                    }\r\n                }\r\n            },\r\n            emphasis: {\r\n                backgroundColor: \"#08000000\",\r\n                foregroundColors: {\r\n                    default: {\r\n                        default: \"#333333\",\r\n                        subtle: \"#EE333333\"\r\n                    },\r\n                    dark: {\r\n                        default: \"#000000\",\r\n                        subtle: \"#66000000\"\r\n                    },\r\n                    light: {\r\n                        default: \"#FFFFFF\",\r\n                        subtle: \"#33000000\"\r\n                    },\r\n                    accent: {\r\n                        default: \"#2E89FC\",\r\n                        subtle: \"#882E89FC\"\r\n                    },\r\n                    attention: {\r\n                        default: \"#cc3300\",\r\n                        subtle: \"#DDcc3300\"\r\n                    },\r\n                    good: {\r\n                        default: \"#028A02\",\r\n                        subtle: \"#DD027502\"\r\n                    },\r\n                    warning: {\r\n                        default: \"#e69500\",\r\n                        subtle: \"#DDe69500\"\r\n                    }\r\n                }\r\n            },\r\n            accent: {\r\n                backgroundColor: \"#C7DEF9\",\r\n                foregroundColors: {\r\n                    default: {\r\n                        default: \"#333333\",\r\n                        subtle: \"#EE333333\"\r\n                    },\r\n                    dark: {\r\n                        default: \"#000000\",\r\n                        subtle: \"#66000000\"\r\n                    },\r\n                    light: {\r\n                        default: \"#FFFFFF\",\r\n                        subtle: \"#33000000\"\r\n                    },\r\n                    accent: {\r\n                        default: \"#2E89FC\",\r\n                        subtle: \"#882E89FC\"\r\n                    },\r\n                    attention: {\r\n                        default: \"#cc3300\",\r\n                        subtle: \"#DDcc3300\"\r\n                    },\r\n                    good: {\r\n                        default: \"#028A02\",\r\n                        subtle: \"#DD027502\"\r\n                    },\r\n                    warning: {\r\n                        default: \"#e69500\",\r\n                        subtle: \"#DDe69500\"\r\n                    }\r\n                }\r\n            },\r\n            good: {\r\n                backgroundColor: \"#CCFFCC\",\r\n                foregroundColors: {\r\n                    default: {\r\n                        default: \"#333333\",\r\n                        subtle: \"#EE333333\"\r\n                    },\r\n                    dark: {\r\n                        default: \"#000000\",\r\n                        subtle: \"#66000000\"\r\n                    },\r\n                    light: {\r\n                        default: \"#FFFFFF\",\r\n                        subtle: \"#33000000\"\r\n                    },\r\n                    accent: {\r\n                        default: \"#2E89FC\",\r\n                        subtle: \"#882E89FC\"\r\n                    },\r\n                    attention: {\r\n                        default: \"#cc3300\",\r\n                        subtle: \"#DDcc3300\"\r\n                    },\r\n                    good: {\r\n                        default: \"#028A02\",\r\n                        subtle: \"#DD027502\"\r\n                    },\r\n                    warning: {\r\n                        default: \"#e69500\",\r\n                        subtle: \"#DDe69500\"\r\n                    }\r\n                }\r\n            },\r\n            attention: {\r\n                backgroundColor: \"#FFC5B2\",\r\n                foregroundColors: {\r\n                    default: {\r\n                        default: \"#333333\",\r\n                        subtle: \"#EE333333\"\r\n                    },\r\n                    dark: {\r\n                        default: \"#000000\",\r\n                        subtle: \"#66000000\"\r\n                    },\r\n                    light: {\r\n                        default: \"#FFFFFF\",\r\n                        subtle: \"#33000000\"\r\n                    },\r\n                    accent: {\r\n                        default: \"#2E89FC\",\r\n                        subtle: \"#882E89FC\"\r\n                    },\r\n                    attention: {\r\n                        default: \"#cc3300\",\r\n                        subtle: \"#DDcc3300\"\r\n                    },\r\n                    good: {\r\n                        default: \"#028A02\",\r\n                        subtle: \"#DD027502\"\r\n                    },\r\n                    warning: {\r\n                        default: \"#e69500\",\r\n                        subtle: \"#DDe69500\"\r\n                    }\r\n                }\r\n            },\r\n            warning: {\r\n                backgroundColor: \"#FFE2B2\",\r\n                foregroundColors: {\r\n                    default: {\r\n                        default: \"#333333\",\r\n                        subtle: \"#EE333333\"\r\n                    },\r\n                    dark: {\r\n                        default: \"#000000\",\r\n                        subtle: \"#66000000\"\r\n                    },\r\n                    light: {\r\n                        default: \"#FFFFFF\",\r\n                        subtle: \"#33000000\"\r\n                    },\r\n                    accent: {\r\n                        default: \"#2E89FC\",\r\n                        subtle: \"#882E89FC\"\r\n                    },\r\n                    attention: {\r\n                        default: \"#cc3300\",\r\n                        subtle: \"#DDcc3300\"\r\n                    },\r\n                    good: {\r\n                        default: \"#028A02\",\r\n                        subtle: \"#DD027502\"\r\n                    },\r\n                    warning: {\r\n                        default: \"#e69500\",\r\n                        subtle: \"#DDe69500\"\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        actions: {\r\n            maxActions: 5,\r\n            spacing: Enums.Spacing.Default,\r\n            buttonSpacing: 10,\r\n            showCard: {\r\n                actionMode: Enums.ShowCardActionMode.Inline,\r\n                inlineTopMargin: 16\r\n            },\r\n            actionsOrientation: Enums.Orientation.Horizontal,\r\n            actionAlignment: Enums.ActionAlignment.Left\r\n        },\r\n        adaptiveCard: {\r\n            allowCustomStyle: false\r\n        },\r\n        imageSet: {\r\n            imageSize: Enums.Size.Medium,\r\n            maxImageHeight: 100\r\n        },\r\n        factSet: {\r\n            title: {\r\n                color: Enums.TextColor.Default,\r\n                size: Enums.TextSize.Default,\r\n                isSubtle: false,\r\n                weight: Enums.TextWeight.Bolder,\r\n                wrap: true,\r\n                maxWidth: 150,\r\n            },\r\n            value: {\r\n                color: Enums.TextColor.Default,\r\n                size: Enums.TextSize.Default,\r\n                isSubtle: false,\r\n                weight: Enums.TextWeight.Default,\r\n                wrap: true,\r\n            },\r\n            spacing: 10\r\n        }\r\n    });\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport * from \"./serialization\";\r\nexport * from \"./registry\";\r\nexport * from \"./card-object\";\r\nexport * from \"./card-elements\";\r\nexport * from \"./enums\";\r\nexport * from \"./host-config\";\r\nexport * from \"./shared\";\r\nexport * from \"./utils\";\r\nexport { IAdaptiveCard, ICardElement } from \"./schema\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\nimport { PaddingDefinition, GlobalSettings, SizeAndUnit,SpacingDefinition,\r\n    Dictionary, StringWithSubstitutions, ContentTypes, IInput, IResourceInformation } from \"./shared\";\r\nimport * as Utils from \"./utils\";\r\nimport { HostConfig, defaultHostConfig, FontTypeDefinition, ColorSetDefinition, TextColorDefinition, ContainerStyleDefinition } from \"./host-config\";\r\nimport * as TextFormatters from \"./text-formatters\";\r\nimport { HostCapabilities } from \"./host-capabilities\";\r\nimport { CardObject, ValidationResults } from \"./card-object\";\r\nimport { Versions, Version, property, BaseSerializationContext, SerializableObject, SerializableObjectSchema, StringProperty,\r\n    BoolProperty, ValueSetProperty, EnumProperty, SerializableObjectCollectionProperty, SerializableObjectProperty, PixelSizeProperty,\r\n    NumProperty, PropertyBag, CustomProperty, PropertyDefinition } from \"./serialization\";\r\nimport { CardObjectRegistry } from \"./registry\";\r\n\r\nexport type CardElementHeight = \"auto\" | \"stretch\";\r\n\r\nexport abstract class CardElement extends CardObject {\r\n    //#region Schema\r\n\r\n    static readonly langProperty = new StringProperty(Versions.v1_1, \"lang\", true, /^[a-z]{2,3}$/ig);\r\n    static readonly isVisibleProperty = new BoolProperty(Versions.v1_2, \"isVisible\", true);\r\n    static readonly separatorProperty = new BoolProperty(Versions.v1_0, \"separator\", false);\r\n    static readonly heightProperty = new ValueSetProperty(\r\n        Versions.v1_1,\r\n        \"height\",\r\n        [\r\n            { value: \"auto\" },\r\n            { value: \"stretch\" }\r\n        ],\r\n        \"auto\");\r\n    static readonly horizontalAlignmentProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"horizontalAlignment\",\r\n        Enums.HorizontalAlignment,\r\n        Enums.HorizontalAlignment.Left);\r\n    static readonly spacingProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"spacing\",\r\n        Enums.Spacing,\r\n        Enums.Spacing.Default);\r\n\r\n    @property(CardElement.horizontalAlignmentProperty)\r\n    horizontalAlignment: Enums.HorizontalAlignment;\r\n\r\n    @property(CardElement.spacingProperty)\r\n    spacing: Enums.Spacing;\r\n\r\n    @property(CardElement.separatorProperty)\r\n    separator: boolean;\r\n\r\n    @property(CardElement.heightProperty)\r\n    height: CardElementHeight;\r\n\r\n    @property(CardElement.langProperty)\r\n    get lang(): string | undefined {\r\n        let lang = this.getValue(CardElement.langProperty);\r\n\r\n        if (lang) {\r\n            return lang;\r\n        }\r\n        else {\r\n            if (this.parent) {\r\n                return this.parent.lang;\r\n            }\r\n            else {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    set lang(value: string | undefined) {\r\n        this.setValue(CardElement.langProperty, value);\r\n    }\r\n\r\n    @property(CardElement.isVisibleProperty)\r\n    get isVisible(): boolean {\r\n        return this.getValue(CardElement.isVisibleProperty);\r\n    }\r\n\r\n    set isVisible(value: boolean) {\r\n        // If the element is going to be hidden, reset any changes that were due\r\n        // to overflow truncation (this ensures that if the element is later\r\n        // un-hidden it has the right content)\r\n        if (GlobalSettings.useAdvancedCardBottomTruncation && !value) {\r\n            this.undoOverflowTruncation();\r\n        }\r\n\r\n        if (this.isVisible !== value) {\r\n            this.setValue(CardElement.isVisibleProperty, value);\r\n\r\n            this.updateRenderedElementVisibility();\r\n\r\n            if (this._renderedElement) {\r\n                raiseElementVisibilityChangedEvent(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    private _hostConfig?: HostConfig;\r\n    private _separatorElement?: HTMLElement;\r\n    private _truncatedDueToOverflow: boolean = false;\r\n    private _defaultRenderedElementDisplayMode?: string;\r\n    private _padding?: PaddingDefinition;\r\n\r\n    private internalRenderSeparator(): HTMLElement | undefined {\r\n        let renderedSeparator = Utils.renderSeparation(\r\n            this.hostConfig,\r\n            {\r\n                spacing: this.hostConfig.getEffectiveSpacing(this.spacing),\r\n                lineThickness: this.separator ? this.hostConfig.separator.lineThickness : undefined,\r\n                lineColor: this.separator ? this.hostConfig.separator.lineColor : undefined\r\n            },\r\n            this.separatorOrientation);\r\n\r\n            if (GlobalSettings.alwaysBleedSeparators && renderedSeparator && this.separatorOrientation == Enums.Orientation.Horizontal) {\r\n                // Adjust separator's margins if the option to always bleed separators is turned on\r\n                let parentContainer = this.getParentContainer();\r\n\r\n                if (parentContainer && parentContainer.getEffectivePadding()) {\r\n                    let parentPhysicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(parentContainer.getEffectivePadding());\r\n\r\n                    renderedSeparator.style.marginLeft = \"-\" + parentPhysicalPadding.left + \"px\";\r\n                    renderedSeparator.style.marginRight = \"-\" + parentPhysicalPadding.right + \"px\";\r\n                }\r\n            }\r\n\r\n            return renderedSeparator;\r\n    }\r\n\r\n    private updateRenderedElementVisibility() {\r\n        let displayMode = this.isDesignMode() || this.isVisible ? this._defaultRenderedElementDisplayMode : \"none\";\r\n\r\n        if (this._renderedElement) {\r\n            if (displayMode) {\r\n                this._renderedElement.style.display = displayMode;\r\n            }\r\n            else {\r\n                this._renderedElement.style.removeProperty(\"display\");\r\n            }\r\n        }\r\n\r\n        if (this._separatorElement) {\r\n            if (this.parent && this.parent.isFirstElement(this)) {\r\n                this._separatorElement.style.display = \"none\";\r\n            }\r\n            else {\r\n                if (displayMode) {\r\n                    this._separatorElement.style.display = displayMode;\r\n                }\r\n                else {\r\n                    this._separatorElement.style.removeProperty(\"display\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private hideElementDueToOverflow() {\r\n        if (this._renderedElement && this.isVisible) {\r\n            this._renderedElement.style.visibility = \"hidden\";\r\n\r\n            this.isVisible = false;\r\n            raiseElementVisibilityChangedEvent(this, false);\r\n        }\r\n    }\r\n\r\n    private showElementHiddenDueToOverflow() {\r\n        if (this._renderedElement && !this.isVisible) {\r\n            this._renderedElement.style.removeProperty(\"visibility\");\r\n\r\n            this.isVisible = true;\r\n            raiseElementVisibilityChangedEvent(this, false);\r\n        }\r\n    }\r\n\r\n    // Marked private to emulate internal access\r\n    private handleOverflow(maxHeight: number) {\r\n        if (this.isVisible || this.isHiddenDueToOverflow()) {\r\n            let handled = this.truncateOverflow(maxHeight);\r\n\r\n            // Even if we were unable to truncate the element to fit this time,\r\n            // it still could have been previously truncated\r\n            this._truncatedDueToOverflow = handled || this._truncatedDueToOverflow;\r\n\r\n            if (!handled) {\r\n                this.hideElementDueToOverflow();\r\n            }\r\n            else if (handled && !this.isVisible) {\r\n                this.showElementHiddenDueToOverflow();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Marked private to emulate internal access\r\n    private resetOverflow(): boolean {\r\n        let sizeChanged = false;\r\n\r\n        if (this._truncatedDueToOverflow) {\r\n            this.undoOverflowTruncation();\r\n            this._truncatedDueToOverflow = false;\r\n            sizeChanged = true;\r\n        }\r\n\r\n        if (this.isHiddenDueToOverflow()) {\r\n            this.showElementHiddenDueToOverflow();\r\n        }\r\n\r\n        return sizeChanged;\r\n    }\r\n\r\n    protected createPlaceholderElement(): HTMLElement {\r\n        let styleDefinition = this.getEffectiveStyleDefinition();\r\n        let foregroundCssColor = Utils.stringToCssColor(styleDefinition.foregroundColors.default.subtle);\r\n\r\n        let element = document.createElement(\"div\");\r\n        element.style.border = \"1px dashed \" + foregroundCssColor;\r\n        element.style.padding = \"4px\";\r\n        element.style.minHeight = \"32px\";\r\n        element.style.fontSize = \"10px\";\r\n        element.style.color = <string>foregroundCssColor;\r\n        element.innerText = \"Empty \" + this.getJsonTypeName();\r\n\r\n        return element;\r\n    }\r\n\r\n    protected adjustRenderedElementSize(renderedElement: HTMLElement) {\r\n        if (this.height === \"auto\") {\r\n            renderedElement.style.flex = \"0 0 auto\";\r\n        }\r\n        else {\r\n            renderedElement.style.flex = \"1 1 auto\";\r\n        }\r\n    }\r\n\r\n    protected isDisplayed(): boolean {\r\n        return this._renderedElement !== undefined && this.isVisible && this._renderedElement.offsetHeight > 0;\r\n    }\r\n\r\n    protected abstract internalRender(): HTMLElement | undefined;\r\n\r\n    protected overrideInternalRender(): HTMLElement | undefined {\r\n        return this.internalRender();\r\n    }\r\n\r\n    protected applyPadding() {\r\n        if (this.separatorElement) {\r\n            if (GlobalSettings.alwaysBleedSeparators && this.separatorOrientation == Enums.Orientation.Horizontal && !this.isBleeding()) {\r\n                let padding = new PaddingDefinition();\r\n\r\n                this.getImmediateSurroundingPadding(padding);\r\n\r\n                let physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(padding);\r\n\r\n                this.separatorElement.style.marginLeft = \"-\" + physicalPadding.left + \"px\";\r\n                this.separatorElement.style.marginRight = \"-\" + physicalPadding.right + \"px\";\r\n            }\r\n            else {\r\n                this.separatorElement.style.marginRight = \"0\";\r\n                this.separatorElement.style.marginLeft = \"0\";\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Called when this element overflows the bottom of the card.\r\n     * maxHeight will be the amount of space still available on the card (0 if\r\n     * the element is fully off the card).\r\n     */\r\n    protected truncateOverflow(maxHeight: number): boolean {\r\n        // Child implementations should return true if the element handled\r\n        // the truncation request such that its content fits within maxHeight,\r\n        // false if the element should fall back to being hidden\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     * This should reverse any changes performed in truncateOverflow().\r\n     */\r\n    protected undoOverflowTruncation() { }\r\n\r\n    protected getDefaultPadding(): PaddingDefinition {\r\n        return new PaddingDefinition();\r\n    }\r\n\r\n    protected getHasBackground(): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected getPadding(): PaddingDefinition | undefined {\r\n        return this._padding;\r\n    }\r\n\r\n    protected setPadding(value: PaddingDefinition | undefined) {\r\n        this._padding = value;\r\n    }\r\n\r\n    protected shouldSerialize(context: SerializationContext): boolean {\r\n        return context.elementRegistry.findByName(this.getJsonTypeName()) !== undefined;\r\n    }\r\n\r\n    protected get useDefaultSizing(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get allowCustomPadding(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get separatorOrientation(): Enums.Orientation {\r\n        return Enums.Orientation.Horizontal;\r\n    }\r\n\r\n    protected get defaultStyle(): string {\r\n        return Enums.ContainerStyle.Default;\r\n    }\r\n\r\n    customCssSelector?: string;\r\n\r\n    parse(source: any, context?: SerializationContext) {\r\n        super.parse(source, context ? context : new SerializationContext());\r\n    }\r\n\r\n    toJSON(context?: SerializationContext): PropertyBag | undefined {\r\n        return super.toJSON(context ? context : new SerializationContext());\r\n    }\r\n\r\n    asString(): string | undefined {\r\n        return \"\";\r\n    }\r\n\r\n    isBleeding(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getEffectiveStyle(): string {\r\n        if (this.parent) {\r\n            return this.parent.getEffectiveStyle();\r\n        }\r\n\r\n        return this.defaultStyle;\r\n    }\r\n\r\n    getEffectiveStyleDefinition(): ContainerStyleDefinition {\r\n        return this.hostConfig.containerStyles.getStyleByName(this.getEffectiveStyle());\r\n    }\r\n\r\n    getForbiddenActionTypes(): ActionType[] {\r\n        return [];\r\n    }\r\n\r\n    getImmediateSurroundingPadding(\r\n        result: PaddingDefinition,\r\n        processTop: boolean = true,\r\n        processRight: boolean = true,\r\n        processBottom: boolean = true,\r\n        processLeft: boolean = true) {\r\n        if (this.parent) {\r\n            let doProcessTop = processTop && this.parent.isTopElement(this);\r\n            let doProcessRight = processRight && this.parent.isRightMostElement(this);\r\n            let doProcessBottom = processBottom && this.parent.isBottomElement(this);\r\n            let doProcessLeft = processLeft && this.parent.isLeftMostElement(this);\r\n\r\n            let effectivePadding = this.parent.getEffectivePadding();\r\n\r\n            if (effectivePadding) {\r\n                if (doProcessTop && effectivePadding.top != Enums.Spacing.None) {\r\n                    result.top = effectivePadding.top;\r\n\r\n                    doProcessTop = false;\r\n                }\r\n\r\n                if (doProcessRight && effectivePadding.right != Enums.Spacing.None) {\r\n                    result.right = effectivePadding.right;\r\n\r\n                    doProcessRight = false;\r\n                }\r\n\r\n                if (doProcessBottom && effectivePadding.bottom != Enums.Spacing.None) {\r\n                    result.bottom = effectivePadding.bottom;\r\n\r\n                    doProcessBottom = false;\r\n                }\r\n\r\n                if (doProcessLeft && effectivePadding.left != Enums.Spacing.None) {\r\n                    result.left = effectivePadding.left;\r\n\r\n                    doProcessLeft = false;\r\n                }\r\n            }\r\n\r\n            if (doProcessTop || doProcessRight || doProcessBottom || doProcessLeft) {\r\n                this.parent.getImmediateSurroundingPadding(\r\n                    result,\r\n                    doProcessTop,\r\n                    doProcessRight,\r\n                    doProcessBottom,\r\n                    doProcessLeft);\r\n            }\r\n        }\r\n    }\r\n\r\n    getActionCount(): number {\r\n        return 0;\r\n    }\r\n\r\n    getActionAt(index: number): Action | undefined {\r\n        throw new Error(\"Index out of range.\");\r\n    }\r\n\r\n    remove(): boolean {\r\n        if (this.parent && this.parent instanceof CardElementContainer) {\r\n            return this.parent.removeItem(this);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    render(): HTMLElement | undefined {\r\n        this._renderedElement = this.overrideInternalRender();\r\n        this._separatorElement = this.internalRenderSeparator();\r\n\r\n        if (this._renderedElement) {\r\n            if (this.customCssSelector) {\r\n                this._renderedElement.classList.add(this.customCssSelector);\r\n            }\r\n\r\n            this._renderedElement.style.boxSizing = \"border-box\";\r\n            this._defaultRenderedElementDisplayMode = this._renderedElement.style.display ? this._renderedElement.style.display : undefined;\r\n\r\n            this.adjustRenderedElementSize(this._renderedElement);\r\n            this.updateLayout(false);\r\n        }\r\n        else if (this.isDesignMode()) {\r\n            this._renderedElement = this.createPlaceholderElement();\r\n        }\r\n\r\n        return this._renderedElement;\r\n    }\r\n\r\n    updateLayout(processChildren: boolean = true) {\r\n        this.updateRenderedElementVisibility();\r\n        this.applyPadding();\r\n    }\r\n\r\n    indexOf(cardElement: CardElement): number {\r\n        return -1;\r\n    }\r\n\r\n    isDesignMode(): boolean {\r\n        let rootElement = this.getRootElement();\r\n\r\n        return rootElement instanceof AdaptiveCard && rootElement.designMode;\r\n    }\r\n\r\n    isFirstElement(element: CardElement): boolean {\r\n        return true;\r\n    }\r\n\r\n    isLastElement(element: CardElement): boolean {\r\n        return true;\r\n    }\r\n\r\n    isAtTheVeryLeft(): boolean {\r\n        return this.parent ? this.parent.isLeftMostElement(this) && this.parent.isAtTheVeryLeft() : true;\r\n    }\r\n\r\n    isAtTheVeryRight(): boolean {\r\n        return this.parent ? this.parent.isRightMostElement(this) && this.parent.isAtTheVeryRight() : true;\r\n    }\r\n\r\n    isAtTheVeryTop(): boolean {\r\n        return this.parent ? this.parent.isFirstElement(this) && this.parent.isAtTheVeryTop() : true;\r\n    }\r\n\r\n    isAtTheVeryBottom(): boolean {\r\n        return this.parent ? this.parent.isLastElement(this) && this.parent.isAtTheVeryBottom() : true;\r\n    }\r\n\r\n    isBleedingAtTop(): boolean {\r\n        return false;\r\n    }\r\n\r\n    isBleedingAtBottom(): boolean {\r\n        return false;\r\n    }\r\n\r\n    isLeftMostElement(element: CardElement): boolean {\r\n        return true;\r\n    }\r\n\r\n    isRightMostElement(element: CardElement): boolean {\r\n        return true;\r\n    }\r\n\r\n    isTopElement(element: CardElement): boolean {\r\n        return this.isFirstElement(element);\r\n    }\r\n\r\n    isBottomElement(element: CardElement): boolean {\r\n        return this.isLastElement(element);\r\n    }\r\n\r\n    isHiddenDueToOverflow(): boolean {\r\n        return this._renderedElement !== undefined && this._renderedElement.style.visibility == 'hidden';\r\n    }\r\n\r\n    getRootElement(): CardElement {\r\n        return this.getRootObject() as CardElement;\r\n    }\r\n\r\n    getParentContainer(): Container | undefined {\r\n        let currentElement = this.parent;\r\n\r\n        while (currentElement) {\r\n            if (currentElement instanceof Container) {\r\n                return <Container>currentElement;\r\n            }\r\n\r\n            currentElement = currentElement.parent;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getAllInputs(): Input[] {\r\n        return [];\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return [];\r\n    }\r\n\r\n    getElementById(id: string): CardElement | undefined {\r\n        return this.id === id ? this : undefined;\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        return undefined;\r\n    }\r\n\r\n    getEffectivePadding(): PaddingDefinition {\r\n        let padding = this.getPadding();\r\n\r\n        return (padding && this.allowCustomPadding) ? padding : this.getDefaultPadding();\r\n    }\r\n\r\n    get hostConfig(): HostConfig {\r\n        if (this._hostConfig) {\r\n            return this._hostConfig;\r\n        }\r\n        else {\r\n            if (this.parent) {\r\n                return this.parent.hostConfig;\r\n            }\r\n            else {\r\n                return defaultHostConfig;\r\n            }\r\n        }\r\n    }\r\n\r\n    set hostConfig(value: HostConfig) {\r\n        this._hostConfig = value;\r\n    }\r\n\r\n    get index(): number {\r\n        if (this.parent) {\r\n            return this.parent.indexOf(this);\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    get isInteractive(): boolean {\r\n        return false;\r\n    }\r\n\r\n    get isStandalone(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get isInline(): boolean {\r\n        return false;\r\n    }\r\n\r\n    get hasVisibleSeparator(): boolean {\r\n        if (this.parent && this.separatorElement) {\r\n            return !this.parent.isFirstElement(this) && (this.isVisible || this.isDesignMode());\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    get separatorElement(): HTMLElement | undefined {\r\n        return this._separatorElement;\r\n    }\r\n\r\n    get parent(): CardElement | undefined {\r\n        return <CardElement>this._parent;\r\n    }\r\n}\r\n\r\nexport class ActionProperty extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: SerializationContext): Action | undefined {\r\n        let parent = <CardElement>sender;\r\n\r\n        return context.parseAction(\r\n            parent,\r\n            source[this.name],\r\n            this.forbiddenActionTypes,\r\n            parent.isDesignMode());\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: Action | undefined, context: SerializationContext) {\r\n        context.serializeValue(target, this.name, value ? value.toJSON(context) : undefined);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly forbiddenActionTypes: string[] = []) {\r\n        super(targetVersion, name, undefined);\r\n    }\r\n}\r\n\r\nexport abstract class BaseTextBlock extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly textProperty = new StringProperty(\r\n        Versions.v1_0,\r\n        \"text\",\r\n        true);\r\n    static readonly sizeProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"size\",\r\n        Enums.TextSize,\r\n        Enums.TextSize.Default);\r\n    static readonly weightProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"weight\",\r\n        Enums.TextWeight,\r\n        Enums.TextWeight.Default);\r\n    static readonly colorProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"color\",\r\n        Enums.TextColor,\r\n        Enums.TextColor.Default);\r\n    static readonly isSubtleProperty = new BoolProperty(\r\n        Versions.v1_0,\r\n        \"isSubtle\",\r\n        false);\r\n    static readonly fontTypeProperty = new EnumProperty(\r\n        Versions.v1_2,\r\n        \"fontType\",\r\n        Enums.FontType);\r\n    static readonly selectActionProperty = new ActionProperty(Versions.v1_0, \"selectAction\", [ \"Action.ShowCard\" ]);\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        // selectAction is declared on BaseTextBlock but is only exposed on TextRun,\r\n        // so the property is removed from the BaseTextBlock schema.\r\n        schema.remove(BaseTextBlock.selectActionProperty);\r\n    }\r\n\r\n    @property(BaseTextBlock.sizeProperty)\r\n    size: Enums.TextSize = Enums.TextSize.Default;\r\n\r\n    @property(BaseTextBlock.weightProperty)\r\n    weight: Enums.TextWeight = Enums.TextWeight.Default;\r\n\r\n    @property(BaseTextBlock.colorProperty)\r\n    color: Enums.TextColor = Enums.TextColor.Default;\r\n\r\n    @property(BaseTextBlock.fontTypeProperty)\r\n    fontType?: Enums.FontType;\r\n\r\n    @property(BaseTextBlock.isSubtleProperty)\r\n    isSubtle: boolean = false;\r\n\r\n    @property(BaseTextBlock.textProperty)\r\n    get text(): string | undefined {\r\n        return this.getValue(BaseTextBlock.textProperty);\r\n    }\r\n\r\n    set text(value: string | undefined) {\r\n        this.setText(value);\r\n    }\r\n\r\n    @property(BaseTextBlock.selectActionProperty)\r\n    selectAction?: Action;\r\n\r\n    //#endregion\r\n\r\n    protected getFontSize(fontType: FontTypeDefinition): number {\r\n        switch (this.size) {\r\n            case Enums.TextSize.Small:\r\n                return fontType.fontSizes.small;\r\n            case Enums.TextSize.Medium:\r\n                return fontType.fontSizes.medium;\r\n            case Enums.TextSize.Large:\r\n                return fontType.fontSizes.large;\r\n            case Enums.TextSize.ExtraLarge:\r\n                return fontType.fontSizes.extraLarge;\r\n            default:\r\n                return fontType.fontSizes.default;\r\n        }\r\n    }\r\n\r\n    protected getColorDefinition(colorSet: ColorSetDefinition, color: Enums.TextColor): TextColorDefinition {\r\n        switch (color) {\r\n            case Enums.TextColor.Accent:\r\n                return colorSet.accent;\r\n            case Enums.TextColor.Dark:\r\n                return colorSet.dark;\r\n            case Enums.TextColor.Light:\r\n                return colorSet.light;\r\n            case Enums.TextColor.Good:\r\n                return colorSet.good;\r\n            case Enums.TextColor.Warning:\r\n                return colorSet.warning;\r\n            case Enums.TextColor.Attention:\r\n                return colorSet.attention;\r\n            default:\r\n                return colorSet.default;\r\n        }\r\n    }\r\n\r\n    protected setText(value: string | undefined) {\r\n        this.setValue(BaseTextBlock.textProperty, value);\r\n    }\r\n\r\n    asString(): string | undefined {\r\n        return this.text;\r\n    }\r\n\r\n    applyStylesTo(targetElement: HTMLElement) {\r\n        let fontType = this.hostConfig.getFontTypeDefinition(this.fontType);\r\n\r\n        if (fontType.fontFamily) {\r\n            targetElement.style.fontFamily = fontType.fontFamily;\r\n        }\r\n\r\n        let fontSize: number;\r\n\r\n        switch (this.size) {\r\n            case Enums.TextSize.Small:\r\n                fontSize = fontType.fontSizes.small;\r\n                break;\r\n            case Enums.TextSize.Medium:\r\n                fontSize = fontType.fontSizes.medium;\r\n                break;\r\n            case Enums.TextSize.Large:\r\n                fontSize = fontType.fontSizes.large;\r\n                break;\r\n            case Enums.TextSize.ExtraLarge:\r\n                fontSize = fontType.fontSizes.extraLarge;\r\n                break;\r\n            default:\r\n                fontSize = fontType.fontSizes.default;\r\n                break;\r\n        }\r\n\r\n        targetElement.style.fontSize = fontSize + \"px\";\r\n\r\n        let colorDefinition = this.getColorDefinition(this.getEffectiveStyleDefinition().foregroundColors, this.effectiveColor);\r\n\r\n        targetElement.style.color = <string>Utils.stringToCssColor(this.isSubtle ? colorDefinition.subtle : colorDefinition.default);\r\n\r\n        let fontWeight: number;\r\n\r\n        switch (this.weight) {\r\n            case Enums.TextWeight.Lighter:\r\n                fontWeight = fontType.fontWeights.lighter;\r\n                break;\r\n            case Enums.TextWeight.Bolder:\r\n                fontWeight = fontType.fontWeights.bolder;\r\n                break;\r\n            default:\r\n                fontWeight = fontType.fontWeights.default;\r\n                break;\r\n        }\r\n\r\n        targetElement.style.fontWeight = fontWeight.toString();\r\n    }\r\n\r\n    get effectiveColor(): Enums.TextColor {\r\n        return this.color ? this.color : Enums.TextColor.Default;\r\n    }\r\n}\r\n\r\nexport class TextBlock extends BaseTextBlock {\r\n    //#region Schema\r\n\r\n    static readonly wrapProperty = new BoolProperty(Versions.v1_0, \"wrap\", false);\r\n    static readonly maxLinesProperty = new NumProperty(Versions.v1_0, \"maxLines\");\r\n\r\n    @property(TextBlock.wrapProperty)\r\n    wrap: boolean = false;\r\n\r\n    @property(TextBlock.maxLinesProperty)\r\n    maxLines?: number;\r\n\r\n    //#endregion\r\n\r\n    private _computedLineHeight: number;\r\n    private _originalInnerHtml: string;\r\n    private _processedText?: string;\r\n    private _treatAsPlainText: boolean = true;\r\n\r\n    private restoreOriginalContent() {\r\n        if (this.renderedElement !== undefined) {\r\n            if (this.maxLines && this.maxLines > 0) {\r\n                this.renderedElement.style.maxHeight = this._computedLineHeight * this.maxLines + \"px\";\r\n            }\r\n\r\n            this.renderedElement.innerHTML = this._originalInnerHtml;\r\n        }\r\n    }\r\n\r\n    private truncateIfSupported(maxHeight: number): boolean {\r\n        if (this.renderedElement !== undefined) {\r\n            // For now, only truncate TextBlocks that contain just a single\r\n            // paragraph -- since the maxLines calculation doesn't take into\r\n            // account Markdown lists\r\n            let children = this.renderedElement.children;\r\n            let isTextOnly = !children.length;\r\n            let truncationSupported = isTextOnly || children.length == 1 && (<HTMLElement>children[0]).tagName.toLowerCase() == 'p';\r\n\r\n            if (truncationSupported) {\r\n                let element = isTextOnly ? this.renderedElement : <HTMLElement>children[0];\r\n\r\n                Utils.truncate(element, maxHeight, this._computedLineHeight);\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected setText(value: string) {\r\n        super.setText(value);\r\n\r\n        this._processedText = undefined;\r\n    }\r\n\r\n    protected getRenderedDomElementType(): string {\r\n        return \"div\";\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._processedText = undefined;\r\n\r\n        if (this.text) {\r\n            let preProcessedText = this.preProcessPropertyValue(BaseTextBlock.textProperty);\r\n            let hostConfig = this.hostConfig;\r\n\r\n            let element = document.createElement(this.getRenderedDomElementType());\r\n            element.classList.add(hostConfig.makeCssClassName(\"ac-textBlock\"));\r\n            element.style.overflow = \"hidden\";\r\n\r\n            this.applyStylesTo(element);\r\n\r\n            if (this.selectAction) {\r\n                element.onclick = (e) => {\r\n                    e.preventDefault();\r\n                    e.cancelBubble = true;\r\n\r\n                    if (this.selectAction) {\r\n                        this.selectAction.execute();\r\n                    }\r\n                }\r\n\r\n                if (hostConfig.supportsInteractivity) {\r\n                    element.tabIndex = 0\r\n                    element.setAttribute(\"role\", this.selectAction.getAriaRole());\r\n\r\n                    if (this.selectAction.title) {\r\n                        element.setAttribute(\"aria-label\", this.selectAction.title);\r\n                    }\r\n\r\n                    element.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\r\n                }\r\n            }\r\n\r\n            if (!this._processedText) {\r\n                this._treatAsPlainText = true;\r\n\r\n                let formattedText = TextFormatters.formatText(this.lang, preProcessedText);\r\n\r\n                if (this.useMarkdown && formattedText) {\r\n                    if (GlobalSettings.allowMarkForTextHighlighting) {\r\n                        formattedText = formattedText.replace(/<mark>/g, \"===\").replace(/<\\/mark>/g, \"/==/\");\r\n                    }\r\n\r\n                    let markdownProcessingResult = AdaptiveCard.applyMarkdown(formattedText);\r\n\r\n                    if (markdownProcessingResult.didProcess && markdownProcessingResult.outputHtml) {\r\n                        this._processedText = markdownProcessingResult.outputHtml;\r\n                        this._treatAsPlainText = false;\r\n\r\n                        // Only process <mark> tag if markdown processing was applied because\r\n                        // markdown processing is also responsible for sanitizing the input string\r\n                        if (GlobalSettings.allowMarkForTextHighlighting && this._processedText) {\r\n                            let markStyle: string = \"\";\r\n                            let effectiveStyle = this.getEffectiveStyleDefinition();\r\n\r\n                            if (effectiveStyle.highlightBackgroundColor) {\r\n                                markStyle += \"background-color: \" + effectiveStyle.highlightBackgroundColor + \";\";\r\n                            }\r\n\r\n                            if (effectiveStyle.highlightForegroundColor) {\r\n                                markStyle += \"color: \" + effectiveStyle.highlightForegroundColor + \";\";\r\n                            }\r\n\r\n                            if (markStyle) {\r\n                                markStyle = 'style=\"' + markStyle + '\"';\r\n                            }\r\n\r\n                            this._processedText = this._processedText.replace(/===/g, \"<mark \" + markStyle + \">\").replace(/\\/==\\//g, \"</mark>\");\r\n                        }\r\n                    } else {\r\n                        this._processedText = formattedText;\r\n                        this._treatAsPlainText = true;\r\n                    }\r\n                }\r\n                else {\r\n                    this._processedText = formattedText;\r\n                    this._treatAsPlainText = true;\r\n                }\r\n            }\r\n\r\n            if (!this._processedText) {\r\n                this._processedText = \"\";\r\n            }\r\n\r\n            if (this._treatAsPlainText) {\r\n                element.innerText = this._processedText;\r\n            }\r\n            else {\r\n                element.innerHTML = this._processedText;\r\n            }\r\n\r\n            if (element.firstElementChild instanceof HTMLElement) {\r\n                let firstElementChild = <HTMLElement>element.firstElementChild;\r\n                firstElementChild.style.marginTop = \"0px\";\r\n                firstElementChild.style.width = \"100%\";\r\n\r\n                if (!this.wrap) {\r\n                    firstElementChild.style.overflow = \"hidden\";\r\n                    firstElementChild.style.textOverflow = \"ellipsis\";\r\n                }\r\n            }\r\n\r\n            if (element.lastElementChild instanceof HTMLElement) {\r\n                (<HTMLElement>element.lastElementChild).style.marginBottom = \"0px\";\r\n            }\r\n\r\n            let anchors = element.getElementsByTagName(\"a\");\r\n\r\n            for (let i = 0; i < anchors.length; i++) {\r\n                let anchor = <HTMLAnchorElement>anchors[i];\r\n                anchor.classList.add(hostConfig.makeCssClassName(\"ac-anchor\"));\r\n                anchor.target = \"_blank\";\r\n                anchor.onclick = (e) => {\r\n                    if (raiseAnchorClickedEvent(this, e.target as HTMLAnchorElement)) {\r\n                        e.preventDefault();\r\n                        e.cancelBubble = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.wrap) {\r\n                element.style.wordWrap = \"break-word\";\r\n\r\n                if (this.maxLines && this.maxLines > 0) {\r\n                    element.style.maxHeight = (this._computedLineHeight * this.maxLines) + \"px\";\r\n                    element.style.overflow = \"hidden\";\r\n                }\r\n            }\r\n            else {\r\n                element.style.whiteSpace = \"nowrap\";\r\n                element.style.textOverflow = \"ellipsis\";\r\n            }\r\n\r\n            if (GlobalSettings.useAdvancedTextBlockTruncation || GlobalSettings.useAdvancedCardBottomTruncation) {\r\n                this._originalInnerHtml = element.innerHTML;\r\n            }\r\n\r\n            return element;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected truncateOverflow(maxHeight: number): boolean {\r\n        if (maxHeight >= this._computedLineHeight) {\r\n            return this.truncateIfSupported(maxHeight);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected undoOverflowTruncation() {\r\n        this.restoreOriginalContent();\r\n\r\n        if (GlobalSettings.useAdvancedTextBlockTruncation && this.maxLines) {\r\n            let maxHeight = this._computedLineHeight * this.maxLines;\r\n\r\n            this.truncateIfSupported(maxHeight);\r\n        }\r\n    }\r\n\r\n    useMarkdown: boolean = true;\r\n\r\n    applyStylesTo(targetElement: HTMLElement) {\r\n        super.applyStylesTo(targetElement);\r\n\r\n        let parentContainer = this.getParentContainer();\r\n        let isRtl = parentContainer ? parentContainer.isRtl() : false;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Enums.HorizontalAlignment.Center:\r\n                targetElement.style.textAlign = \"center\";\r\n                break;\r\n            case Enums.HorizontalAlignment.Right:\r\n                targetElement.style.textAlign = isRtl ? \"left\" : \"right\";\r\n                break;\r\n            default:\r\n                targetElement.style.textAlign = isRtl ? \"right\" : \"left\";\r\n                break;\r\n        }\r\n\r\n        let lineHeights = this.hostConfig.lineHeights;\r\n\r\n        if (lineHeights) {\r\n            switch (this.size) {\r\n                case Enums.TextSize.Small:\r\n                    this._computedLineHeight = lineHeights.small;\r\n                    break;\r\n                case Enums.TextSize.Medium:\r\n                    this._computedLineHeight = lineHeights.medium;\r\n                    break;\r\n                case Enums.TextSize.Large:\r\n                    this._computedLineHeight = lineHeights.large;\r\n                    break;\r\n                case Enums.TextSize.ExtraLarge:\r\n                    this._computedLineHeight = lineHeights.extraLarge;\r\n                    break;\r\n                default:\r\n                    this._computedLineHeight = lineHeights.default;\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            // Looks like 1.33 is the magic number to compute line-height\r\n            // from font size.\r\n            this._computedLineHeight = this.getFontSize(this.hostConfig.getFontTypeDefinition(this.fontType)) * 1.33;\r\n        }\r\n\r\n        targetElement.style.lineHeight = this._computedLineHeight + \"px\";\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    updateLayout(processChildren: boolean = false) {\r\n        super.updateLayout(processChildren);\r\n\r\n        if (GlobalSettings.useAdvancedTextBlockTruncation && this.maxLines && this.isDisplayed()) {\r\n            // Reset the element's innerHTML in case the available room for\r\n            // content has increased\r\n            this.restoreOriginalContent();\r\n            this.truncateIfSupported(this._computedLineHeight * this.maxLines);\r\n        }\r\n    }\r\n}\r\n\r\nclass Label extends TextBlock {\r\n    protected getRenderedDomElementType(): string {\r\n        return \"label\";\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let renderedElement = <HTMLLabelElement>super.internalRender();\r\n\r\n        if (renderedElement && this.forElementId) {\r\n            renderedElement.htmlFor = this.forElementId;\r\n        }\r\n\r\n        return renderedElement;\r\n    }\r\n\r\n    forElementId: string;\r\n}\r\n\r\nexport class TextRun extends BaseTextBlock {\r\n    //#region Schema\r\n\r\n    static readonly italicProperty = new BoolProperty(Versions.v1_2, \"italic\", false);\r\n    static readonly strikethroughProperty = new BoolProperty(Versions.v1_2, \"strikethrough\", false);\r\n    static readonly highlightProperty = new BoolProperty(Versions.v1_2, \"highlight\", false);\r\n    static readonly underlineProperty = new BoolProperty(Versions.v1_3, \"underline\", false);\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        schema.add(BaseTextBlock.selectActionProperty);\r\n    }\r\n\r\n    @property(TextRun.italicProperty)\r\n    italic: boolean = false;\r\n\r\n    @property(TextRun.strikethroughProperty)\r\n    strikethrough: boolean = false;\r\n\r\n    @property(TextRun.highlightProperty)\r\n    highlight: boolean = false;\r\n\r\n    @property(TextRun.underlineProperty)\r\n    underline: boolean = false;\r\n\r\n    //#endregion\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        if (this.text) {\r\n            let preProcessedText = this.preProcessPropertyValue(BaseTextBlock.textProperty);\r\n            let hostConfig = this.hostConfig;\r\n\r\n            let formattedText = TextFormatters.formatText(this.lang, preProcessedText);\r\n\r\n            if (!formattedText) {\r\n                formattedText = \"\";\r\n            }\r\n\r\n            let element = document.createElement(\"span\");\r\n            element.classList.add(hostConfig.makeCssClassName(\"ac-textRun\"));\r\n\r\n            this.applyStylesTo(element);\r\n\r\n            if (this.selectAction && hostConfig.supportsInteractivity) {\r\n                let anchor = document.createElement(\"a\");\r\n                anchor.classList.add(hostConfig.makeCssClassName(\"ac-anchor\"));\r\n\r\n                let href = this.selectAction.getHref();\r\n\r\n                anchor.href = href ? href : \"\";\r\n                anchor.target = \"_blank\";\r\n                anchor.onclick = (e) => {\r\n                    e.preventDefault();\r\n                    e.cancelBubble = true;\r\n\r\n                    if (this.selectAction) {\r\n                        this.selectAction.execute();\r\n                    }\r\n                }\r\n\r\n                anchor.innerText = formattedText;\r\n\r\n                element.appendChild(anchor);\r\n            }\r\n            else {\r\n                element.innerText = formattedText;\r\n            }\r\n\r\n            return element;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    applyStylesTo(targetElement: HTMLElement) {\r\n        super.applyStylesTo(targetElement);\r\n\r\n        if (this.italic) {\r\n            targetElement.style.fontStyle = \"italic\";\r\n        }\r\n\r\n        if (this.strikethrough) {\r\n            targetElement.style.textDecoration = \"line-through\";\r\n        }\r\n\r\n        if (this.highlight) {\r\n            let colorDefinition = this.getColorDefinition(this.getEffectiveStyleDefinition().foregroundColors, this.effectiveColor);\r\n\r\n            targetElement.style.backgroundColor = <string>Utils.stringToCssColor(this.isSubtle ? colorDefinition.highlightColors.subtle : colorDefinition.highlightColors.default);\r\n        }\r\n\r\n        if (this.underline) {\r\n            targetElement.style.textDecoration = \"underline\";\r\n        }\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"TextRun\";\r\n    }\r\n\r\n    get isStandalone(): boolean {\r\n        return false;\r\n    }\r\n\r\n    get isInline(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class RichTextBlock extends CardElement {\r\n    private _inlines: CardElement[] = [];\r\n\r\n    private internalAddInline(inline: CardElement, forceAdd: boolean = false) {\r\n        if (!inline.isInline) {\r\n            throw new Error(\"RichTextBlock.addInline: the specified card element cannot be used as a RichTextBlock inline.\");\r\n        }\r\n\r\n        let doAdd: boolean = inline.parent === undefined || forceAdd;\r\n\r\n        if (!doAdd && inline.parent != this) {\r\n            throw new Error(\"RichTextBlock.addInline: the specified inline already belongs to another RichTextBlock.\");\r\n        }\r\n        else {\r\n            inline.setParent(this);\r\n\r\n            this._inlines.push(inline);\r\n        }\r\n    }\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this._inlines = [];\r\n\r\n        if (Array.isArray(source[\"inlines\"])) {\r\n            for (let jsonInline of source[\"inlines\"]) {\r\n                let inline: CardElement | undefined;\r\n\r\n                if (typeof jsonInline === \"string\") {\r\n                    let textRun = new TextRun();\r\n                    textRun.text = jsonInline;\r\n\r\n                    inline = textRun;\r\n                }\r\n                else {\r\n                    // No fallback for inlines in 1.2\r\n                    inline = context.parseElement(this, jsonInline, false);\r\n                }\r\n\r\n                if (inline) {\r\n                    this.internalAddInline(inline, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        if (this._inlines.length > 0) {\r\n            let jsonInlines: any[] = [];\r\n\r\n            for (let inline of this._inlines) {\r\n                jsonInlines.push(inline.toJSON(context));\r\n            }\r\n\r\n            context.serializeValue(target, \"inlines\", jsonInlines);\r\n        }\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        if (this._inlines.length > 0) {\r\n            let element = document.createElement(\"div\");\r\n            element.className = this.hostConfig.makeCssClassName(\"ac-richTextBlock\");\r\n\r\n            let parentContainer = this.getParentContainer();\r\n            let isRtl = parentContainer ? parentContainer.isRtl() : false;\r\n\r\n            switch (this.horizontalAlignment) {\r\n                case Enums.HorizontalAlignment.Center:\r\n                    element.style.textAlign = \"center\";\r\n                    break;\r\n                case Enums.HorizontalAlignment.Right:\r\n                    element.style.textAlign = isRtl ? \"left\" : \"right\";\r\n                    break;\r\n                default:\r\n                    element.style.textAlign = isRtl ? \"right\" : \"left\";\r\n                    break;\r\n            }\r\n\r\n            let renderedInlines: number = 0;\r\n\r\n            for (let inline of this._inlines) {\r\n                let renderedInline = inline.render();\r\n\r\n                if (renderedInline) {\r\n                    element.appendChild(renderedInline);\r\n\r\n                    renderedInlines++;\r\n                }\r\n            }\r\n\r\n            if (renderedInlines > 0) {\r\n                return element;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    asString(): string | undefined {\r\n        let result = \"\";\r\n\r\n        for (let inline of this._inlines) {\r\n            result += inline.asString();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"RichTextBlock\";\r\n    }\r\n\r\n    getInlineCount(): number {\r\n        return this._inlines.length;\r\n    }\r\n\r\n    getInlineAt(index: number): CardElement {\r\n        if (index >= 0 && index < this._inlines.length) {\r\n            return this._inlines[index];\r\n        }\r\n        else {\r\n            throw new Error(\"RichTextBlock.getInlineAt: Index out of range (\" + index + \")\");\r\n        }\r\n    }\r\n\r\n    addInline(inline: CardElement) {\r\n        this.internalAddInline(inline);\r\n    }\r\n\r\n    removeInline(inline: CardElement): boolean {\r\n        let index = this._inlines.indexOf(inline);\r\n\r\n        if (index >= 0) {\r\n            this._inlines[index].setParent(undefined);\r\n            this._inlines.splice(index, 1);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class Fact extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n\r\n    // For historic reasons, the \"title\" schema property is exposed as \"name\" in the OM.\r\n    @property(Fact.titleProperty)\r\n    name?: string;\r\n\r\n    @property(Fact.valueProperty)\r\n    value?: string;\r\n\r\n    //#endregion\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"Fact\";\r\n    }\r\n\r\n    constructor(name?: string, value?: string) {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nexport class FactSet extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly factsProperty = new SerializableObjectCollectionProperty(Versions.v1_0, \"facts\", Fact);\r\n\r\n    @property(FactSet.factsProperty)\r\n    facts: Fact[];\r\n\r\n    //#endregion\r\n\r\n    protected get useDefaultSizing(): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let element: HTMLElement | undefined = undefined;\r\n        let hostConfig = this.hostConfig;\r\n\r\n        if (this.facts.length > 0) {\r\n            element = document.createElement(\"table\");\r\n            element.style.borderWidth = \"0px\";\r\n            element.style.borderSpacing = \"0px\";\r\n            element.style.borderStyle = \"none\";\r\n            element.style.borderCollapse = \"collapse\";\r\n            element.style.display = \"block\";\r\n            element.style.overflow = \"hidden\";\r\n            element.classList.add(hostConfig.makeCssClassName(\"ac-factset\"));\r\n            element.setAttribute(\"role\", \"presentation\");\r\n\r\n            for (let i = 0; i < this.facts.length; i++) {\r\n                let trElement = document.createElement(\"tr\");\r\n\r\n                if (i > 0) {\r\n                    trElement.style.marginTop = hostConfig.factSet.spacing + \"px\";\r\n                }\r\n\r\n                // Title column\r\n                let tdElement = document.createElement(\"td\");\r\n                tdElement.style.padding = \"0\";\r\n                tdElement.classList.add(hostConfig.makeCssClassName(\"ac-fact-title\"));\r\n\r\n                if (hostConfig.factSet.title.maxWidth) {\r\n                    tdElement.style.maxWidth = hostConfig.factSet.title.maxWidth + \"px\";\r\n                }\r\n\r\n                tdElement.style.verticalAlign = \"top\";\r\n\r\n                let textBlock = new TextBlock();\r\n                textBlock.setParent(this);\r\n                textBlock.text = (!this.facts[i].name && this.isDesignMode()) ? \"Title\" : this.facts[i].name;\r\n                textBlock.size = hostConfig.factSet.title.size;\r\n                textBlock.color = hostConfig.factSet.title.color;\r\n                textBlock.isSubtle = hostConfig.factSet.title.isSubtle;\r\n                textBlock.weight = hostConfig.factSet.title.weight;\r\n                textBlock.wrap = hostConfig.factSet.title.wrap;\r\n                textBlock.spacing = Enums.Spacing.None;\r\n\r\n                Utils.appendChild(tdElement, textBlock.render());\r\n                Utils.appendChild(trElement, tdElement);\r\n\r\n                // Spacer column\r\n                tdElement = document.createElement(\"td\");\r\n                tdElement.style.width = \"10px\";\r\n\r\n                Utils.appendChild(trElement, tdElement);\r\n\r\n                // Value column\r\n                tdElement = document.createElement(\"td\");\r\n                tdElement.style.padding = \"0\";\r\n                tdElement.style.verticalAlign = \"top\";\r\n                tdElement.classList.add(hostConfig.makeCssClassName(\"ac-fact-value\"));\r\n\r\n                textBlock = new TextBlock();\r\n                textBlock.setParent(this);\r\n                textBlock.text = this.facts[i].value;\r\n                textBlock.size = hostConfig.factSet.value.size;\r\n                textBlock.color = hostConfig.factSet.value.color;\r\n                textBlock.isSubtle = hostConfig.factSet.value.isSubtle;\r\n                textBlock.weight = hostConfig.factSet.value.weight;\r\n                textBlock.wrap = hostConfig.factSet.value.wrap;\r\n                textBlock.spacing = Enums.Spacing.None;\r\n\r\n                Utils.appendChild(tdElement, textBlock.render());\r\n                Utils.appendChild(trElement, tdElement);\r\n                Utils.appendChild(element, trElement);\r\n            }\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"FactSet\";\r\n    }\r\n}\r\n\r\nclass ImageDimensionProperty extends PropertyDefinition {\r\n    getInternalName(): string {\r\n        return this.internalName;\r\n    }\r\n\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\r\n        let result: number | undefined = undefined;\r\n        let sourceValue = source[this.name];\r\n\r\n        if (sourceValue === undefined) {\r\n            return this.defaultValue;\r\n        }\r\n\r\n        let isValid = false;\r\n\r\n        if (typeof sourceValue === \"string\") {\r\n            try {\r\n                let size = SizeAndUnit.parse(sourceValue, true);\r\n\r\n                if (size.unit == Enums.SizeUnit.Pixel) {\r\n                    result = size.physicalSize;\r\n\r\n                    isValid = true;\r\n                }\r\n            }\r\n            catch {\r\n                // Do nothing. A parse error is emitted below\r\n            }\r\n        }\r\n\r\n        if (!isValid) {\r\n            context.logParseEvent(\r\n                Enums.ValidationEvent.InvalidPropertyValue,\r\n                \"Invalid \" + this.name + \" value: \" + sourceValue,\r\n                sender);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\r\n        context.serializeValue(\r\n            target,\r\n            this.name,\r\n            typeof value === \"number\" && !isNaN(value) ? value + \"px\" : undefined);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly internalName: string) {\r\n        super(targetVersion, name);\r\n    }\r\n}\r\n\r\nexport class Image extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly urlProperty = new StringProperty(Versions.v1_0, \"url\");\r\n    static readonly altTextProperty = new StringProperty(Versions.v1_0, \"altText\");\r\n    static readonly backgroundColorProperty = new StringProperty(Versions.v1_1, \"backgroundColor\");\r\n    static readonly styleProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"style\",\r\n        Enums.ImageStyle,\r\n        Enums.ImageStyle.Default);\r\n    static readonly sizeProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"size\",\r\n        Enums.Size,\r\n        Enums.Size.Auto);\r\n    static readonly pixelWidthProperty = new ImageDimensionProperty(Versions.v1_1, \"width\", \"pixelWidth\");\r\n    static readonly pixelHeightProperty = new ImageDimensionProperty(Versions.v1_1, \"height\", \"pixelHeight\");\r\n    static readonly selectActionProperty = new ActionProperty(Versions.v1_0, \"selectAction\", [ \"Action.ShowCard\" ]);\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        schema.remove(CardElement.heightProperty);\r\n    }\r\n\r\n    @property(Image.urlProperty)\r\n    url?: string;\r\n\r\n    @property(Image.altTextProperty)\r\n    altText?: string;\r\n\r\n    @property(Image.backgroundColorProperty)\r\n    backgroundColor?: string;\r\n\r\n    @property(Image.sizeProperty)\r\n    size: Enums.Size = Enums.Size.Auto;\r\n\r\n    @property(Image.styleProperty)\r\n    style: Enums.ImageStyle = Enums.ImageStyle.Default;\r\n\r\n    @property(Image.pixelWidthProperty)\r\n    pixelWidth?: number;\r\n\r\n    @property(Image.pixelHeightProperty)\r\n    pixelHeight?: number;\r\n\r\n    @property(Image.selectActionProperty)\r\n    selectAction?: Action;\r\n\r\n    //#endregion\r\n\r\n    private applySize(element: HTMLElement) {\r\n        if (this.pixelWidth || this.pixelHeight) {\r\n            if (this.pixelWidth) {\r\n                element.style.width = this.pixelWidth + \"px\";\r\n            }\r\n\r\n            if (this.pixelHeight) {\r\n                element.style.height = this.pixelHeight + \"px\";\r\n            }\r\n        }\r\n        else {\r\n            if (this.maxHeight) {\r\n                // If the image is constrained in height, we set its height property and\r\n                // auto and stretch are ignored (default to medium). THis is necessary for\r\n                // ImageSet which uses a maximum image height as opposed to the cards width\r\n                // as a constraining dimension\r\n                switch (this.size) {\r\n                    case Enums.Size.Small:\r\n                        element.style.height = this.hostConfig.imageSizes.small + \"px\";\r\n                        break;\r\n                    case Enums.Size.Large:\r\n                        element.style.height = this.hostConfig.imageSizes.large + \"px\";\r\n                        break;\r\n                    default:\r\n                        element.style.height = this.hostConfig.imageSizes.medium + \"px\";\r\n                        break;\r\n                }\r\n\r\n                element.style.maxHeight = this.maxHeight + \"px\";\r\n            }\r\n            else {\r\n                switch (this.size) {\r\n                    case Enums.Size.Stretch:\r\n                        element.style.width = \"100%\";\r\n                        break;\r\n                    case Enums.Size.Auto:\r\n                        element.style.maxWidth = \"100%\";\r\n                        break;\r\n                    case Enums.Size.Small:\r\n                        element.style.width = this.hostConfig.imageSizes.small + \"px\";\r\n                        break;\r\n                    case Enums.Size.Large:\r\n                        element.style.width = this.hostConfig.imageSizes.large + \"px\";\r\n                        break;\r\n                    case Enums.Size.Medium:\r\n                        element.style.width = this.hostConfig.imageSizes.medium + \"px\";\r\n                        break;\r\n                }\r\n\r\n                element.style.maxHeight = \"100%\";\r\n            }\r\n        }\r\n    }\r\n\r\n    protected get useDefaultSizing() {\r\n        return false;\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let element: HTMLElement | undefined = undefined;\r\n\r\n        if (this.url) {\r\n            element = document.createElement(\"div\");\r\n            element.style.display = \"flex\";\r\n            element.style.alignItems = \"flex-start\";\r\n\r\n            element.onkeypress = (e) => {\r\n                if (this.selectAction && (e.keyCode == 13 || e.keyCode == 32)) { // enter or space pressed\r\n                    e.preventDefault();\r\n                    e.cancelBubble = true;\r\n\r\n                    this.selectAction.execute();\r\n                }\r\n            }\r\n\r\n            element.onclick = (e) => {\r\n                if (this.selectAction) {\r\n                    e.preventDefault();\r\n                    e.cancelBubble = true;\r\n\r\n                    this.selectAction.execute();\r\n                }\r\n            }\r\n\r\n            switch (this.horizontalAlignment) {\r\n                case Enums.HorizontalAlignment.Center:\r\n                    element.style.justifyContent = \"center\";\r\n                    break;\r\n                case Enums.HorizontalAlignment.Right:\r\n                    element.style.justifyContent = \"flex-end\";\r\n                    break;\r\n                default:\r\n                    element.style.justifyContent = \"flex-start\";\r\n                    break;\r\n            }\r\n\r\n            // Cache hostConfig to avoid walking the parent hierarchy multiple times\r\n            let hostConfig = this.hostConfig;\r\n\r\n            let imageElement = document.createElement(\"img\");\r\n            imageElement.onload = (e: Event) => {\r\n                raiseImageLoadedEvent(this);\r\n            }\r\n            imageElement.onerror = (e: Event) => {\r\n                if (this.renderedElement) {\r\n                    let card = this.getRootElement() as AdaptiveCard;\r\n\r\n                    this.renderedElement.innerHTML = \"\";\r\n\r\n                    if (card && card.designMode) {\r\n                        let errorElement = document.createElement(\"div\");\r\n                        errorElement.style.display = \"flex\";\r\n                        errorElement.style.alignItems = \"center\";\r\n                        errorElement.style.justifyContent = \"center\";\r\n                        errorElement.style.backgroundColor = \"#EEEEEE\";\r\n                        errorElement.style.color = \"black\";\r\n                        errorElement.innerText = \":-(\";\r\n                        errorElement.style.padding = \"10px\";\r\n\r\n                        this.applySize(errorElement);\r\n\r\n                        this.renderedElement.appendChild(errorElement);\r\n                    }\r\n                }\r\n\r\n                raiseImageLoadedEvent(this);\r\n            }\r\n            imageElement.style.minWidth = \"0\";\r\n            imageElement.classList.add(hostConfig.makeCssClassName(\"ac-image\"));\r\n\r\n            if (this.selectAction !== undefined && hostConfig.supportsInteractivity) {\r\n                imageElement.tabIndex = 0\r\n                imageElement.setAttribute(\"role\", this.selectAction.getAriaRole());\r\n\r\n                if (this.selectAction.title) {\r\n                    imageElement.setAttribute(\"aria-label\", <string>this.selectAction.title);\r\n                }\r\n\r\n                imageElement.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\r\n            }\r\n\r\n            this.applySize(imageElement);\r\n\r\n            if (this.style === Enums.ImageStyle.Person) {\r\n                imageElement.style.borderRadius = \"50%\";\r\n                imageElement.style.backgroundPosition = \"50% 50%\";\r\n                imageElement.style.backgroundRepeat = \"no-repeat\";\r\n            }\r\n\r\n            imageElement.style.backgroundColor = <string>Utils.stringToCssColor(this.backgroundColor);\r\n            imageElement.src = <string>this.preProcessPropertyValue(Image.urlProperty);\r\n\r\n            const altTextProperty = this.preProcessPropertyValue(Image.altTextProperty);\r\n            if (altTextProperty) {\r\n                imageElement.alt = <string>altTextProperty;\r\n            }\r\n\r\n            element.appendChild(imageElement);\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    maxHeight?: number;\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    getActionById(id: string) {\r\n        let result = super.getActionById(id);\r\n\r\n        if (!result && this.selectAction) {\r\n            result = this.selectAction.getActionById(id);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return this.url ? [{ url: this.url, mimeType: \"image\" }] : [];\r\n    }\r\n}\r\n\r\nexport abstract class CardElementContainer extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly selectActionProperty = new ActionProperty(Versions.v1_0, \"selectAction\", [ \"Action.ShowCard\" ]);\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        if (!this.isSelectable) {\r\n            schema.remove(CardElementContainer.selectActionProperty);\r\n        }\r\n    }\r\n\r\n    @property(CardElementContainer.selectActionProperty)\r\n    protected _selectAction?: Action;\r\n\r\n    //#endregion\r\n\r\n    protected isElementAllowed(element: CardElement) {\r\n        return this.hostConfig.supportsInteractivity || !element.isInteractive;\r\n    }\r\n\r\n    protected applyPadding() {\r\n        super.applyPadding();\r\n\r\n        if (!this.renderedElement) {\r\n            return;\r\n        }\r\n\r\n        let physicalPadding = new SpacingDefinition();\r\n\r\n        if (this.getEffectivePadding()) {\r\n            physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(this.getEffectivePadding());\r\n        }\r\n\r\n        this.renderedElement.style.paddingTop = physicalPadding.top + \"px\";\r\n        this.renderedElement.style.paddingRight = physicalPadding.right + \"px\";\r\n        this.renderedElement.style.paddingBottom = physicalPadding.bottom + \"px\";\r\n        this.renderedElement.style.paddingLeft = physicalPadding.left + \"px\";\r\n\r\n        this.renderedElement.style.marginRight = \"0\";\r\n        this.renderedElement.style.marginLeft = \"0\";\r\n    }\r\n\r\n    protected get isSelectable(): boolean {\r\n        return false;\r\n    }\r\n\r\n    abstract getItemCount(): number;\r\n    abstract getItemAt(index: number): CardElement;\r\n    abstract getFirstVisibleRenderedItem(): CardElement | undefined;\r\n    abstract getLastVisibleRenderedItem(): CardElement | undefined;\r\n    abstract removeItem(item: CardElement): boolean;\r\n\r\n    allowVerticalOverflow: boolean = false;\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        for (let i = 0; i < this.getItemCount(); i++) {\r\n            let item = this.getItemAt(i);\r\n\r\n            if (!this.hostConfig.supportsInteractivity && item.isInteractive) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.InteractivityNotAllowed,\r\n                    \"Interactivity is not allowed.\");\r\n            }\r\n\r\n            if (!this.isElementAllowed(item)) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.InteractivityNotAllowed,\r\n                    \"Elements of type \" + item.getJsonTypeName() + \" are not allowed in this container.\");\r\n            }\r\n\r\n            item.internalValidateProperties(context);\r\n        }\r\n\r\n        if (this._selectAction) {\r\n            this._selectAction.internalValidateProperties(context);\r\n        }\r\n    }\r\n\r\n    render(): HTMLElement | undefined {\r\n        let element = super.render();\r\n\r\n        if (element) {\r\n            let hostConfig = this.hostConfig;\r\n\r\n            if (this.allowVerticalOverflow) {\r\n                element.style.overflowX = \"hidden\";\r\n                element.style.overflowY = \"auto\";\r\n            }\r\n\r\n            if (element && this.isSelectable && this._selectAction && hostConfig.supportsInteractivity) {\r\n                element.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\r\n                element.tabIndex = 0;\r\n                element.setAttribute(\"role\", this._selectAction.getAriaRole());\r\n\r\n                if (this._selectAction.title) {\r\n                    element.setAttribute(\"aria-label\", this._selectAction.title);\r\n                }\r\n\r\n                element.onclick = (e) => {\r\n                    if (this._selectAction !== undefined) {\r\n                        e.preventDefault();\r\n                        e.cancelBubble = true;\r\n\r\n                        this._selectAction.execute();\r\n                    }\r\n                }\r\n\r\n                element.onkeypress = (e) => {\r\n                    if (this._selectAction !== undefined && (e.keyCode == 13 || e.keyCode == 32)) {\r\n                        // Enter or space pressed\r\n                        e.preventDefault();\r\n                        e.cancelBubble = true;\r\n\r\n                        this._selectAction.execute();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    updateLayout(processChildren: boolean = true) {\r\n        super.updateLayout(processChildren);\r\n\r\n        if (processChildren) {\r\n            for (let i = 0; i < this.getItemCount(); i++) {\r\n                this.getItemAt(i).updateLayout();\r\n            }\r\n        }\r\n    }\r\n\r\n    getAllInputs(): Input[] {\r\n        let result: Input[] = [];\r\n\r\n        for (let i = 0; i < this.getItemCount(); i++) {\r\n            result = result.concat(this.getItemAt(i).getAllInputs());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        let result: IResourceInformation[] = [];\r\n\r\n        for (let i = 0; i < this.getItemCount(); i++) {\r\n            result = result.concat(this.getItemAt(i).getResourceInformation());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getElementById(id: string): CardElement | undefined {\r\n        let result = super.getElementById(id);\r\n\r\n        if (!result) {\r\n            for (let i = 0; i < this.getItemCount(); i++) {\r\n                result = this.getItemAt(i).getElementById(id);\r\n\r\n                if (result) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class ImageSet extends CardElementContainer {\r\n    //#region Schema\r\n\r\n    static readonly imagesProperty = new SerializableObjectCollectionProperty(\r\n        Versions.v1_0,\r\n        \"images\",\r\n        Image,\r\n        (sender: SerializableObject, item: Image) => { item.setParent(<CardElement>sender); });\r\n    static readonly imageSizeProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"imageSize\",\r\n        Enums.ImageSize,\r\n        Enums.ImageSize.Medium);\r\n\r\n    @property(ImageSet.imagesProperty)\r\n    private _images: Image[] = [];\r\n\r\n    @property(ImageSet.imageSizeProperty)\r\n    imageSize: Enums.ImageSize = Enums.ImageSize.Medium;\r\n\r\n    //#endregion\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let element: HTMLElement | undefined = undefined;\r\n\r\n        if (this._images.length > 0) {\r\n            element = document.createElement(\"div\");\r\n            element.style.display = \"flex\";\r\n            element.style.flexWrap = \"wrap\";\r\n\r\n            for (let image of this._images) {\r\n                switch (this.imageSize) {\r\n                    case Enums.ImageSize.Small:\r\n                        image.size = Enums.Size.Small;\r\n                        break;\r\n                    case Enums.ImageSize.Large:\r\n                        image.size = Enums.Size.Large;\r\n                        break;\r\n                    default:\r\n                        image.size = Enums.Size.Medium;\r\n                        break;\r\n                }\r\n\r\n                image.maxHeight = this.hostConfig.imageSet.maxImageHeight;\r\n\r\n                let renderedImage = image.render();\r\n\r\n                if (renderedImage) {\r\n                    renderedImage.style.display = \"inline-flex\";\r\n                    renderedImage.style.margin = \"0px\";\r\n                    renderedImage.style.marginRight = \"10px\";\r\n\r\n                    Utils.appendChild(element, renderedImage);\r\n                }\r\n            }\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    getItemCount(): number {\r\n        return this._images.length;\r\n    }\r\n\r\n    getItemAt(index: number): CardElement {\r\n        return this._images[index];\r\n    }\r\n\r\n    getFirstVisibleRenderedItem(): CardElement | undefined {\r\n        return this._images && this._images.length > 0 ? this._images[0] : undefined;\r\n    }\r\n\r\n    getLastVisibleRenderedItem(): CardElement | undefined {\r\n        return this._images && this._images.length > 0 ? this._images[this._images.length - 1] : undefined;\r\n    }\r\n\r\n    removeItem(item: CardElement): boolean {\r\n        if (item instanceof Image) {\r\n            let itemIndex = this._images.indexOf(item);\r\n\r\n            if (itemIndex >= 0) {\r\n                this._images.splice(itemIndex, 1);\r\n\r\n                item.setParent(undefined);\r\n\r\n                this.updateLayout();\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"ImageSet\";\r\n    }\r\n\r\n    addImage(image: Image) {\r\n        if (!image.parent) {\r\n            this._images.push(image);\r\n\r\n            image.setParent(this);\r\n        }\r\n        else {\r\n            throw new Error(\"This image already belongs to another ImageSet\");\r\n        }\r\n    }\r\n\r\n    indexOf(cardElement: CardElement): number {\r\n        return cardElement instanceof Image ? this._images.indexOf(cardElement) : -1;\r\n    }\r\n}\r\n\r\nexport class MediaSource extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly mimeTypeProperty = new StringProperty(Versions.v1_1, \"mimeType\");\r\n    static readonly urlProperty = new StringProperty(Versions.v1_1, \"url\");\r\n\r\n    @property(MediaSource.mimeTypeProperty)\r\n    mimeType?: string;\r\n\r\n    @property(MediaSource.urlProperty)\r\n    url?: string;\r\n\r\n    //#endregion\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"MediaSource\";\r\n    }\r\n\r\n    constructor(url?: string, mimeType?: string) {\r\n        super();\r\n\r\n        this.url = url;\r\n        this.mimeType = mimeType;\r\n    }\r\n\r\n    isValid(): boolean {\r\n        return this.mimeType && this.url ? true : false;\r\n    }\r\n\r\n    render(): HTMLElement | undefined {\r\n        let result: HTMLSourceElement | undefined = undefined;\r\n\r\n        if (this.isValid()) {\r\n            result = document.createElement(\"source\");\r\n            result.src = <string>this.url;\r\n            result.type = <string>this.mimeType;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class Media extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly sourcesProperty = new SerializableObjectCollectionProperty(Versions.v1_1, \"sources\", MediaSource);\r\n    static readonly posterProperty = new StringProperty(Versions.v1_1, \"poster\");\r\n    static readonly altTextProperty = new StringProperty(Versions.v1_1, \"altText\");\r\n\r\n    @property(Media.sourcesProperty)\r\n    sources: MediaSource[] = [];\r\n\r\n    @property(Media.posterProperty)\r\n    poster?: string;\r\n\r\n    @property(Media.altTextProperty)\r\n    altText?: string;\r\n\r\n    //#endregion\r\n\r\n    static readonly supportedMediaTypes = [\"audio\", \"video\"];\r\n\r\n    private _selectedMediaType?: string;\r\n    private _selectedSources: MediaSource[];\r\n\r\n    private getPosterUrl(): string | undefined {\r\n        return this.poster ? this.poster : this.hostConfig.media.defaultPoster;\r\n    }\r\n\r\n    private processSources() {\r\n        this._selectedSources = [];\r\n        this._selectedMediaType = undefined;\r\n\r\n        for (let source of this.sources) {\r\n            let mimeComponents = source.mimeType ? source.mimeType.split('/') : [];\r\n\r\n            if (mimeComponents.length == 2) {\r\n                if (!this._selectedMediaType) {\r\n                    let index = Media.supportedMediaTypes.indexOf(mimeComponents[0]);\r\n\r\n                    if (index >= 0) {\r\n                        this._selectedMediaType = Media.supportedMediaTypes[index];\r\n                    }\r\n                }\r\n                if (mimeComponents[0] == this._selectedMediaType) {\r\n                    this._selectedSources.push(source);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderPoster(): HTMLElement {\r\n        const playButtonArrowWidth = 12;\r\n        const playButtonArrowHeight = 15;\r\n\r\n        let posterRootElement = document.createElement(\"div\");\r\n        posterRootElement.className = this.hostConfig.makeCssClassName(\"ac-media-poster\");\r\n        posterRootElement.setAttribute(\"role\", \"contentinfo\");\r\n        posterRootElement.setAttribute(\"aria-label\", this.altText ? this.altText : \"Media content\");\r\n        posterRootElement.style.position = \"relative\";\r\n        posterRootElement.style.display = \"flex\";\r\n\r\n        let posterUrl = this.getPosterUrl();\r\n\r\n        if (posterUrl) {\r\n            let posterImageElement = document.createElement(\"img\");\r\n            posterImageElement.style.width = \"100%\";\r\n            posterImageElement.style.height = \"100%\";\r\n\r\n            posterImageElement.onerror = (e: Event) => {\r\n                if (posterImageElement.parentNode) {\r\n                    posterImageElement.parentNode.removeChild(posterImageElement);\r\n                }\r\n\r\n                posterRootElement.classList.add(\"empty\");\r\n                posterRootElement.style.minHeight = \"150px\";\r\n            }\r\n\r\n            posterImageElement.src = posterUrl;\r\n\r\n            posterRootElement.appendChild(posterImageElement);\r\n        }\r\n        else {\r\n            posterRootElement.classList.add(\"empty\");\r\n            posterRootElement.style.minHeight = \"150px\";\r\n        }\r\n\r\n        if (this.hostConfig.supportsInteractivity && this._selectedSources.length > 0) {\r\n            let playButtonOuterElement = document.createElement(\"div\");\r\n            playButtonOuterElement.tabIndex = 0;\r\n            playButtonOuterElement.setAttribute(\"role\", \"button\");\r\n            playButtonOuterElement.setAttribute(\"aria-label\", \"Play media\");\r\n            playButtonOuterElement.className = this.hostConfig.makeCssClassName(\"ac-media-playButton\");\r\n            playButtonOuterElement.style.display = \"flex\";\r\n            playButtonOuterElement.style.alignItems = \"center\";\r\n            playButtonOuterElement.style.justifyContent = \"center\";\r\n            playButtonOuterElement.onclick = (e) => {\r\n                if (this.hostConfig.media.allowInlinePlayback) {\r\n                    e.preventDefault();\r\n                    e.cancelBubble = true;\r\n\r\n                    if (this.renderedElement) {\r\n                        let mediaPlayerElement = this.renderMediaPlayer();\r\n\r\n                        this.renderedElement.innerHTML = \"\";\r\n                        this.renderedElement.appendChild(mediaPlayerElement);\r\n\r\n                        mediaPlayerElement.play();\r\n                    }\r\n                }\r\n                else {\r\n                    if (Media.onPlay) {\r\n                        e.preventDefault();\r\n                        e.cancelBubble = true;\r\n\r\n                        Media.onPlay(this);\r\n                    }\r\n                }\r\n            }\r\n\r\n            let playButtonInnerElement = document.createElement(\"div\");\r\n            playButtonInnerElement.className = this.hostConfig.makeCssClassName(\"ac-media-playButton-arrow\");\r\n            playButtonInnerElement.style.width = playButtonArrowWidth + \"px\";\r\n            playButtonInnerElement.style.height = playButtonArrowHeight + \"px\";\r\n            playButtonInnerElement.style.borderTopWidth = (playButtonArrowHeight / 2) + \"px\";\r\n            playButtonInnerElement.style.borderBottomWidth = (playButtonArrowHeight / 2) + \"px\";\r\n            playButtonInnerElement.style.borderLeftWidth = playButtonArrowWidth + \"px\";\r\n            playButtonInnerElement.style.borderRightWidth = \"0\";\r\n            playButtonInnerElement.style.borderStyle = \"solid\";\r\n            playButtonInnerElement.style.borderTopColor = \"transparent\";\r\n            playButtonInnerElement.style.borderRightColor = \"transparent\";\r\n            playButtonInnerElement.style.borderBottomColor = \"transparent\";\r\n            playButtonInnerElement.style.transform = \"translate(\" + (playButtonArrowWidth / 10) + \"px,0px)\";\r\n\r\n            playButtonOuterElement.appendChild(playButtonInnerElement);\r\n\r\n            let playButtonContainer = document.createElement(\"div\");\r\n            playButtonContainer.style.position = \"absolute\";\r\n            playButtonContainer.style.left = \"0\";\r\n            playButtonContainer.style.top = \"0\";\r\n            playButtonContainer.style.width = \"100%\";\r\n            playButtonContainer.style.height = \"100%\";\r\n            playButtonContainer.style.display = \"flex\";\r\n            playButtonContainer.style.justifyContent = \"center\";\r\n            playButtonContainer.style.alignItems = \"center\";\r\n\r\n            playButtonContainer.appendChild(playButtonOuterElement);\r\n            posterRootElement.appendChild(playButtonContainer);\r\n        }\r\n\r\n        return posterRootElement;\r\n    }\r\n\r\n    private renderMediaPlayer(): HTMLMediaElement {\r\n        let mediaElement: HTMLMediaElement;\r\n\r\n        if (this._selectedMediaType == \"video\") {\r\n            let videoPlayer = document.createElement(\"video\");\r\n\r\n            let posterUrl = this.getPosterUrl();\r\n\r\n            if (posterUrl) {\r\n                videoPlayer.poster = posterUrl;\r\n            }\r\n\r\n            mediaElement = videoPlayer;\r\n        }\r\n        else {\r\n            mediaElement = document.createElement(\"audio\");\r\n        }\r\n\r\n        mediaElement.setAttribute(\"webkit-playsinline\", \"\");\r\n        mediaElement.setAttribute(\"playsinline\", \"\");\r\n        mediaElement.autoplay = true;\r\n        mediaElement.controls = true;\r\n\r\n        if (Utils.isMobileOS()) {\r\n            mediaElement.muted = true;\r\n        }\r\n\r\n        mediaElement.preload = \"none\";\r\n        mediaElement.style.width = \"100%\";\r\n\r\n        for (let source of this.sources) {\r\n            let renderedSource = source.render();\r\n\r\n            Utils.appendChild(mediaElement, renderedSource);\r\n        }\r\n\r\n        return mediaElement;\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let element = <HTMLElement>document.createElement(\"div\");\r\n        element.className = this.hostConfig.makeCssClassName(\"ac-media\");\r\n\r\n        this.processSources();\r\n\r\n        element.appendChild(this.renderPoster());\r\n\r\n        return element;\r\n    }\r\n\r\n    static onPlay?: (sender: Media) => void;\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Media\";\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        let result: IResourceInformation[] = [];\r\n\r\n        let posterUrl = this.getPosterUrl();\r\n\r\n        if (posterUrl) {\r\n            result.push({ url: posterUrl, mimeType: \"image\" });\r\n        }\r\n\r\n        for (let mediaSource of this.sources) {\r\n            if (mediaSource.isValid()) {\r\n                result.push(\r\n                    {\r\n                        url: <string>mediaSource.url,\r\n                        mimeType: <string>mediaSource.mimeType\r\n                    }\r\n                );\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get selectedMediaType(): string | undefined {\r\n        return this._selectedMediaType;\r\n    }\r\n}\r\n\r\nexport class InputValidationOptions extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly necessityProperty = new EnumProperty(Versions.v1_3, \"necessity\", Enums.InputValidationNecessity, Enums.InputValidationNecessity.Optional);\r\n    static readonly errorMessageProperty = new StringProperty(Versions.v1_3, \"errorMessagwe\");\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"InputValidationOptions\";\r\n    }\r\n\r\n    @property(InputValidationOptions.necessityProperty)\r\n    necessity: Enums.InputValidationNecessity = Enums.InputValidationNecessity.Optional;\r\n\r\n    @property(InputValidationOptions.errorMessageProperty)\r\n    errorMessage?: string;\r\n\r\n    //#endregion\r\n\r\n    protected internalToJSON(target: PropertyBag, context: BaseSerializationContext) {\r\n        return this.hasAllDefaultValues() ? undefined : super.internalToJSON(target, context);\r\n    }\r\n}\r\n\r\nexport abstract class Input extends CardElement implements IInput {\r\n    //#region Schema\r\n\r\n    static readonly validationProperty = new SerializableObjectProperty(\r\n        Versions.v1_3,\r\n        \"validation\",\r\n        InputValidationOptions);\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        if (!GlobalSettings.useBuiltInInputValidation) {\r\n            schema.remove(Input.validationProperty);\r\n        }\r\n    }\r\n\r\n    @property(Input.validationProperty)\r\n    get validation(): InputValidationOptions {\r\n        return this.getValue(Input.validationProperty);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    private _outerContainerElement: HTMLElement;\r\n    private _inputControlContainerElement: HTMLElement;\r\n    private _errorMessageElement?: HTMLElement;\r\n    private _renderedInputControlElement: HTMLElement;\r\n\r\n    protected get isNullable(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get renderedInputControlElement(): HTMLElement {\r\n        return this._renderedInputControlElement;\r\n    }\r\n\r\n    protected get inputControlContainerElement(): HTMLElement {\r\n        return this._inputControlContainerElement;\r\n    }\r\n\r\n    protected overrideInternalRender(): HTMLElement | undefined {\r\n        let hostConfig = this.hostConfig;\r\n\r\n        this._outerContainerElement = document.createElement(\"div\");\r\n        this._outerContainerElement.style.display = \"flex\";\r\n        this._outerContainerElement.style.flexDirection = \"column\";\r\n\r\n        this._inputControlContainerElement = document.createElement(\"div\");\r\n        this._inputControlContainerElement.className = hostConfig.makeCssClassName(\"ac-input-container\");\r\n        this._inputControlContainerElement.style.display = \"flex\";\r\n\r\n        let renderedInputControlElement = this.internalRender();\r\n\r\n        if (renderedInputControlElement) {\r\n            this._renderedInputControlElement = renderedInputControlElement;\r\n            this._renderedInputControlElement.style.minWidth = \"0px\";\r\n\r\n            if (GlobalSettings.useBuiltInInputValidation && this.isNullable && this.validation.necessity == Enums.InputValidationNecessity.RequiredWithVisualCue) {\r\n                this._renderedInputControlElement.classList.add(hostConfig.makeCssClassName(\"ac-input-required\"));\r\n            }\r\n\r\n            this._inputControlContainerElement.appendChild(this._renderedInputControlElement);\r\n\r\n            this._outerContainerElement.appendChild(this._inputControlContainerElement);\r\n\r\n            return this._outerContainerElement;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    protected valueChanged() {\r\n        this.resetValidationFailureCue();\r\n\r\n        if (this.onValueChanged) {\r\n            this.onValueChanged(this);\r\n        }\r\n\r\n        raiseInputValueChangedEvent(this);\r\n    }\r\n\r\n    protected resetValidationFailureCue() {\r\n        if (GlobalSettings.useBuiltInInputValidation && this.renderedElement) {\r\n            this._renderedInputControlElement.classList.remove(this.hostConfig.makeCssClassName(\"ac-input-validation-failed\"));\r\n\r\n            if (this._errorMessageElement) {\r\n                this._outerContainerElement.removeChild(this._errorMessageElement);\r\n\r\n                this._errorMessageElement = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected showValidationErrorMessage() {\r\n        if (this.renderedElement && GlobalSettings.useBuiltInInputValidation && GlobalSettings.displayInputValidationErrors && this.validation.errorMessage) {\r\n            this._errorMessageElement = document.createElement(\"span\");\r\n            this._errorMessageElement.className = this.hostConfig.makeCssClassName(\"ac-input-validation-error-message\");\r\n            this._errorMessageElement.textContent = this.validation.errorMessage;\r\n\r\n            this._outerContainerElement.appendChild(this._errorMessageElement);\r\n        }\r\n    }\r\n\r\n    abstract get value(): any;\r\n\r\n    onValueChanged: (sender: Input) => void;\r\n\r\n    abstract isSet(): boolean;\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (!this.id) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                \"All inputs must have a unique Id\");\r\n        }\r\n    }\r\n\r\n    validateValue(): boolean {\r\n        if (GlobalSettings.useBuiltInInputValidation) {\r\n            this.resetValidationFailureCue();\r\n\r\n            let result = this.validation.necessity != Enums.InputValidationNecessity.Optional ? this.isSet() : true;\r\n\r\n            if (!result && this.renderedElement) {\r\n                this._renderedInputControlElement.classList.add(this.hostConfig.makeCssClassName(\"ac-input-validation-failed\"));\r\n\r\n                this.showValidationErrorMessage();\r\n            }\r\n\r\n            return result;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    getAllInputs(): Input[] {\r\n        return [this];\r\n    }\r\n\r\n    get isInteractive(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class TextInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n    static readonly maxLengthProperty = new NumProperty(Versions.v1_0, \"maxLength\");\r\n    static readonly isMultilineProperty = new BoolProperty(Versions.v1_0, \"isMultiline\", false);\r\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\r\n    static readonly styleProperty = new EnumProperty(Versions.v1_0, \"style\", Enums.InputTextStyle, Enums.InputTextStyle.Text);\r\n    static readonly inlineActionProperty = new ActionProperty(Versions.v1_0, \"inlineAction\", [ \"Action.ShowCard\" ]);\r\n\r\n    @property(TextInput.valueProperty)\r\n    defaultValue?: string;\r\n\r\n    @property(TextInput.maxLengthProperty)\r\n    maxLength?: number;\r\n\r\n    @property(TextInput.isMultilineProperty)\r\n    isMultiline: boolean = false;\r\n\r\n    @property(TextInput.placeholderProperty)\r\n    placeholder?: string;\r\n\r\n    @property(TextInput.styleProperty)\r\n    style: Enums.InputTextStyle = Enums.InputTextStyle.Text;\r\n\r\n    @property(TextInput.inlineActionProperty)\r\n    inlineAction?: Action;\r\n\r\n    //#endregion\r\n\r\n    private setupInput(input: HTMLInputElement | HTMLTextAreaElement) {\r\n        input.style.flex = \"1 1 auto\";\r\n        input.tabIndex = 0;\r\n\r\n        if (this.placeholder) {\r\n            input.placeholder = this.placeholder;\r\n            input.setAttribute(\"aria-label\", this.placeholder)\r\n        }\r\n\r\n        if (this.defaultValue) {\r\n            input.value = this.defaultValue;\r\n        }\r\n\r\n        if (this.maxLength && this.maxLength > 0) {\r\n            input.maxLength = this.maxLength;\r\n        }\r\n\r\n        input.oninput = () => { this.valueChanged(); }\r\n        input.onkeypress = (e: KeyboardEvent) => {\r\n            // Ctrl+Enter pressed\r\n            if (e.keyCode == 10 && this.inlineAction) {\r\n                this.inlineAction.execute();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let result: HTMLInputElement | HTMLTextAreaElement;\r\n\r\n        if (this.isMultiline) {\r\n            result = document.createElement(\"textarea\");\r\n            result.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-textInput\", \"ac-multiline\");\r\n        }\r\n        else {\r\n            result = document.createElement(\"input\");\r\n            result.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-textInput\");\r\n            result.type = Enums.InputTextStyle[this.style].toLowerCase();\r\n        }\r\n\r\n        this.setupInput(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    protected overrideInternalRender(): HTMLElement | undefined {\r\n        let renderedInputControl = super.overrideInternalRender();\r\n\r\n        if (this.inlineAction) {\r\n            let button = document.createElement(\"button\");\r\n            button.className = this.hostConfig.makeCssClassName(\"ac-inlineActionButton\");\r\n            button.onclick = (e) => {\r\n                e.preventDefault();\r\n                e.cancelBubble = true;\r\n\r\n                if (this.inlineAction) {\r\n                    this.inlineAction.execute();\r\n                }\r\n            };\r\n\r\n            if (this.inlineAction.iconUrl) {\r\n                button.classList.add(\"iconOnly\");\r\n\r\n                let icon = document.createElement(\"img\");\r\n                icon.style.height = \"100%\";\r\n\r\n                // The below trick is necessary as a workaround in Chrome where the icon is initially displayed\r\n                // at its native size then resized to 100% of the button's height. This cfreates an unpleasant\r\n                // flicker. On top of that, Chrome's flex implementation fails to prperly re-layout the button\r\n                // after the image has loaded and been gicven its final size. The below trick also fixes that.\r\n                icon.style.display = \"none\";\r\n                icon.onload = () => {\r\n                    icon.style.removeProperty(\"display\");\r\n                };\r\n                icon.onerror = () => {\r\n                    button.removeChild(icon);\r\n                    button.classList.remove(\"iconOnly\");\r\n                    button.classList.add(\"textOnly\");\r\n\r\n                    if (this.inlineAction) {\r\n                        button.textContent = this.inlineAction.title ? this.inlineAction.title : \"Title\";\r\n                    }\r\n                    else {\r\n                        button.textContent = \"Title\";\r\n                    }\r\n                }\r\n\r\n                icon.src = this.inlineAction.iconUrl;\r\n\r\n                button.appendChild(icon);\r\n\r\n                if (this.inlineAction.title) {\r\n                    button.title = this.inlineAction.title;\r\n                }\r\n            }\r\n            else {\r\n                button.classList.add(\"textOnly\");\r\n                button.textContent = this.inlineAction.title ? this.inlineAction.title : \"Title\";\r\n            }\r\n\r\n            button.style.marginLeft = \"8px\";\r\n\r\n            this.inputControlContainerElement.appendChild(button);\r\n        }\r\n\r\n        return renderedInputControl;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.Text\";\r\n    }\r\n\r\n    getActionById(id: string) {\r\n        let result = super.getActionById(id);\r\n\r\n        if (!result && this.inlineAction) {\r\n            result = this.inlineAction.getActionById(id);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value ? true : false;\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        if (this.renderedInputControlElement) {\r\n            if (this.isMultiline) {\r\n                return (<HTMLTextAreaElement>this.renderedInputControlElement).value;\r\n            }\r\n            else {\r\n                return (<HTMLInputElement>this.renderedInputControlElement).value;\r\n            }\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport class ToggleInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\r\n    static readonly valueOnProperty = new StringProperty(Versions.v1_0, \"valueOn\", true, undefined, \"true\", (sender: SerializableObject) => { return \"true\"; });\r\n    static readonly valueOffProperty = new StringProperty(Versions.v1_0, \"valueOff\", true, undefined, \"false\", (sender: SerializableObject) => { return \"false\"; });\r\n    static readonly wrapProperty = new BoolProperty(Versions.v1_2, \"wrap\", false);\r\n\r\n    @property(ToggleInput.valueProperty)\r\n    defaultValue?: string;\r\n\r\n    @property(ToggleInput.titleProperty)\r\n    title?: string;\r\n\r\n    @property(ToggleInput.valueOnProperty)\r\n    valueOn: string = \"true\";\r\n\r\n    @property(ToggleInput.valueOffProperty)\r\n    valueOff: string = \"false\";\r\n\r\n    @property(ToggleInput.wrapProperty)\r\n    wrap: boolean = false;\r\n\r\n    //#endregion\r\n\r\n    private _checkboxInputElement: HTMLInputElement;\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let element = document.createElement(\"div\");\r\n        element.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-toggleInput\");\r\n        element.style.width = \"100%\";\r\n        element.style.display = \"flex\";\r\n        element.style.alignItems = \"center\";\r\n\r\n        this._checkboxInputElement = document.createElement(\"input\");\r\n        this._checkboxInputElement.id = Utils.generateUniqueId();\r\n        this._checkboxInputElement.type = \"checkbox\";\r\n        this._checkboxInputElement.style.display = \"inline-block\";\r\n        this._checkboxInputElement.style.verticalAlign = \"middle\";\r\n        this._checkboxInputElement.style.margin = \"0\";\r\n        this._checkboxInputElement.style.flex = \"0 0 auto\";\r\n\r\n        if (this.title) {\r\n            this._checkboxInputElement.setAttribute(\"aria-label\", this.title);\r\n        }\r\n\r\n        this._checkboxInputElement.tabIndex = 0;\r\n\r\n        if (this.defaultValue == this.valueOn) {\r\n            this._checkboxInputElement.checked = true;\r\n        }\r\n\r\n        this._checkboxInputElement.onchange = () => { this.valueChanged(); }\r\n\r\n        Utils.appendChild(element, this._checkboxInputElement);\r\n\r\n        if (this.title || this.isDesignMode()) {\r\n            let label = new Label();\r\n            label.setParent(this);\r\n            label.forElementId = this._checkboxInputElement.id;\r\n            label.hostConfig = this.hostConfig;\r\n            label.text = !this.title ? this.getJsonTypeName() : this.title;\r\n            label.useMarkdown = GlobalSettings.useMarkdownInRadioButtonAndCheckbox;\r\n            label.wrap = this.wrap;\r\n\r\n            let labelElement = label.render();\r\n\r\n            if (labelElement) {\r\n                labelElement.style.display = \"inline-block\";\r\n                labelElement.style.flex = \"1 1 auto\";\r\n                labelElement.style.marginLeft = \"6px\";\r\n                labelElement.style.verticalAlign = \"middle\";\r\n\r\n                let spacerElement = document.createElement(\"div\");\r\n                spacerElement.style.width = \"6px\";\r\n\r\n                Utils.appendChild(element, spacerElement);\r\n                Utils.appendChild(element, labelElement);\r\n            }\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    protected get isNullable(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.Toggle\";\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value ? true : false;\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        if (this._checkboxInputElement) {\r\n            return this._checkboxInputElement.checked ? this.valueOn : this.valueOff;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Choice extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n\r\n    @property(Choice.titleProperty)\r\n    title?: string;\r\n\r\n    @property(Choice.valueProperty)\r\n    value?: string;\r\n\r\n    //#endregion\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"Choice\";\r\n    }\r\n\r\n    constructor(title?: string, value?: string) {\r\n        super();\r\n\r\n        this.title = title;\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nexport class ChoiceSetInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n    static readonly choicesProperty = new SerializableObjectCollectionProperty(Versions.v1_0, \"choices\", Choice);\r\n    static readonly styleProperty = new ValueSetProperty(\r\n        Versions.v1_0,\r\n        \"style\",\r\n        [\r\n            { value: \"compact\" },\r\n            { value: \"expanded\" }\r\n        ],\r\n        \"compact\");\r\n    static readonly isMultiSelectProperty = new BoolProperty(Versions.v1_0, \"isMultiSelect\", false);\r\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\r\n    static readonly wrapProperty = new BoolProperty(Versions.v1_2, \"wrap\", false);\r\n\r\n    @property(ChoiceSetInput.valueProperty)\r\n    defaultValue?: string;\r\n\r\n    @property(ChoiceSetInput.styleProperty)\r\n    style?: \"compact\" | \"expanded\";\r\n\r\n    get isCompact(): boolean {\r\n        return this.style !== \"expanded\";\r\n    }\r\n\r\n    set isCompact(value: boolean) {\r\n        this.style = value ? undefined : \"expanded\";\r\n    }\r\n\r\n    @property(ChoiceSetInput.isMultiSelectProperty)\r\n    isMultiSelect: boolean = false;\r\n\r\n    @property(ChoiceSetInput.placeholderProperty)\r\n    placeholder?: string;\r\n\r\n    @property(ChoiceSetInput.wrapProperty)\r\n    wrap: boolean = false;\r\n\r\n    @property(ChoiceSetInput.choicesProperty)\r\n    choices: Choice[] = [];\r\n\r\n    //#endregion\r\n\r\n    private static uniqueCategoryCounter = 0;\r\n\r\n    private static getUniqueCategoryName(): string {\r\n        let uniqueCategoryName = \"__ac-category\" + ChoiceSetInput.uniqueCategoryCounter;\r\n\r\n        ChoiceSetInput.uniqueCategoryCounter++;\r\n\r\n        return uniqueCategoryName;\r\n    }\r\n\r\n    private _uniqueCategoryName: string;\r\n    private _selectElement: HTMLSelectElement;\r\n    private _toggleInputs: HTMLInputElement[];\r\n\r\n    private renderCompoundInput(cssClassName: string, type: \"checkbox\" | \"radio\", defaultValues: string[] | undefined): HTMLElement {\r\n        let element = document.createElement(\"div\");\r\n        element.className = this.hostConfig.makeCssClassName(\"ac-input\", cssClassName);\r\n        element.style.width = \"100%\";\r\n\r\n        this._toggleInputs = [];\r\n\r\n        for (let choice of this.choices) {\r\n            let input = document.createElement(\"input\");\r\n            input.id = Utils.generateUniqueId();\r\n            input.type = type;\r\n            input.style.margin = \"0\";\r\n            input.style.display = \"inline-block\";\r\n            input.style.verticalAlign = \"middle\";\r\n            input.style.flex = \"0 0 auto\";\r\n            input.name = this.id ? this.id : this._uniqueCategoryName;\r\n\r\n            if (choice.value) {\r\n                input.value = choice.value;\r\n            }\r\n\r\n            if (choice.title) {\r\n                input.setAttribute(\"aria-label\", choice.title);\r\n            }\r\n\r\n            if (defaultValues && choice.value) {\r\n                if (defaultValues.indexOf(choice.value) >= 0) {\r\n                    input.checked = true;\r\n                }\r\n            }\r\n\r\n            input.onchange = () => { this.valueChanged(); }\r\n\r\n            this._toggleInputs.push(input);\r\n\r\n            let compoundInput = document.createElement(\"div\");\r\n            compoundInput.style.display = \"flex\";\r\n            compoundInput.style.alignItems = \"center\";\r\n\r\n            Utils.appendChild(compoundInput, input);\r\n\r\n            let label = new Label();\r\n            label.setParent(this);\r\n            label.forElementId = input.id;\r\n            label.hostConfig = this.hostConfig;\r\n            label.text = choice.title ? choice.title : \"Choice \" + this._toggleInputs.length;\r\n            label.useMarkdown = GlobalSettings.useMarkdownInRadioButtonAndCheckbox;\r\n            label.wrap = this.wrap;\r\n\r\n            let labelElement = label.render();\r\n\r\n            if (labelElement) {\r\n                labelElement.style.display = \"inline-block\";\r\n                labelElement.style.flex = \"1 1 auto\";\r\n                labelElement.style.marginLeft = \"6px\";\r\n                labelElement.style.verticalAlign = \"middle\";\r\n\r\n                let spacerElement = document.createElement(\"div\");\r\n                spacerElement.style.width = \"6px\";\r\n\r\n                Utils.appendChild(compoundInput, spacerElement);\r\n                Utils.appendChild(compoundInput, labelElement);\r\n            }\r\n\r\n            Utils.appendChild(element, compoundInput);\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    // Make sure `aria-current` is applied to the currently-selected item\r\n    protected internalApplyAriaCurrent(): void {\r\n        const options = this._selectElement.options;\r\n\r\n        if (options) {\r\n            for (let i = 0; i < options.length; i++) {\r\n                if (options[i].selected) {\r\n                    options[i].setAttribute(\"aria-current\", \"true\");\r\n                }\r\n                else {\r\n                    options[i].removeAttribute(\"aria-current\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._uniqueCategoryName = ChoiceSetInput.getUniqueCategoryName();\r\n\r\n        if (this.isMultiSelect) {\r\n            // Render as a list of toggle inputs\r\n            return this.renderCompoundInput(\r\n                \"ac-choiceSetInput-multiSelect\",\r\n                \"checkbox\",\r\n                this.defaultValue ? this.defaultValue.split(this.hostConfig.choiceSetInputValueSeparator) : undefined);\r\n        }\r\n        else {\r\n            if (this.style === \"expanded\") {\r\n                // Render as a series of radio buttons\r\n                return this.renderCompoundInput(\r\n                    \"ac-choiceSetInput-expanded\",\r\n                    \"radio\",\r\n                    this.defaultValue ? [ this.defaultValue ] : undefined);\r\n            }\r\n            else {\r\n                // Render as a combo box\r\n                this._selectElement = document.createElement(\"select\");\r\n                this._selectElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-multichoiceInput\", \"ac-choiceSetInput-compact\");\r\n                this._selectElement.style.width = \"100%\";\r\n\r\n                let option = document.createElement(\"option\");\r\n                option.selected = true;\r\n                option.disabled = true;\r\n                option.hidden = true;\r\n                option.value = \"\";\r\n\r\n                if (this.placeholder) {\r\n                    option.text = this.placeholder;\r\n                }\r\n\r\n                Utils.appendChild(this._selectElement, option);\r\n\r\n                for (let choice of this.choices) {\r\n                    let option = document.createElement(\"option\");\r\n                    option.value = <string>choice.value;\r\n                    option.text = <string>choice.title;\r\n                    option.setAttribute(\"aria-label\", <string>choice.title);\r\n\r\n                    if (choice.value == this.defaultValue) {\r\n                        option.selected = true;\r\n                    }\r\n\r\n                    Utils.appendChild(this._selectElement, option);\r\n                }\r\n\r\n                this._selectElement.onchange = () => {\r\n                    this.internalApplyAriaCurrent();\r\n                    this.valueChanged();\r\n                }\r\n\r\n                this.internalApplyAriaCurrent();\r\n                return this._selectElement;\r\n            }\r\n        }\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.ChoiceSet\";\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (this.choices.length == 0) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.CollectionCantBeEmpty,\r\n                \"An Input.ChoiceSet must have at least one choice defined.\");\r\n        }\r\n\r\n        for (let choice of this.choices) {\r\n            if (!choice.title || !choice.value) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.PropertyCantBeNull,\r\n                    \"All choices in an Input.ChoiceSet must have their title and value properties set.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value ? true : false;\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        if (!this.isMultiSelect) {\r\n            if (this.isCompact) {\r\n                if (this._selectElement) {\r\n                    return this._selectElement.selectedIndex > 0 ? this._selectElement.value : undefined;\r\n                }\r\n\r\n                return undefined;\r\n            }\r\n            else {\r\n                if (!this._toggleInputs || this._toggleInputs.length == 0) {\r\n                    return undefined;\r\n                }\r\n\r\n                for (let toggleInput of this._toggleInputs) {\r\n                    if (toggleInput.checked) {\r\n                        return toggleInput.value;\r\n                    }\r\n                }\r\n\r\n                return undefined;\r\n            }\r\n        }\r\n        else {\r\n            if (!this._toggleInputs || this._toggleInputs.length == 0) {\r\n                return undefined;\r\n            }\r\n\r\n            let result: string = \"\";\r\n\r\n            for (let toggleInput of this._toggleInputs) {\r\n                if (toggleInput.checked) {\r\n                    if (result != \"\") {\r\n                        result += this.hostConfig.choiceSetInputValueSeparator;\r\n                    }\r\n\r\n                    result += toggleInput.value;\r\n                }\r\n            }\r\n\r\n            return result ? result : undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport class NumberInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new NumProperty(Versions.v1_0, \"value\");\r\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\r\n    static readonly minProperty = new NumProperty(Versions.v1_0, \"min\");\r\n    static readonly maxProperty = new NumProperty(Versions.v1_0, \"max\");\r\n\r\n    @property(NumberInput.valueProperty)\r\n    defaultValue?: number;\r\n\r\n    @property(NumberInput.minProperty)\r\n    min?: number;\r\n\r\n    @property(NumberInput.maxProperty)\r\n    max?: number;\r\n\r\n    @property(NumberInput.placeholderProperty)\r\n    placeholder?: string;\r\n\r\n    //#endregion\r\n\r\n    private _numberInputElement: HTMLInputElement;\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._numberInputElement = document.createElement(\"input\");\r\n        this._numberInputElement.setAttribute(\"type\", \"number\");\r\n\r\n        if (this.min) {\r\n            this._numberInputElement.setAttribute(\"min\", this.min.toString());\r\n        }\r\n\r\n        if (this.max) {\r\n            this._numberInputElement.setAttribute(\"max\", this.max.toString());\r\n        }\r\n\r\n        this._numberInputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-numberInput\");\r\n        this._numberInputElement.style.width = \"100%\";\r\n        this._numberInputElement.tabIndex = 0;\r\n\r\n        if (this.defaultValue !== undefined) {\r\n            this._numberInputElement.valueAsNumber = this.defaultValue;\r\n        }\r\n\r\n        if (this.placeholder) {\r\n            this._numberInputElement.placeholder = this.placeholder;\r\n            this._numberInputElement.setAttribute(\"aria-label\", this.placeholder);\r\n        }\r\n\r\n        this._numberInputElement.oninput = () => { this.valueChanged(); }\r\n\r\n        return this._numberInputElement;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.Number\";\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value !== undefined && !isNaN(this.value);\r\n    }\r\n\r\n    get value(): number | undefined {\r\n        return this._numberInputElement ? this._numberInputElement.valueAsNumber : undefined;\r\n    }\r\n}\r\n\r\nexport class DateInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\r\n    static readonly minProperty = new StringProperty(Versions.v1_0, \"min\");\r\n    static readonly maxProperty = new StringProperty(Versions.v1_0, \"max\");\r\n\r\n    @property(DateInput.valueProperty)\r\n    defaultValue?: string;\r\n\r\n    @property(DateInput.minProperty)\r\n    min?: string;\r\n\r\n    @property(DateInput.maxProperty)\r\n    max?: string;\r\n\r\n    @property(DateInput.placeholderProperty)\r\n    placeholder?: string;\r\n\r\n    //#endregion\r\n\r\n    private _dateInputElement: HTMLInputElement;\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._dateInputElement = document.createElement(\"input\");\r\n        this._dateInputElement.setAttribute(\"type\", \"date\");\r\n\r\n        if (this.min) {\r\n            this._dateInputElement.setAttribute(\"min\", this.min);\r\n        }\r\n\r\n        if (this.max) {\r\n            this._dateInputElement.setAttribute(\"max\", this.max);\r\n        }\r\n\r\n        if (this.placeholder) {\r\n            this._dateInputElement.placeholder = this.placeholder;\r\n            this._dateInputElement.setAttribute(\"aria-label\", this.placeholder);\r\n        }\r\n\r\n        this._dateInputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-dateInput\");\r\n        this._dateInputElement.style.width = \"100%\";\r\n\r\n        this._dateInputElement.oninput = () => { this.valueChanged(); }\r\n\r\n        if (this.defaultValue) {\r\n            this._dateInputElement.value = this.defaultValue;\r\n        }\r\n\r\n        return this._dateInputElement;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.Date\";\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value ? true : false;\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        return this._dateInputElement ? this._dateInputElement.value : undefined;\r\n    }\r\n}\r\n\r\nexport class TimeProperty extends CustomProperty<string | undefined> {\r\n    constructor(readonly targetVersion: Version, readonly name: string) {\r\n        super(\r\n            targetVersion,\r\n            name,\r\n            (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\r\n                let value = source[property.name];\r\n\r\n                if (typeof value === \"string\" && value && /^[0-9]{2}:[0-9]{2}$/.test(value)) {\r\n                    return value;\r\n                }\r\n\r\n                return undefined;\r\n            },\r\n            (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: string | undefined, context: BaseSerializationContext) => {\r\n                context.serializeValue(target, property.name, value);\r\n            });\r\n    }\r\n}\r\n\r\nexport class TimeInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new TimeProperty(Versions.v1_0, \"value\");\r\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\r\n    static readonly minProperty = new TimeProperty(Versions.v1_0, \"min\");\r\n    static readonly maxProperty = new TimeProperty(Versions.v1_0, \"max\");\r\n\r\n    @property(TimeInput.valueProperty)\r\n    defaultValue?: string;\r\n\r\n    @property(TimeInput.minProperty)\r\n    min?: string;\r\n\r\n    @property(TimeInput.maxProperty)\r\n    max?: string;\r\n\r\n    @property(TimeInput.placeholderProperty)\r\n    placeholder?: string;\r\n\r\n    //#endregion\r\n\r\n    private _timeInputElement: HTMLInputElement;\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._timeInputElement = document.createElement(\"input\");\r\n        this._timeInputElement.setAttribute(\"type\", \"time\");\r\n        this._timeInputElement.setAttribute(\"min\", <string>this.min);\r\n        this._timeInputElement.setAttribute(\"max\", <string>this.max);\r\n        this._timeInputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-timeInput\");\r\n        this._timeInputElement.style.width = \"100%\";\r\n        this._timeInputElement.oninput = () => { this.valueChanged(); }\r\n\r\n        if (this.placeholder) {\r\n            this._timeInputElement.placeholder = this.placeholder;\r\n            this._timeInputElement.setAttribute(\"aria-label\", this.placeholder);\r\n        }\r\n\r\n        if (this.defaultValue) {\r\n            this._timeInputElement.value = this.defaultValue;\r\n        }\r\n\r\n        return this._timeInputElement;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.Time\";\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value ? true : false;\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        return this._timeInputElement ? this._timeInputElement.value : undefined;\r\n    }\r\n}\r\n\r\nconst enum ActionButtonState {\r\n    Normal,\r\n    Expanded,\r\n    Subdued\r\n}\r\n\r\nclass ActionButton {\r\n    private _parentContainerStyle: string;\r\n    private _state: ActionButtonState = ActionButtonState.Normal;\r\n\r\n    private updateCssStyle() {\r\n        if (this.action.parent && this.action.renderedElement) {\r\n            let hostConfig = this.action.parent.hostConfig;\r\n\r\n            this.action.renderedElement.className = hostConfig.makeCssClassName(\"ac-pushButton\");\r\n\r\n            if (this._parentContainerStyle) {\r\n                this.action.renderedElement.classList.add(\"style-\" + this._parentContainerStyle);\r\n            }\r\n\r\n            this.action.updateActionButtonCssStyle(this.action.renderedElement, this._state);\r\n\r\n            this.action.renderedElement.classList.remove(hostConfig.makeCssClassName(\"expanded\"));\r\n            this.action.renderedElement.classList.remove(hostConfig.makeCssClassName(\"subdued\"));\r\n\r\n            switch (this._state) {\r\n                case ActionButtonState.Expanded:\r\n                    this.action.renderedElement.classList.add(hostConfig.makeCssClassName(\"expanded\"));\r\n                    break;\r\n                case ActionButtonState.Subdued:\r\n                    this.action.renderedElement.classList.add(hostConfig.makeCssClassName(\"subdued\"));\r\n                    break;\r\n            }\r\n\r\n            if (this.action.style) {\r\n                if (this.action.style === Enums.ActionStyle.Positive) {\r\n                    this.action.renderedElement.classList.add(...hostConfig.makeCssClassNames(\"primary\", \"style-positive\"));\r\n                }\r\n                else {\r\n                    this.action.renderedElement.classList.add(...hostConfig.makeCssClassNames(\"style-\" + this.action.style.toLowerCase()));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    readonly action: Action;\r\n\r\n    constructor(action: Action, parentContainerStyle: string) {\r\n        this.action = action;\r\n        this._parentContainerStyle = parentContainerStyle;\r\n    }\r\n\r\n    onClick?: (actionButton: ActionButton) => void;\r\n\r\n    render() {\r\n        this.action.render();\r\n\r\n        if (this.action.renderedElement) {\r\n            this.action.renderedElement.onclick = (e) => {\r\n                e.preventDefault();\r\n                e.cancelBubble = true;\r\n\r\n                this.click();\r\n            };\r\n\r\n            this.updateCssStyle();\r\n        }\r\n    }\r\n\r\n    click() {\r\n        if (this.onClick !== undefined) {\r\n            this.onClick(this);\r\n        }\r\n    }\r\n\r\n    get state(): ActionButtonState {\r\n        return this._state;\r\n    }\r\n\r\n    set state(value: ActionButtonState) {\r\n        this._state = value;\r\n\r\n        this.updateCssStyle();\r\n    }\r\n}\r\n\r\nexport type ActionType = { new(): Action };\r\n\r\nexport abstract class Action extends CardObject {\r\n    //#region Schema\r\n\r\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\r\n    static readonly iconUrlProperty = new StringProperty(Versions.v1_1, \"iconUrl\");\r\n    static readonly styleProperty = new ValueSetProperty(\r\n        Versions.v1_2,\r\n        \"style\",\r\n        [\r\n            { value: Enums.ActionStyle.Default },\r\n            { value: Enums.ActionStyle.Positive },\r\n            { value: Enums.ActionStyle.Destructive }\r\n        ],\r\n        Enums.ActionStyle.Default);\r\n    // TODO: Revise this when finalizing input validation\r\n    static readonly ignoreInputValidationProperty = new BoolProperty(Versions.v1_3, \"ignoreInputValidation\", false);\r\n\r\n    @property(Action.titleProperty)\r\n    title?: string;\r\n\r\n    @property(Action.iconUrlProperty)\r\n    iconUrl?: string;\r\n\r\n    @property(Action.styleProperty)\r\n    style: string = Enums.ActionStyle.Default;\r\n\r\n    //#endregion\r\n\r\n    private _actionCollection?: ActionCollection; // hold the reference to its action collection\r\n\r\n    protected addCssClasses(element: HTMLElement) {\r\n        // Do nothing in base implementation\r\n    }\r\n\r\n    protected internalGetReferencedInputs(allInputs: Input[]): Dictionary<Input> {\r\n        return {};\r\n    }\r\n\r\n    protected internalPrepareForExecution(inputs: Dictionary<Input> | undefined) {\r\n        // Do nothing in base implementation\r\n    }\r\n\r\n    protected internalValidateInputs(referencedInputs: Dictionary<Input> | undefined): Input[] {\r\n        let result: Input[] = [];\r\n\r\n        if (GlobalSettings.useBuiltInInputValidation && !this.ignoreInputValidation && referencedInputs) {\r\n            for (let key of Object.keys(referencedInputs)) {\r\n                let input = referencedInputs[key];\r\n\r\n                if (!input.validateValue()) {\r\n                    result.push(input);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected shouldSerialize(context: SerializationContext): boolean {\r\n        return context.actionRegistry.findByName(this.getJsonTypeName()) !== undefined;\r\n    }\r\n\r\n    onExecute: (sender: Action) => void;\r\n\r\n    getHref(): string | undefined {\r\n        return \"\";\r\n    }\r\n\r\n    getAriaRole(): string {\r\n        return \"button\";\r\n    }\r\n\r\n    updateActionButtonCssStyle(actionButtonElement: HTMLElement, buttonState: ActionButtonState = ActionButtonState.Normal): void {\r\n        // Do nothing in base implementation\r\n    }\r\n\r\n    parse(source: any, context?: SerializationContext) {\r\n        return super.parse(source, context ? context : new SerializationContext());\r\n    }\r\n\r\n    toJSON(context?: SerializationContext): PropertyBag | undefined {\r\n        return super.toJSON(context ? context : new SerializationContext());\r\n    }\r\n\r\n    render(baseCssClass: string = \"ac-pushButton\") {\r\n        // Cache hostConfig for perf\r\n        let hostConfig = this.hostConfig;\r\n\r\n        let buttonElement = document.createElement(\"button\");\r\n\r\n        this.addCssClasses(buttonElement);\r\n\r\n        if (this.title) {\r\n            buttonElement.setAttribute(\"aria-label\", this.title);\r\n        }\r\n\r\n        buttonElement.type = \"button\";\r\n        buttonElement.style.display = \"flex\";\r\n        buttonElement.style.alignItems = \"center\";\r\n        buttonElement.style.justifyContent = \"center\";\r\n\r\n        buttonElement.setAttribute(\"role\", this.getAriaRole());\r\n\r\n        let titleElement = document.createElement(\"div\");\r\n        titleElement.style.overflow = \"hidden\";\r\n        titleElement.style.textOverflow = \"ellipsis\";\r\n\r\n        if (!(hostConfig.actions.iconPlacement == Enums.ActionIconPlacement.AboveTitle || hostConfig.actions.allowTitleToWrap)) {\r\n            titleElement.style.whiteSpace = \"nowrap\";\r\n        }\r\n\r\n        if (this.title) {\r\n            titleElement.innerText = this.title;\r\n        }\r\n\r\n        if (!this.iconUrl) {\r\n            buttonElement.classList.add(\"noIcon\");\r\n\r\n            buttonElement.appendChild(titleElement);\r\n        }\r\n        else {\r\n            let iconElement = document.createElement(\"img\");\r\n            iconElement.src = this.iconUrl;\r\n            iconElement.style.width = hostConfig.actions.iconSize + \"px\";\r\n            iconElement.style.height = hostConfig.actions.iconSize + \"px\";\r\n            iconElement.style.flex = \"0 0 auto\";\r\n\r\n            if (hostConfig.actions.iconPlacement == Enums.ActionIconPlacement.AboveTitle) {\r\n                buttonElement.classList.add(\"iconAbove\");\r\n                buttonElement.style.flexDirection = \"column\";\r\n\r\n                if (this.title) {\r\n                    iconElement.style.marginBottom = \"6px\";\r\n                }\r\n            }\r\n            else {\r\n                buttonElement.classList.add(\"iconLeft\");\r\n\r\n                iconElement.style.maxHeight = \"100%\";\r\n\r\n                if (this.title) {\r\n                    iconElement.style.marginRight = \"6px\";\r\n                }\r\n            }\r\n\r\n            buttonElement.appendChild(iconElement);\r\n            buttonElement.appendChild(titleElement);\r\n        }\r\n\r\n        this._renderedElement = buttonElement;\r\n    }\r\n\r\n    execute() {\r\n        if (this.onExecute) {\r\n            this.onExecute(this);\r\n        }\r\n\r\n        raiseExecuteActionEvent(this);\r\n    }\r\n\r\n    prepareForExecution(): boolean {\r\n        let referencedInputs = this.getReferencedInputs();\r\n\r\n        if (this.internalValidateInputs(referencedInputs).length > 0) {\r\n            return false;\r\n        }\r\n\r\n        this.internalPrepareForExecution(referencedInputs);\r\n\r\n        return true;\r\n    };\r\n\r\n    remove(): boolean {\r\n        if (this._actionCollection) {\r\n            return this._actionCollection.removeAction(this);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getAllInputs(): Input[] {\r\n        return [];\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return this.iconUrl ? [{ url: this.iconUrl, mimeType: \"image\" }] : [];\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        return this.id === id ? this : undefined;\r\n    }\r\n\r\n    getReferencedInputs(): Dictionary<Input> | undefined {\r\n        return this.parent ? this.internalGetReferencedInputs(this.parent.getRootElement().getAllInputs()) : undefined;\r\n    }\r\n\r\n    validateInputs() {\r\n        return this.internalValidateInputs(this.getReferencedInputs());\r\n    }\r\n\r\n    get isPrimary(): boolean {\r\n        return this.style == Enums.ActionStyle.Positive;\r\n    }\r\n\r\n    set isPrimary(value: boolean) {\r\n        if (value) {\r\n            this.style = Enums.ActionStyle.Positive;\r\n        }\r\n        else {\r\n            if (this.style == Enums.ActionStyle.Positive) {\r\n                this.style = Enums.ActionStyle.Default;\r\n            }\r\n        }\r\n    }\r\n\r\n    get ignoreInputValidation(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get hostConfig(): HostConfig {\r\n        return this.parent ? this.parent.hostConfig : defaultHostConfig;\r\n    }\r\n\r\n    get parent(): CardElement | undefined {\r\n        return <CardElement>this._parent;\r\n    }\r\n}\r\n\r\nexport class SubmitAction extends Action {\r\n    //#region Schema\r\n\r\n    static readonly dataProperty = new PropertyDefinition(Versions.v1_0, \"data\");\r\n\r\n    @property(SubmitAction.dataProperty)\r\n    private _originalData?: PropertyBag;\r\n\r\n    @property(Action.ignoreInputValidationProperty)\r\n    private _ignoreInputValidation: boolean = false;\r\n\r\n    //#endregion\r\n\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.Submit\" = \"Action.Submit\";\r\n\r\n    private _isPrepared: boolean = false;\r\n    private _processedData?: PropertyBag;\r\n\r\n    protected internalGetReferencedInputs(allInputs: Input[]): Dictionary<Input> {\r\n        let result: Dictionary<Input> = {};\r\n\r\n        for (let input of allInputs) {\r\n            if (input.id) {\r\n                result[input.id] = input;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected internalPrepareForExecution(inputs: Dictionary<Input> | undefined) {\r\n        if (this._originalData) {\r\n            this._processedData = JSON.parse(JSON.stringify(this._originalData));\r\n        }\r\n        else {\r\n            this._processedData = {};\r\n        }\r\n\r\n        if (this._processedData && inputs) {\r\n            for (let key of Object.keys(inputs)) {\r\n                let input = inputs[key];\r\n\r\n                if (input.id) {\r\n                    this._processedData[input.id] = input.value;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._isPrepared = true;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return SubmitAction.JsonTypeName;\r\n    }\r\n\r\n    get ignoreInputValidation(): boolean {\r\n        return this._ignoreInputValidation;\r\n    }\r\n\r\n    set ignoreInputValidation(value: boolean) {\r\n        this._ignoreInputValidation = value;\r\n    }\r\n\r\n    get data(): object | undefined {\r\n        return this._isPrepared ? this._processedData : this._originalData;\r\n    }\r\n\r\n    set data(value: object | undefined) {\r\n        this._originalData = value;\r\n        this._isPrepared = false;\r\n    }\r\n}\r\n\r\nexport class OpenUrlAction extends Action {\r\n    //#region Schema\r\n\r\n    static readonly urlProperty = new StringProperty(Versions.v1_0, \"url\");\r\n\r\n    @property(OpenUrlAction.urlProperty)\r\n    url?: string;\r\n\r\n    //#endregion\r\n\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.OpenUrl\" = \"Action.OpenUrl\";\r\n\r\n    getJsonTypeName(): string {\r\n        return OpenUrlAction.JsonTypeName;\r\n    }\r\n\r\n    getAriaRole() : string {\r\n        return \"link\";\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (!this.url) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                \"An Action.OpenUrl must have its url property set.\");\r\n        }\r\n    }\r\n\r\n    getHref(): string | undefined {\r\n        return this.url;\r\n    }\r\n}\r\n\r\nexport class ToggleVisibilityAction extends Action {\r\n    //#region Schema\r\n\r\n    static readonly targetElementsProperty = new CustomProperty<PropertyBag>(\r\n        Versions.v1_2,\r\n        \"targetElements\",\r\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\r\n            let result: PropertyBag = {}\r\n\r\n            if (Array.isArray(source[property.name])) {\r\n                for (let item of source[property.name]) {\r\n                    if (typeof item === \"string\") {\r\n                        result[item] = undefined;\r\n                    }\r\n                    else if (typeof item === \"object\") {\r\n                        let elementId = item[\"elementId\"];\r\n\r\n                        if (typeof elementId === \"string\") {\r\n                            result[elementId] = Utils.parseBool(item[\"isVisible\"]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        },\r\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: PropertyBag, context: BaseSerializationContext) => {\r\n            let targetElements: any[] = [];\r\n\r\n            for (let id of Object.keys(value)) {\r\n                if (typeof value[id] === \"boolean\") {\r\n                    targetElements.push(\r\n                        {\r\n                            elementId: id,\r\n                            isVisible: value[id]\r\n                        }\r\n                    );\r\n                }\r\n                else {\r\n                    targetElements.push(id);\r\n                }\r\n            }\r\n\r\n            context.serializeArray(target, property.name, targetElements);\r\n        },\r\n        {},\r\n        (sender: SerializableObject) => { return {}; });\r\n\r\n    @property(ToggleVisibilityAction.targetElementsProperty)\r\n    targetElements: { [key: string]: any } = {};\r\n\r\n    //#endregion\r\n\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.ToggleVisibility\" = \"Action.ToggleVisibility\";\r\n\r\n    getJsonTypeName(): string {\r\n        return ToggleVisibilityAction.JsonTypeName;\r\n    }\r\n\r\n    execute() {\r\n        if (this.parent) {\r\n            for (let elementId of Object.keys(this.targetElements)) {\r\n                let targetElement = this.parent.getRootElement().getElementById(elementId);\r\n\r\n                if (targetElement) {\r\n                    if (typeof this.targetElements[elementId] === \"boolean\") {\r\n                        targetElement.isVisible = this.targetElements[elementId];\r\n                    }\r\n                    else {\r\n                        targetElement.isVisible = !targetElement.isVisible;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addTargetElement(elementId: string, isVisible: boolean | undefined = undefined) {\r\n        this.targetElements[elementId] = isVisible;\r\n    }\r\n\r\n    removeTargetElement(elementId: string) {\r\n        delete this.targetElements[elementId];\r\n    }\r\n}\r\n\r\nclass StringWithSubstitutionProperty extends PropertyDefinition  {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): StringWithSubstitutions {\r\n        let result = new StringWithSubstitutions();\r\n        result.set(Utils.parseString(source[this.name]));\r\n\r\n        return result;\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: StringWithSubstitutions, context: BaseSerializationContext): void {\r\n        context.serializeValue(target, this.name, value.getOriginal());\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string) {\r\n        super(targetVersion, name, undefined, () => { return new StringWithSubstitutions(); });\r\n    }\r\n}\r\n\r\nexport class HttpHeader extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly nameProperty = new StringProperty(Versions.v1_0, \"name\");\r\n    static readonly valueProperty = new StringWithSubstitutionProperty(Versions.v1_0, \"value\");\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"HttpHeader\";\r\n    }\r\n\r\n    @property(HttpHeader.nameProperty)\r\n    name: string;\r\n\r\n    @property(HttpHeader.valueProperty)\r\n    private _value: StringWithSubstitutions;\r\n\r\n    //#endregion\r\n\r\n    constructor(name: string = \"\", value: string = \"\") {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n\r\n    getReferencedInputs(inputs: Input[], referencedInputs: Dictionary<Input>) {\r\n        this._value.getReferencedInputs(inputs, referencedInputs);\r\n    }\r\n\r\n    prepareForExecution(inputs: Dictionary<Input>) {\r\n        this._value.substituteInputValues(inputs, ContentTypes.applicationXWwwFormUrlencoded);\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        return this._value.get();\r\n    }\r\n\r\n    set value(newValue: string | undefined) {\r\n        this._value.set(newValue);\r\n    }\r\n}\r\n\r\nexport class HttpAction extends Action {\r\n    //#region Schema\r\n\r\n    static readonly urlProperty = new StringWithSubstitutionProperty(Versions.v1_0, \"url\");\r\n    static readonly bodyProperty = new StringWithSubstitutionProperty(Versions.v1_0, \"body\");\r\n    static readonly methodProperty = new StringProperty(Versions.v1_0, \"method\");\r\n    static readonly headersProperty = new SerializableObjectCollectionProperty(Versions.v1_0, \"headers\", HttpHeader);\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        schema.add(Action.ignoreInputValidationProperty);\r\n    }\r\n\r\n    @property(HttpAction.urlProperty)\r\n    private _url: StringWithSubstitutions;\r\n\r\n    @property(HttpAction.bodyProperty)\r\n    private _body: StringWithSubstitutions;\r\n\r\n    @property(HttpAction.methodProperty)\r\n    method?: string;\r\n\r\n    @property(HttpAction.headersProperty)\r\n    headers: HttpHeader[];\r\n\r\n    @property(Action.ignoreInputValidationProperty)\r\n    private _ignoreInputValidation: boolean = false;\r\n\r\n    //#endregion\r\n\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.Http\" = \"Action.Http\";\r\n\r\n    protected internalGetReferencedInputs(allInputs: Input[]): Dictionary<Input> {\r\n        let result: Dictionary<Input> = {};\r\n\r\n        this._url.getReferencedInputs(allInputs, result);\r\n\r\n        for (let header of this.headers) {\r\n            header.getReferencedInputs(allInputs, result);\r\n        }\r\n\r\n        this._body.getReferencedInputs(allInputs, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    protected internalPrepareForExecution(inputs: Dictionary<Input> | undefined) {\r\n        if (inputs) {\r\n            this._url.substituteInputValues(inputs, ContentTypes.applicationXWwwFormUrlencoded);\r\n\r\n            let contentType = ContentTypes.applicationJson;\r\n\r\n            for (let header of this.headers) {\r\n                header.prepareForExecution(inputs);\r\n\r\n                if (header.name && header.name.toLowerCase() == \"content-type\") {\r\n                    contentType = <string>header.value;\r\n                }\r\n            }\r\n\r\n            this._body.substituteInputValues(inputs, contentType);\r\n        }\r\n    };\r\n\r\n    getJsonTypeName(): string {\r\n        return HttpAction.JsonTypeName;\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (!this.url) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                \"An Action.Http must have its url property set.\");\r\n        }\r\n\r\n        if (this.headers.length > 0) {\r\n            for (let header of this.headers) {\r\n                if (!header.name) {\r\n                    context.addFailure(\r\n                        this,\r\n                        Enums.ValidationEvent.PropertyCantBeNull,\r\n                        \"All headers of an Action.Http must have their name and value properties set.\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get ignoreInputValidation(): boolean {\r\n        return this._ignoreInputValidation;\r\n    }\r\n\r\n    set ignoreInputValidation(value: boolean) {\r\n        this._ignoreInputValidation = value;\r\n    }\r\n\r\n    get url(): string | undefined {\r\n        return this._url.get();\r\n    }\r\n\r\n    set url(value: string | undefined) {\r\n        this._url.set(value);\r\n    }\r\n\r\n    get body(): string | undefined {\r\n        return this._body.get();\r\n    }\r\n\r\n    set body(value: string | undefined) {\r\n        this._body.set(value);\r\n    }\r\n}\r\n\r\nexport class ShowCardAction extends Action {\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.ShowCard\" = \"Action.ShowCard\";\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        let jsonCard = source[\"card\"];\r\n\r\n        if (jsonCard) {\r\n            this.card.parse(jsonCard, context);\r\n        }\r\n        else {\r\n            context.logParseEvent(\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                \"An Action.ShowCard must have its \\\"card\\\" property set to a valid AdaptiveCard object.\",\r\n                this);\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        if (this.card) {\r\n            context.serializeValue(target, \"card\", this.card.toJSON(context));\r\n        }\r\n    }\r\n\r\n    protected addCssClasses(element: HTMLElement) {\r\n        super.addCssClasses(element);\r\n\r\n        if (this.parent) {\r\n            element.classList.add(this.parent.hostConfig.makeCssClassName(\"expandable\"));\r\n        }\r\n    }\r\n\r\n    readonly card: AdaptiveCard = new InlineAdaptiveCard();\r\n\r\n    getJsonTypeName(): string {\r\n        return ShowCardAction.JsonTypeName;\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        this.card.internalValidateProperties(context);\r\n    }\r\n\r\n    updateActionButtonCssStyle(actionButtonElement: HTMLElement, buttonState: ActionButtonState = ActionButtonState.Normal): void {\r\n        super.updateActionButtonCssStyle(actionButtonElement);\r\n\r\n        if (this.parent) {\r\n            actionButtonElement.classList.add(this.parent.hostConfig.makeCssClassName(\"expandable\"));\r\n            actionButtonElement.setAttribute(\"aria-expanded\", (buttonState === ActionButtonState.Expanded).toString());\r\n        }\r\n    }\r\n\r\n    setParent(value: CardElement) {\r\n        super.setParent(value);\r\n\r\n        this.card.setParent(value);\r\n    }\r\n\r\n    getAllInputs(): Input[] {\r\n        return this.card.getAllInputs();\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return super.getResourceInformation().concat(this.card.getResourceInformation());\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        let result = super.getActionById(id);\r\n\r\n        if (!result) {\r\n            result = this.card.getActionById(id);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nclass ActionCollection {\r\n    private _owner: CardElement;\r\n    private _actionCardContainer: HTMLDivElement;\r\n    private _expandedAction?: ShowCardAction;\r\n    private _renderedActionCount: number = 0;\r\n    private _actionCard?: HTMLElement;\r\n\r\n    private isActionAllowed(action: Action): boolean {\r\n        let forbiddenTypes = this._owner.getForbiddenActionTypes();\r\n\r\n        if (forbiddenTypes) {\r\n            for (let forbiddenType of forbiddenTypes) {\r\n                if (action.constructor === forbiddenType) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private refreshContainer() {\r\n        this._actionCardContainer.innerHTML = \"\";\r\n\r\n        if (!this._actionCard) {\r\n            this._actionCardContainer.style.marginTop = \"0px\";\r\n\r\n            return;\r\n        }\r\n\r\n        this._actionCardContainer.style.marginTop = this._renderedActionCount > 0 ? this._owner.hostConfig.actions.showCard.inlineTopMargin + \"px\" : \"0px\";\r\n\r\n        let padding = this._owner.getEffectivePadding();\r\n\r\n        this._owner.getImmediateSurroundingPadding(padding);\r\n\r\n        let physicalPadding = this._owner.hostConfig.paddingDefinitionToSpacingDefinition(padding);\r\n\r\n        if (this._actionCard) {\r\n            this._actionCard.style.paddingLeft = physicalPadding.left + \"px\";\r\n            this._actionCard.style.paddingRight = physicalPadding.right + \"px\";\r\n\r\n            this._actionCard.style.marginLeft = \"-\" + physicalPadding.left + \"px\";\r\n            this._actionCard.style.marginRight = \"-\" + physicalPadding.right + \"px\";\r\n\r\n            if (physicalPadding.bottom != 0 && !this._owner.isDesignMode()) {\r\n                this._actionCard.style.paddingBottom = physicalPadding.bottom + \"px\";\r\n                this._actionCard.style.marginBottom = \"-\" + physicalPadding.bottom + \"px\";\r\n            }\r\n\r\n            Utils.appendChild(this._actionCardContainer, this._actionCard);\r\n        }\r\n    }\r\n\r\n    private layoutChanged() {\r\n        this._owner.getRootElement().updateLayout();\r\n    }\r\n\r\n    private hideActionCard() {\r\n        let previouslyExpandedAction = this._expandedAction;\r\n\r\n        this._expandedAction = undefined;\r\n        this._actionCard = undefined;\r\n\r\n        this.refreshContainer();\r\n\r\n        if (previouslyExpandedAction) {\r\n            this.layoutChanged();\r\n\r\n            raiseInlineCardExpandedEvent(previouslyExpandedAction, false);\r\n        }\r\n    }\r\n\r\n    private showActionCard(action: ShowCardAction, suppressStyle: boolean = false, raiseEvent: boolean = true) {\r\n        (<InlineAdaptiveCard>action.card).suppressStyle = suppressStyle;\r\n\r\n        // Always re-render a ShowCard action in design mode; reuse already rendered ShowCard (if available) otherwise\r\n        let renderedCard = action.card.renderedElement && !this._owner.isDesignMode() ? action.card.renderedElement : action.card.render();\r\n\r\n        this._actionCard = renderedCard;\r\n        this._expandedAction = action;\r\n\r\n        this.refreshContainer();\r\n\r\n        if (raiseEvent) {\r\n            this.layoutChanged();\r\n\r\n            raiseInlineCardExpandedEvent(action, true);\r\n        }\r\n    }\r\n\r\n    private collapseExpandedAction() {\r\n        for (let button of this.buttons) {\r\n            button.state = ActionButtonState.Normal;\r\n        }\r\n\r\n        this.hideActionCard();\r\n    }\r\n\r\n    private expandShowCardAction(action: ShowCardAction, raiseEvent: boolean) {\r\n        for (let button of this.buttons) {\r\n            if (button.action !== action) {\r\n                button.state = ActionButtonState.Subdued;\r\n            }\r\n            else {\r\n                button.state = ActionButtonState.Expanded;\r\n            }\r\n        }\r\n\r\n        this.showActionCard(\r\n            action,\r\n            !(this._owner.isAtTheVeryLeft() && this._owner.isAtTheVeryRight()),\r\n            raiseEvent);\r\n    }\r\n\r\n    private actionClicked(actionButton: ActionButton) {\r\n        if (!(actionButton.action instanceof ShowCardAction)) {\r\n            for (let button of this.buttons) {\r\n                button.state = ActionButtonState.Normal;\r\n            }\r\n\r\n            this.hideActionCard();\r\n\r\n            actionButton.action.execute();\r\n        }\r\n        else {\r\n            if (this._owner.hostConfig.actions.showCard.actionMode === Enums.ShowCardActionMode.Popup) {\r\n                actionButton.action.execute();\r\n            }\r\n            else if (actionButton.action === this._expandedAction) {\r\n                this.collapseExpandedAction();\r\n            }\r\n            else {\r\n                this.expandShowCardAction(actionButton.action, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getParentContainer(): Container | undefined {\r\n        if (this._owner instanceof Container) {\r\n            return this._owner;\r\n        }\r\n        else {\r\n            return this._owner.getParentContainer();\r\n        }\r\n    }\r\n\r\n    private findActionButton(action: Action): ActionButton | undefined {\r\n        for (let actionButton of this.buttons) {\r\n            if (actionButton.action == action) {\r\n                return actionButton;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    items: Action[] = [];\r\n    buttons: ActionButton[] = [];\r\n\r\n    constructor(owner: CardElement) {\r\n        this._owner = owner;\r\n    }\r\n\r\n    parse(source: any, context: SerializationContext) {\r\n        this.clear();\r\n\r\n        if (Array.isArray(source)) {\r\n            for (let jsonAction of source) {\r\n                let action = context.parseAction(\r\n                    this._owner,\r\n                    jsonAction,\r\n                    [],\r\n                    !this._owner.isDesignMode());\r\n\r\n                if (action) {\r\n                    this.addAction(action);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    toJSON(target: PropertyBag, propertyName: string, context: SerializationContext): any {\r\n        context.serializeArray(target, propertyName, this.items);\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        let result: Action | undefined = undefined;\r\n\r\n        for (let item of this.items) {\r\n            result = item.getActionById(id);\r\n\r\n            if (result) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    validateProperties(context: ValidationResults) {\r\n        if (this._owner.hostConfig.actions.maxActions && this.items.length > this._owner.hostConfig.actions.maxActions) {\r\n            context.addFailure(\r\n                this._owner,\r\n                Enums.ValidationEvent.TooManyActions,\r\n                \"A maximum of \" + this._owner.hostConfig.actions.maxActions + \" actions are allowed.\");\r\n        }\r\n\r\n        if (this.items.length > 0 && !this._owner.hostConfig.supportsInteractivity) {\r\n            context.addFailure(\r\n                this._owner,\r\n                Enums.ValidationEvent.InteractivityNotAllowed,\r\n                \"Interactivity is not allowed.\");\r\n        }\r\n\r\n        for (let item of this.items) {\r\n            if (!this.isActionAllowed(item)) {\r\n                context.addFailure(\r\n                    this._owner,\r\n                    Enums.ValidationEvent.ActionTypeNotAllowed,\r\n                    \"Actions of type \" + item.getJsonTypeName() + \" are not allowed in this context.\");\r\n            }\r\n\r\n            item.internalValidateProperties(context);\r\n        }\r\n    }\r\n\r\n    render(orientation: Enums.Orientation, isDesignMode: boolean): HTMLElement | undefined {\r\n        // Cache hostConfig for better perf\r\n        let hostConfig = this._owner.hostConfig;\r\n\r\n        if (!hostConfig.supportsInteractivity) {\r\n            return undefined;\r\n        }\r\n\r\n        let element = document.createElement(\"div\");\r\n        let maxActions = hostConfig.actions.maxActions ? Math.min(hostConfig.actions.maxActions, this.items.length) : this.items.length;\r\n\r\n        this._actionCardContainer = document.createElement(\"div\");\r\n        this._renderedActionCount = 0;\r\n\r\n        if (hostConfig.actions.preExpandSingleShowCardAction && maxActions == 1 && this.items[0] instanceof ShowCardAction && this.isActionAllowed(this.items[0])) {\r\n            this.showActionCard(<ShowCardAction>this.items[0], true);\r\n            this._renderedActionCount = 1;\r\n        }\r\n        else {\r\n            let buttonStrip = document.createElement(\"div\");\r\n            buttonStrip.className = hostConfig.makeCssClassName(\"ac-actionSet\");\r\n            buttonStrip.style.display = \"flex\";\r\n            buttonStrip.setAttribute(\"role\", \"group\");\r\n\r\n            if (orientation == Enums.Orientation.Horizontal) {\r\n                buttonStrip.style.flexDirection = \"row\";\r\n\r\n                if (this._owner.horizontalAlignment && hostConfig.actions.actionAlignment != Enums.ActionAlignment.Stretch) {\r\n                    switch (this._owner.horizontalAlignment) {\r\n                        case Enums.HorizontalAlignment.Center:\r\n                            buttonStrip.style.justifyContent = \"center\";\r\n                            break;\r\n                        case Enums.HorizontalAlignment.Right:\r\n                            buttonStrip.style.justifyContent = \"flex-end\";\r\n                            break;\r\n                        default:\r\n                            buttonStrip.style.justifyContent = \"flex-start\";\r\n                            break;\r\n                    }\r\n                }\r\n                else {\r\n                    switch (hostConfig.actions.actionAlignment) {\r\n                        case Enums.ActionAlignment.Center:\r\n                            buttonStrip.style.justifyContent = \"center\";\r\n                            break;\r\n                        case Enums.ActionAlignment.Right:\r\n                            buttonStrip.style.justifyContent = \"flex-end\";\r\n                            break;\r\n                        default:\r\n                            buttonStrip.style.justifyContent = \"flex-start\";\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                buttonStrip.style.flexDirection = \"column\";\r\n\r\n                if (this._owner.horizontalAlignment && hostConfig.actions.actionAlignment != Enums.ActionAlignment.Stretch) {\r\n                    switch (this._owner.horizontalAlignment) {\r\n                        case Enums.HorizontalAlignment.Center:\r\n                            buttonStrip.style.alignItems = \"center\";\r\n                            break;\r\n                        case Enums.HorizontalAlignment.Right:\r\n                            buttonStrip.style.alignItems = \"flex-end\";\r\n                            break;\r\n                        default:\r\n                            buttonStrip.style.alignItems = \"flex-start\";\r\n                            break;\r\n                    }\r\n                }\r\n                else {\r\n                    switch (hostConfig.actions.actionAlignment) {\r\n                        case Enums.ActionAlignment.Center:\r\n                            buttonStrip.style.alignItems = \"center\";\r\n                            break;\r\n                        case Enums.ActionAlignment.Right:\r\n                            buttonStrip.style.alignItems = \"flex-end\";\r\n                            break;\r\n                        case Enums.ActionAlignment.Stretch:\r\n                            buttonStrip.style.alignItems = \"stretch\";\r\n                            break;\r\n                        default:\r\n                            buttonStrip.style.alignItems = \"flex-start\";\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let parentContainer = this.getParentContainer();\r\n\r\n            if (parentContainer) {\r\n                let parentContainerStyle = parentContainer.getEffectiveStyle();\r\n\r\n                const allowedActions = this.items.filter(this.isActionAllowed.bind(this));\r\n\r\n                for (let i = 0; i < allowedActions.length; i++) {\r\n                    let actionButton = this.findActionButton(allowedActions[i]);\r\n\r\n                    if (!actionButton) {\r\n                        actionButton = new ActionButton(allowedActions[i], parentContainerStyle);\r\n                        actionButton.onClick = (ab) => { this.actionClicked(ab); };\r\n\r\n                        this.buttons.push(actionButton);\r\n                    }\r\n\r\n                    actionButton.render();\r\n\r\n                    if (actionButton.action.renderedElement) {\r\n                        actionButton.action.renderedElement.setAttribute(\"aria-posinset\", (i + 1).toString());\r\n                        actionButton.action.renderedElement.setAttribute(\"aria-setsize\", allowedActions.length.toString());\r\n                        actionButton.action.renderedElement.setAttribute(\"role\", \"listitem\");\r\n\r\n                        if (hostConfig.actions.actionsOrientation == Enums.Orientation.Horizontal && hostConfig.actions.actionAlignment == Enums.ActionAlignment.Stretch) {\r\n                            actionButton.action.renderedElement.style.flex = \"0 1 100%\";\r\n                        }\r\n                        else {\r\n                            actionButton.action.renderedElement.style.flex = \"0 1 auto\";\r\n                        }\r\n\r\n                        buttonStrip.appendChild(actionButton.action.renderedElement);\r\n\r\n                        this._renderedActionCount++;\r\n\r\n                        if (this._renderedActionCount >= hostConfig.actions.maxActions || i == this.items.length - 1) {\r\n                            break;\r\n                        }\r\n                        else if (hostConfig.actions.buttonSpacing > 0) {\r\n                            let spacer = document.createElement(\"div\");\r\n\r\n                            if (orientation === Enums.Orientation.Horizontal) {\r\n                                spacer.style.flex = \"0 0 auto\";\r\n                                spacer.style.width = hostConfig.actions.buttonSpacing + \"px\";\r\n                            }\r\n                            else {\r\n                                spacer.style.height = hostConfig.actions.buttonSpacing + \"px\";\r\n                            }\r\n\r\n                            Utils.appendChild(buttonStrip, spacer);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            let buttonStripContainer = document.createElement(\"div\");\r\n            buttonStripContainer.style.overflow = \"hidden\";\r\n            buttonStripContainer.appendChild(buttonStrip);\r\n\r\n            Utils.appendChild(element, buttonStripContainer);\r\n        }\r\n\r\n        Utils.appendChild(element, this._actionCardContainer);\r\n\r\n        for (let button of this.buttons) {\r\n            if (button.state == ActionButtonState.Expanded) {\r\n                this.expandShowCardAction(<ShowCardAction>button.action, false);\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        return this._renderedActionCount > 0 ? element : undefined;\r\n    }\r\n\r\n    addAction(action: Action) {\r\n        if (!action) {\r\n            throw new Error(\"The action parameter cannot be null.\");\r\n        }\r\n\r\n        if ((!action.parent || action.parent === this._owner) && this.items.indexOf(action) < 0) {\r\n            this.items.push(action);\r\n\r\n            if (!action.parent) {\r\n                action.setParent(this._owner);\r\n            }\r\n\r\n            action[\"_actionCollection\"] = this;\r\n        }\r\n        else {\r\n            throw new Error(\"The action already belongs to another element.\");\r\n        }\r\n    }\r\n\r\n    removeAction(action: Action): boolean {\r\n        if (this.expandedAction && this._expandedAction == action) {\r\n            this.collapseExpandedAction();\r\n        }\r\n\r\n        let actionIndex = this.items.indexOf(action);\r\n\r\n        if (actionIndex >= 0) {\r\n            this.items.splice(actionIndex, 1);\r\n\r\n            action.setParent(undefined);\r\n\r\n            action[\"_actionCollection\"] = undefined;\r\n\r\n            for (let i = 0; i < this.buttons.length; i++) {\r\n                if (this.buttons[i].action == action) {\r\n                    this.buttons.splice(i, 1);\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    clear() {\r\n        this.items = [];\r\n        this.buttons = [];\r\n\r\n        this._expandedAction = undefined;\r\n        this._renderedActionCount = 0;\r\n    }\r\n\r\n    getAllInputs(): Input[] {\r\n        let result: Input[] = [];\r\n\r\n        for (let action of this.items) {\r\n            result = result.concat(action.getAllInputs());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        let result: IResourceInformation[] = [];\r\n\r\n        for (let action of this.items) {\r\n            result = result.concat(action.getResourceInformation());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get renderedActionCount(): number {\r\n        return this._renderedActionCount;\r\n    }\r\n\r\n    get expandedAction(): ShowCardAction | undefined {\r\n        return this._expandedAction;\r\n    }\r\n}\r\n\r\nexport class ActionSet extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly orientationProperty = new EnumProperty(Versions.v1_1, \"orientation\", Enums.Orientation);\r\n\r\n    @property(ActionSet.orientationProperty)\r\n    orientation?: Enums.Orientation;\r\n\r\n    //#endregion\r\n\r\n    private _actionCollection: ActionCollection;\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this._actionCollection.parse(source[\"actions\"], context);\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        this._actionCollection.toJSON(target, \"actions\", context);\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        return this._actionCollection.render(this.orientation !== undefined ? this.orientation : this.hostConfig.actions.actionsOrientation, this.isDesignMode());\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this._actionCollection = new ActionCollection(this);\r\n    }\r\n\r\n    isBleedingAtBottom(): boolean {\r\n        if (this._actionCollection.renderedActionCount == 0) {\r\n            return super.isBleedingAtBottom();\r\n        }\r\n        else {\r\n            if (this._actionCollection.items.length == 1) {\r\n                return this._actionCollection.expandedAction !== undefined && !this.hostConfig.actions.preExpandSingleShowCardAction;\r\n            }\r\n            else {\r\n                return this._actionCollection.expandedAction !== undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"ActionSet\";\r\n    }\r\n\r\n    getActionCount(): number {\r\n        return this._actionCollection.items.length;\r\n    }\r\n\r\n    getActionAt(index: number): Action | undefined {\r\n        if (index >= 0 && index < this.getActionCount()) {\r\n            return this._actionCollection.items[index];\r\n        }\r\n        else {\r\n            return super.getActionAt(index);\r\n        }\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        this._actionCollection.validateProperties(context);\r\n    }\r\n\r\n    addAction(action: Action) {\r\n        this._actionCollection.addAction(action);\r\n    }\r\n\r\n    getAllInputs(): Input[] {\r\n        return this._actionCollection.getAllInputs();\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return this._actionCollection.getResourceInformation();\r\n    }\r\n\r\n    get isInteractive(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport abstract class StylableCardElementContainer extends CardElementContainer {\r\n    //#region Schema\r\n\r\n    static readonly styleProperty = new ValueSetProperty(\r\n        Versions.v1_0,\r\n        \"style\",\r\n        [\r\n            { value: Enums.ContainerStyle.Default },\r\n            { value: Enums.ContainerStyle.Emphasis },\r\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Accent },\r\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Good },\r\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Attention },\r\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Warning }\r\n        ]);\r\n    static readonly bleedProperty = new BoolProperty(Versions.v1_2, \"bleed\", false);\r\n    static readonly minHeightProperty = new PixelSizeProperty(Versions.v1_2, \"minHeight\");\r\n\r\n    @property(StylableCardElementContainer.styleProperty)\r\n    get style(): string | undefined {\r\n        if (this.allowCustomStyle) {\r\n            let style = this.getValue(StylableCardElementContainer.styleProperty);\r\n\r\n            if (style && this.hostConfig.containerStyles.getStyleByName(style)) {\r\n                return style;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    set style(value: string | undefined) {\r\n        this.setValue(StylableCardElementContainer.styleProperty, value);\r\n    }\r\n\r\n    @property(StylableCardElementContainer.bleedProperty)\r\n    private _bleed: boolean = false;\r\n\r\n    @property(StylableCardElementContainer.minHeightProperty)\r\n    minPixelHeight?: number;\r\n\r\n    //#endregion\r\n\r\n    protected adjustRenderedElementSize(renderedElement: HTMLElement) {\r\n        super.adjustRenderedElementSize(renderedElement);\r\n\r\n        if (this.minPixelHeight) {\r\n            renderedElement.style.minHeight = this.minPixelHeight + \"px\";\r\n        }\r\n    }\r\n\r\n    protected applyBackground() {\r\n        if (this.renderedElement) {\r\n            let styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.style, this.hostConfig.containerStyles.getStyleByName(this.defaultStyle));\r\n\r\n            if (styleDefinition.backgroundColor) {\r\n                this.renderedElement.style.backgroundColor = <string>Utils.stringToCssColor(styleDefinition.backgroundColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected applyPadding() {\r\n        super.applyPadding();\r\n\r\n        if (!this.renderedElement) {\r\n            return;\r\n        }\r\n\r\n        let physicalPadding = new SpacingDefinition();\r\n\r\n        if (this.getEffectivePadding()) {\r\n            physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(this.getEffectivePadding());\r\n        }\r\n\r\n        this.renderedElement.style.paddingTop = physicalPadding.top + \"px\";\r\n        this.renderedElement.style.paddingRight = physicalPadding.right + \"px\";\r\n        this.renderedElement.style.paddingBottom = physicalPadding.bottom + \"px\";\r\n        this.renderedElement.style.paddingLeft = physicalPadding.left + \"px\";\r\n\r\n        if (this.isBleeding()) {\r\n            // Bleed into the first parent that does have padding\r\n            let padding = new PaddingDefinition();\r\n\r\n            this.getImmediateSurroundingPadding(padding);\r\n\r\n            let surroundingPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(padding);\r\n\r\n            this.renderedElement.style.marginRight = \"-\" + surroundingPadding.right + \"px\";\r\n            this.renderedElement.style.marginLeft = \"-\" + surroundingPadding.left + \"px\";\r\n\r\n            if (!this.isDesignMode()) {\r\n                this.renderedElement.style.marginTop = \"-\" + surroundingPadding.top + \"px\";\r\n                this.renderedElement.style.marginBottom = \"-\" + surroundingPadding.bottom + \"px\";\r\n            }\r\n\r\n            if (this.separatorElement && this.separatorOrientation == Enums.Orientation.Horizontal) {\r\n                this.separatorElement.style.marginLeft = \"-\" + surroundingPadding.left + \"px\";\r\n                this.separatorElement.style.marginRight = \"-\" + surroundingPadding.right + \"px\";\r\n            }\r\n        }\r\n        else {\r\n            this.renderedElement.style.marginRight = \"0\";\r\n            this.renderedElement.style.marginLeft = \"0\";\r\n            this.renderedElement.style.marginTop = \"0\";\r\n            this.renderedElement.style.marginBottom = \"0\";\r\n\r\n            if (this.separatorElement) {\r\n                this.separatorElement.style.marginRight = \"0\";\r\n                this.separatorElement.style.marginLeft = \"0\";\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getHasBackground(): boolean {\r\n        let currentElement: CardElement | undefined = this.parent;\r\n\r\n        while (currentElement) {\r\n            let currentElementHasBackgroundImage = currentElement instanceof Container ? currentElement.backgroundImage.isValid() : false;\r\n\r\n            if (currentElement instanceof StylableCardElementContainer) {\r\n                if (this.hasExplicitStyle && (currentElement.getEffectiveStyle() != this.getEffectiveStyle() || currentElementHasBackgroundImage)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            currentElement = currentElement.parent;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected getDefaultPadding(): PaddingDefinition {\r\n        return this.getHasBackground() ?\r\n            new PaddingDefinition(\r\n                Enums.Spacing.Padding,\r\n                Enums.Spacing.Padding,\r\n                Enums.Spacing.Padding,\r\n                Enums.Spacing.Padding) : super.getDefaultPadding();\r\n    }\r\n\r\n    protected getHasExpandedAction(): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected getBleed(): boolean {\r\n        return this._bleed;\r\n    }\r\n\r\n    protected setBleed(value: boolean) {\r\n        this._bleed = value;\r\n    }\r\n\r\n    protected get renderedActionCount(): number {\r\n        return 0;\r\n    }\r\n\r\n    protected get hasExplicitStyle(): boolean {\r\n        return this.getValue(StylableCardElementContainer.styleProperty) !== undefined;\r\n    }\r\n\r\n    protected get allowCustomStyle(): boolean {\r\n        return true;\r\n    }\r\n\r\n    isBleeding(): boolean {\r\n\t\treturn (this.getHasBackground() || this.hostConfig.alwaysAllowBleed) && this.getBleed();\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        let explicitStyle = this.getValue(StylableCardElementContainer.styleProperty);\r\n\r\n        if (explicitStyle !== undefined) {\r\n            let styleDefinition = this.hostConfig.containerStyles.getStyleByName(explicitStyle);\r\n\r\n            if (!styleDefinition) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    \"Unknown container style: \" + explicitStyle);\r\n            }\r\n        }\r\n    }\r\n\r\n    render(): HTMLElement | undefined {\r\n        let renderedElement = super.render();\r\n\r\n        if (renderedElement && this.getHasBackground()) {\r\n            this.applyBackground();\r\n        }\r\n\r\n        return renderedElement;\r\n    }\r\n\r\n    getEffectiveStyle(): string {\r\n        let effectiveStyle = this.style;\r\n\r\n        return effectiveStyle ? effectiveStyle : super.getEffectiveStyle();\r\n    }\r\n}\r\n\r\nexport class BackgroundImage extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly urlProperty = new StringProperty(Versions.v1_0, \"url\");\r\n    static readonly fillModeProperty = new EnumProperty(Versions.v1_2, \"fillMode\", Enums.FillMode, Enums.FillMode.Cover);\r\n    static readonly horizontalAlignmentProperty = new EnumProperty(Versions.v1_2, \"horizontalAlignment\", Enums.HorizontalAlignment, Enums.HorizontalAlignment.Left);\r\n    static readonly verticalAlignmentProperty = new EnumProperty(Versions.v1_2, \"verticalAlignment\", Enums.VerticalAlignment, Enums.VerticalAlignment.Top);\r\n\r\n    @property(BackgroundImage.urlProperty)\r\n    url?: string;\r\n\r\n    @property(BackgroundImage.fillModeProperty)\r\n    fillMode: Enums.FillMode;\r\n\r\n    @property(BackgroundImage.horizontalAlignmentProperty)\r\n    horizontalAlignment: Enums.HorizontalAlignment;\r\n\r\n    @property(BackgroundImage.verticalAlignmentProperty)\r\n    verticalAlignment: Enums.VerticalAlignment;\r\n\r\n    //#endregion\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"BackgroundImage\";\r\n    }\r\n\r\n    protected internalParse(source: any, context: BaseSerializationContext) {\r\n        if (typeof source === \"string\") {\r\n            this.resetDefaultValues();\r\n            this.url = source;\r\n        }\r\n        else {\r\n            return super.internalParse(source, context);\r\n        }\r\n    }\r\n\r\n    apply(element: CardElement) {\r\n        if (this.url && element.renderedElement) {\r\n            element.renderedElement.style.backgroundImage = \"url('\" + element.preProcessPropertyValue(BackgroundImage.urlProperty, this.url) + \"')\";\r\n\r\n            switch (this.fillMode) {\r\n                case Enums.FillMode.Repeat:\r\n                    element.renderedElement.style.backgroundRepeat = \"repeat\";\r\n                    break;\r\n                case Enums.FillMode.RepeatHorizontally:\r\n                    element.renderedElement.style.backgroundRepeat = \"repeat-x\";\r\n                    break;\r\n                case Enums.FillMode.RepeatVertically:\r\n                    element.renderedElement.style.backgroundRepeat = \"repeat-y\";\r\n                    break;\r\n                case Enums.FillMode.Cover:\r\n                default:\r\n                    element.renderedElement.style.backgroundRepeat = \"no-repeat\";\r\n                    element.renderedElement.style.backgroundSize = \"cover\";\r\n                    break;\r\n            }\r\n\r\n            switch (this.horizontalAlignment) {\r\n                case Enums.HorizontalAlignment.Center:\r\n                    element.renderedElement.style.backgroundPositionX = \"center\";\r\n                    break;\r\n                case Enums.HorizontalAlignment.Right:\r\n                    element.renderedElement.style.backgroundPositionX = \"right\";\r\n                    break;\r\n            }\r\n\r\n            switch (this.verticalAlignment) {\r\n                case Enums.VerticalAlignment.Center:\r\n                    element.renderedElement.style.backgroundPositionY = \"center\";\r\n                    break;\r\n                case Enums.VerticalAlignment.Bottom:\r\n                    element.renderedElement.style.backgroundPositionY = \"bottom\";\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    isValid(): boolean {\r\n        return this.url ? true : false;\r\n    }\r\n}\r\n\r\nexport class Container extends StylableCardElementContainer {\r\n    //#region Schema\r\n\r\n    static readonly backgroundImageProperty = new SerializableObjectProperty(\r\n        Versions.v1_0,\r\n        \"backgroundImage\",\r\n        BackgroundImage);\r\n    static readonly verticalContentAlignmentProperty = new EnumProperty(Versions.v1_1, \"verticalContentAlignment\", Enums.VerticalAlignment, Enums.VerticalAlignment.Top);\r\n    static readonly rtlProperty = new BoolProperty(Versions.v1_0, \"rtl\");\r\n\r\n    @property(Container.backgroundImageProperty)\r\n    get backgroundImage(): BackgroundImage {\r\n        return this.getValue(Container.backgroundImageProperty);\r\n    }\r\n\r\n    @property(Container.verticalContentAlignmentProperty)\r\n    verticalContentAlignment: Enums.VerticalAlignment = Enums.VerticalAlignment.Top;\r\n\r\n    @property(Container.rtlProperty)\r\n    rtl?: boolean;\r\n\r\n    //#endregion\r\n\r\n    private _items: CardElement[] = [];\r\n    private _renderedItems: CardElement[] = [];\r\n\r\n    private insertItemAt(\r\n        item: CardElement,\r\n        index: number,\r\n        forceInsert: boolean) {\r\n        if (!item.parent || forceInsert) {\r\n            if (item.isStandalone) {\r\n                if (index < 0 || index >= this._items.length) {\r\n                    this._items.push(item);\r\n                }\r\n                else {\r\n                    this._items.splice(index, 0, item);\r\n                }\r\n\r\n                item.setParent(this);\r\n            }\r\n            else {\r\n                throw new Error(\"Elements of type \" + item.getJsonTypeName() + \" cannot be used as standalone elements.\");\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"The element already belongs to another container.\")\r\n        }\r\n    }\r\n\r\n    protected supportsExcplitiHeight(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected getItemsCollectionPropertyName(): string {\r\n        return \"items\";\r\n    }\r\n\r\n    protected applyBackground() {\r\n        if (this.backgroundImage.isValid() && this.renderedElement) {\r\n            this.backgroundImage.apply(this);\r\n        }\r\n\r\n        super.applyBackground();\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._renderedItems = [];\r\n\r\n        // Cache hostConfig to avoid walking the parent hierarchy several times\r\n        let hostConfig = this.hostConfig;\r\n\r\n        let element = document.createElement(\"div\");\r\n\r\n        if (this.rtl !== undefined && this.rtl) {\r\n            element.dir = \"rtl\";\r\n        }\r\n\r\n        element.classList.add(hostConfig.makeCssClassName(\"ac-container\"));\r\n        element.style.display = \"flex\";\r\n        element.style.flexDirection = \"column\";\r\n\r\n        if (GlobalSettings.useAdvancedCardBottomTruncation) {\r\n            // Forces the container to be at least as tall as its content.\r\n            //\r\n            // Fixes a quirk in Chrome where, for nested flex elements, the\r\n            // inner element's height would never exceed the outer element's\r\n            // height. This caused overflow truncation to break -- containers\r\n            // would always be measured as not overflowing, since their heights\r\n            // were constrained by their parents as opposed to truly reflecting\r\n            // the height of their content.\r\n            //\r\n            // See the \"Browser Rendering Notes\" section of this answer:\r\n            // https://stackoverflow.com/questions/36247140/why-doesnt-flex-item-shrink-past-content-size\r\n            element.style.minHeight = '-webkit-min-content';\r\n        }\r\n\r\n        switch (this.verticalContentAlignment) {\r\n            case Enums.VerticalAlignment.Center:\r\n                element.style.justifyContent = \"center\";\r\n                break;\r\n            case Enums.VerticalAlignment.Bottom:\r\n                element.style.justifyContent = \"flex-end\";\r\n                break;\r\n            default:\r\n                element.style.justifyContent = \"flex-start\";\r\n                break;\r\n        }\r\n\r\n        if (this._items.length > 0) {\r\n            for (let item of this._items) {\r\n                let renderedItem = this.isElementAllowed(item) ? item.render() : undefined;\r\n\r\n                if (renderedItem) {\r\n                    if (this._renderedItems.length > 0 && item.separatorElement) {\r\n                        item.separatorElement.style.flex = \"0 0 auto\";\r\n\r\n                        Utils.appendChild(element, item.separatorElement);\r\n                    }\r\n\r\n                    Utils.appendChild(element, renderedItem);\r\n\r\n                    this._renderedItems.push(item);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (this.isDesignMode()) {\r\n                let placeholderElement = this.createPlaceholderElement();\r\n                placeholderElement.style.width = \"100%\";\r\n                placeholderElement.style.height = \"100%\";\r\n\r\n                element.appendChild(placeholderElement);\r\n            }\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    protected truncateOverflow(maxHeight: number): boolean {\r\n        if (this.renderedElement) {\r\n            // Add 1 to account for rounding differences between browsers\r\n            let boundary = this.renderedElement.offsetTop + maxHeight + 1;\r\n\r\n            let handleElement = (cardElement: CardElement) => {\r\n                let elt = cardElement.renderedElement;\r\n\r\n                if (elt) {\r\n                    switch (Utils.getFitStatus(elt, boundary)) {\r\n                        case Enums.ContainerFitStatus.FullyInContainer:\r\n                            let sizeChanged = cardElement['resetOverflow']();\r\n                            // If the element's size changed after resetting content,\r\n                            // we have to check if it still fits fully in the card\r\n                            if (sizeChanged) {\r\n                                handleElement(cardElement);\r\n                            }\r\n                            break;\r\n                        case Enums.ContainerFitStatus.Overflowing:\r\n                            let maxHeight = boundary - elt.offsetTop;\r\n                            cardElement['handleOverflow'](maxHeight);\r\n                            break;\r\n                        case Enums.ContainerFitStatus.FullyOutOfContainer:\r\n                            cardElement['handleOverflow'](0);\r\n                            break;\r\n                    }\r\n                }\r\n            };\r\n\r\n            for (let item of this._items) {\r\n                handleElement(item);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected undoOverflowTruncation() {\r\n        for (let item of this._items) {\r\n            item['resetOverflow']();\r\n        }\r\n    }\r\n\r\n    protected getHasBackground(): boolean {\r\n        return this.backgroundImage.isValid() || super.getHasBackground();\r\n    }\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this.clear();\r\n        this.setShouldFallback(false);\r\n\r\n        let jsonItems = source[this.getItemsCollectionPropertyName()];\r\n\r\n        if (Array.isArray(jsonItems)) {\r\n            for (let item of jsonItems) {\r\n                let element = context.parseElement(this, item, !this.isDesignMode());\r\n\r\n                if (element) {\r\n                    this.insertItemAt(element, -1, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        context.serializeArray(target, this.getItemsCollectionPropertyName(), this._items);\r\n    }\r\n\r\n    protected get isSelectable(): boolean {\r\n        return true;\r\n    }\r\n\r\n    getItemCount(): number {\r\n        return this._items.length;\r\n    }\r\n\r\n    getItemAt(index: number): CardElement {\r\n        return this._items[index];\r\n    }\r\n\r\n    getFirstVisibleRenderedItem(): CardElement | undefined {\r\n        if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {\r\n            for (let item of this._renderedItems) {\r\n                if (item.isVisible) {\r\n                    return item;\r\n                }\r\n            };\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getLastVisibleRenderedItem(): CardElement | undefined {\r\n        if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {\r\n            for (let i = this._renderedItems.length - 1; i >= 0; i--) {\r\n                if (this._renderedItems[i].isVisible) {\r\n                    return this._renderedItems[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    isFirstElement(element: CardElement): boolean {\r\n        let designMode = this.isDesignMode();\r\n\r\n        for (let item of this._items) {\r\n            if (item.isVisible || designMode) {\r\n                return item == element;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isLastElement(element: CardElement): boolean {\r\n        let designMode = this.isDesignMode();\r\n\r\n        for (let i = this._items.length - 1; i >= 0; i--) {\r\n            if (this._items[i].isVisible || designMode) {\r\n                return this._items[i] == element;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isRtl(): boolean {\r\n        if (this.rtl !== undefined) {\r\n            return this.rtl;\r\n        }\r\n        else {\r\n            let parentContainer = this.getParentContainer();\r\n\r\n            return parentContainer ? parentContainer.isRtl() : false;\r\n        }\r\n    }\r\n\r\n    isBleedingAtTop(): boolean {\r\n        let firstRenderedItem = this.getFirstVisibleRenderedItem();\r\n\r\n        return this.isBleeding() || (firstRenderedItem ? firstRenderedItem.isBleedingAtTop() : false);\r\n    }\r\n\r\n    isBleedingAtBottom(): boolean {\r\n        let lastRenderedItem = this.getLastVisibleRenderedItem();\r\n\r\n        return this.isBleeding() || (lastRenderedItem ? lastRenderedItem.isBleedingAtBottom() && lastRenderedItem.getEffectiveStyle() == this.getEffectiveStyle() : false);\r\n    }\r\n\r\n    indexOf(cardElement: CardElement): number {\r\n        return this._items.indexOf(cardElement);\r\n    }\r\n\r\n    addItem(item: CardElement) {\r\n        this.insertItemAt(item, -1, false);\r\n    }\r\n\r\n    insertItemBefore(item: CardElement, insertBefore: CardElement) {\r\n        this.insertItemAt(item, this._items.indexOf(insertBefore), false);\r\n    }\r\n\r\n    insertItemAfter(item: CardElement, insertAfter: CardElement) {\r\n        this.insertItemAt(item, this._items.indexOf(insertAfter) + 1, false);\r\n    }\r\n\r\n    removeItem(item: CardElement): boolean {\r\n        let itemIndex = this._items.indexOf(item);\r\n\r\n        if (itemIndex >= 0) {\r\n            this._items.splice(itemIndex, 1);\r\n\r\n            item.setParent(undefined);\r\n\r\n            this.updateLayout();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    clear() {\r\n        this._items = [];\r\n        this._renderedItems = [];\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        let result = super.getResourceInformation();\r\n\r\n        if (this.backgroundImage.isValid()) {\r\n            result.push(\r\n                {\r\n                    url: <string>this.backgroundImage.url,\r\n                    mimeType: \"image\"\r\n                }\r\n            );\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        let result: Action | undefined = super.getActionById(id);\r\n\r\n        if (!result) {\r\n            if (this.selectAction) {\r\n                result = this.selectAction.getActionById(id);\r\n            }\r\n\r\n            if (!result) {\r\n                for (let item of this._items) {\r\n                    result = item.getActionById(id);\r\n\r\n                    if (result) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get padding(): PaddingDefinition | undefined {\r\n        return this.getPadding();\r\n    }\r\n\r\n    set padding(value: PaddingDefinition | undefined) {\r\n        this.setPadding(value);\r\n    }\r\n\r\n    get selectAction(): Action | undefined {\r\n        return this._selectAction;\r\n    }\r\n\r\n    set selectAction(value: Action | undefined) {\r\n        this._selectAction = value;\r\n    }\r\n\r\n    get bleed(): boolean {\r\n        return this.getBleed();\r\n    }\r\n\r\n    set bleed(value: boolean) {\r\n        this.setBleed(value);\r\n    }\r\n}\r\n\r\nexport type ColumnWidth = SizeAndUnit | \"auto\" | \"stretch\";\r\n\r\nexport class Column extends Container {\r\n    //#region Schema\r\n\r\n    static readonly widthProperty = new CustomProperty<ColumnWidth>(\r\n        Versions.v1_0,\r\n        \"width\",\r\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\r\n            let result: ColumnWidth = property.defaultValue;\r\n            let value = source[property.name];\r\n            let invalidWidth = false;\r\n\r\n            if (typeof value === \"number\" && !isNaN(value)) {\r\n                result = new SizeAndUnit(value, Enums.SizeUnit.Weight);\r\n            }\r\n            else if (value === \"auto\" || value === \"stretch\") {\r\n                result = value;\r\n            }\r\n            else if (typeof value === \"string\") {\r\n                try {\r\n                    result = SizeAndUnit.parse(value);\r\n\r\n                    if (result.unit === Enums.SizeUnit.Pixel && property.targetVersion.compareTo(context.targetVersion) > 0) {\r\n                        invalidWidth = true;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    invalidWidth = true;\r\n                }\r\n            }\r\n            else {\r\n                invalidWidth = true;\r\n            }\r\n\r\n            if (invalidWidth) {\r\n                context.logParseEvent(\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    \"Invalid column width:\" + value + \" - defaulting to \\\"auto\\\"\",\r\n                    sender);\r\n\r\n                result = \"auto\";\r\n            }\r\n\r\n            return result;\r\n        },\r\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: ColumnWidth, context: BaseSerializationContext) => {\r\n            if (value instanceof SizeAndUnit) {\r\n                if (value.unit === Enums.SizeUnit.Pixel) {\r\n                    context.serializeValue(target, \"width\", value.physicalSize + \"px\");\r\n                }\r\n                else {\r\n                    context.serializeNumber(target, \"width\", value.physicalSize);\r\n                }\r\n            }\r\n            else {\r\n                context.serializeValue(target, \"width\", value);\r\n            }\r\n        },\r\n        \"stretch\");\r\n\r\n    @property(Column.widthProperty)\r\n    width: ColumnWidth = \"stretch\";\r\n\r\n    //#endregion\r\n\r\n    private _computedWeight: number = 0;\r\n\r\n    protected adjustRenderedElementSize(renderedElement: HTMLElement) {\r\n        const minDesignTimeColumnHeight = 20;\r\n\r\n        if (this.isDesignMode()) {\r\n            renderedElement.style.minWidth = \"20px\";\r\n            renderedElement.style.minHeight = (!this.minPixelHeight ? minDesignTimeColumnHeight : Math.max(this.minPixelHeight, minDesignTimeColumnHeight)) + \"px\";\r\n        }\r\n        else {\r\n            renderedElement.style.minWidth = \"0\";\r\n\r\n            if (this.minPixelHeight) {\r\n                renderedElement.style.minHeight = this.minPixelHeight + \"px\";\r\n            }\r\n        }\r\n\r\n        if (this.width === \"auto\") {\r\n            renderedElement.style.flex = \"0 1 auto\";\r\n        }\r\n        else if (this.width === \"stretch\") {\r\n            renderedElement.style.flex = \"1 1 50px\";\r\n        }\r\n        else if (this.width instanceof SizeAndUnit) {\r\n            if (this.width.unit == Enums.SizeUnit.Pixel) {\r\n                renderedElement.style.flex = \"0 0 auto\";\r\n                renderedElement.style.width = this.width.physicalSize + \"px\";\r\n            }\r\n            else {\r\n                renderedElement.style.flex = \"1 1 \" + (this._computedWeight > 0 ? this._computedWeight : this.width.physicalSize) + \"%\";\r\n            }\r\n        }\r\n    }\r\n\r\n    protected shouldSerialize(context: SerializationContext): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get separatorOrientation(): Enums.Orientation {\r\n        return Enums.Orientation.Vertical;\r\n    }\r\n\r\n    constructor(width: ColumnWidth = \"stretch\") {\r\n        super();\r\n\r\n        this.width = width;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Column\";\r\n    }\r\n\r\n    get hasVisibleSeparator(): boolean {\r\n        if (this.parent && this.parent instanceof ColumnSet) {\r\n            return this.separatorElement !== undefined && !this.parent.isLeftMostElement(this);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    get isStandalone(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class ColumnSet extends StylableCardElementContainer {\r\n    private _columns: Column[] = [];\r\n    private _renderedColumns: Column[];\r\n\r\n    private createColumnInstance(source: any, context: SerializationContext): Column | undefined {\r\n        return context.parseCardObject<Column>(\r\n            this,\r\n            source,\r\n            [], // Forbidden types not supported for elements for now\r\n            !this.isDesignMode(),\r\n            (typeName: string) => {\r\n                return !typeName || typeName === \"Column\" ? new Column() : undefined;\r\n            },\r\n            (typeName: string, errorType: TypeErrorType) => {\r\n                return {\r\n                    error: Enums.ValidationEvent.ElementTypeNotAllowed,\r\n                    message: \"Invalid element type \" + typeName + \". Only Column elements are allowed in a ColumnSet.\"\r\n                }\r\n            });\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._renderedColumns = [];\r\n\r\n        if (this._columns.length > 0) {\r\n            // Cache hostConfig to avoid walking the parent hierarchy several times\r\n            let hostConfig = this.hostConfig;\r\n\r\n            let element = document.createElement(\"div\");\r\n            element.className = hostConfig.makeCssClassName(\"ac-columnSet\");\r\n            element.style.display = \"flex\";\r\n\r\n            if (GlobalSettings.useAdvancedCardBottomTruncation) {\r\n                // See comment in Container.internalRender()\r\n                element.style.minHeight = '-webkit-min-content';\r\n            }\r\n\r\n            switch (this.horizontalAlignment) {\r\n                case Enums.HorizontalAlignment.Center:\r\n                    element.style.justifyContent = \"center\";\r\n                    break;\r\n                case Enums.HorizontalAlignment.Right:\r\n                    element.style.justifyContent = \"flex-end\";\r\n                    break;\r\n                default:\r\n                    element.style.justifyContent = \"flex-start\";\r\n                    break;\r\n            }\r\n\r\n            let totalWeight: number = 0;\r\n\r\n            for (let column of this._columns) {\r\n                if (column.width instanceof SizeAndUnit && (column.width.unit == Enums.SizeUnit.Weight)) {\r\n                    totalWeight += column.width.physicalSize;\r\n                }\r\n            }\r\n\r\n            for (let column of this._columns) {\r\n                if (column.width instanceof SizeAndUnit && column.width.unit == Enums.SizeUnit.Weight && totalWeight > 0) {\r\n                    let computedWeight = 100 / totalWeight * column.width.physicalSize;\r\n\r\n                    // Best way to emulate \"internal\" access I know of\r\n                    column[\"_computedWeight\"] = computedWeight;\r\n                }\r\n\r\n                let renderedColumn = column.render();\r\n\r\n                if (renderedColumn) {\r\n                    if (this._renderedColumns.length > 0 && column.separatorElement) {\r\n                        column.separatorElement.style.flex = \"0 0 auto\";\r\n\r\n                        Utils.appendChild(element, column.separatorElement);\r\n                    }\r\n\r\n                    Utils.appendChild(element, renderedColumn);\r\n\r\n                    this._renderedColumns.push(column);\r\n                }\r\n            }\r\n\r\n            return this._renderedColumns.length > 0 ? element : undefined;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected truncateOverflow(maxHeight: number): boolean {\r\n        for (let column of this._columns) {\r\n            column['handleOverflow'](maxHeight);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected undoOverflowTruncation() {\r\n        for (let column of this._columns) {\r\n            column['resetOverflow']();\r\n        }\r\n    }\r\n\r\n    protected get isSelectable(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this._columns = [];\r\n        this._renderedColumns = [];\r\n\r\n        let jsonColumns = source[\"columns\"];\r\n\r\n        if (Array.isArray(jsonColumns)) {\r\n            for (let item of jsonColumns) {\r\n                let column = this.createColumnInstance(item, context);\r\n\r\n                if (column) {\r\n                    this._columns.push(column);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        context.serializeArray(target, \"columns\", this._columns);\r\n    }\r\n\r\n    isFirstElement(element: CardElement): boolean {\r\n        for (let column of this._columns) {\r\n            if (column.isVisible) {\r\n                return column == element;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isBleedingAtTop(): boolean {\r\n        if (this.isBleeding()) {\r\n            return true;\r\n        }\r\n\r\n        if (this._renderedColumns && this._renderedColumns.length > 0) {\r\n            for (let column of this._columns) {\r\n                if (column.isBleedingAtTop()) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isBleedingAtBottom(): boolean {\r\n        if (this.isBleeding()) {\r\n            return true;\r\n        }\r\n\r\n        if (this._renderedColumns && this._renderedColumns.length > 0) {\r\n            for (let column of this._columns) {\r\n                if (column.isBleedingAtBottom()) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getItemCount(): number {\r\n        return this._columns.length;\r\n    }\r\n\r\n    getFirstVisibleRenderedItem(): CardElement | undefined {\r\n        if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {\r\n            return this._renderedColumns[0];\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getLastVisibleRenderedItem(): CardElement | undefined {\r\n        if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {\r\n            return this._renderedColumns[this._renderedColumns.length - 1];\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getColumnAt(index: number): Column {\r\n        return this._columns[index];\r\n    }\r\n\r\n    getItemAt(index: number): CardElement {\r\n        return this.getColumnAt(index);\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"ColumnSet\";\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        let weightedColumns: number = 0;\r\n        let stretchedColumns: number = 0;\r\n\r\n        for (let column of this._columns) {\r\n            if (typeof column.width === \"number\") {\r\n                weightedColumns++;\r\n            }\r\n            else if (column.width === \"stretch\") {\r\n                stretchedColumns++;\r\n            }\r\n        }\r\n\r\n        if (weightedColumns > 0 && stretchedColumns > 0) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.Hint,\r\n                \"It is not recommended to use weighted and stretched columns in the same ColumnSet, because in such a situation stretched columns will always get the minimum amount of space.\");\r\n        }\r\n    }\r\n\r\n    addColumn(column: Column) {\r\n        if (!column.parent) {\r\n            this._columns.push(column);\r\n\r\n            column.setParent(this);\r\n        }\r\n        else {\r\n            throw new Error(\"This column already belongs to another ColumnSet.\");\r\n        }\r\n    }\r\n\r\n    removeItem(item: CardElement): boolean {\r\n        if (item instanceof Column) {\r\n            let itemIndex = this._columns.indexOf(item);\r\n\r\n            if (itemIndex >= 0) {\r\n                this._columns.splice(itemIndex, 1);\r\n\r\n                item.setParent(undefined);\r\n\r\n                this.updateLayout();\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    indexOf(cardElement: CardElement): number {\r\n        return cardElement instanceof Column ? this._columns.indexOf(cardElement) : -1;\r\n    }\r\n\r\n    isLeftMostElement(element: CardElement): boolean {\r\n        return this._columns.indexOf(<Column>element) == 0;\r\n    }\r\n\r\n    isRightMostElement(element: CardElement): boolean {\r\n        return this._columns.indexOf(<Column>element) == this._columns.length - 1;\r\n    }\r\n\r\n    isTopElement(element: CardElement): boolean {\r\n        return this._columns.indexOf(<Column>element) >= 0;\r\n    }\r\n\r\n    isBottomElement(element: CardElement): boolean {\r\n        return this._columns.indexOf(<Column>element) >= 0;\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        let result: Action | undefined = undefined;\r\n\r\n        for (let column of this._columns) {\r\n            result = column.getActionById(id);\r\n\r\n            if (result) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get bleed(): boolean {\r\n        return this.getBleed();\r\n    }\r\n\r\n    set bleed(value: boolean) {\r\n        this.setBleed(value);\r\n    }\r\n\r\n    get padding(): PaddingDefinition | undefined {\r\n        return this.getPadding();\r\n    }\r\n\r\n    set padding(value: PaddingDefinition | undefined) {\r\n        this.setPadding(value);\r\n    }\r\n\r\n    get selectAction(): Action | undefined {\r\n        return this._selectAction;\r\n    }\r\n\r\n    set selectAction(value: Action | undefined) {\r\n        this._selectAction = value;\r\n    }\r\n}\r\n\r\nfunction raiseImageLoadedEvent(image: Image) {\r\n    let card = image.getRootElement() as AdaptiveCard;\r\n    let onImageLoadedHandler = (card && card.onImageLoaded) ? card.onImageLoaded : AdaptiveCard.onImageLoaded;\r\n\r\n    if (onImageLoadedHandler) {\r\n        onImageLoadedHandler(image);\r\n    }\r\n}\r\n\r\nfunction raiseAnchorClickedEvent(element: CardElement, anchor: HTMLAnchorElement): boolean {\r\n    let card = element.getRootElement() as AdaptiveCard;\r\n    let onAnchorClickedHandler = (card && card.onAnchorClicked) ? card.onAnchorClicked : AdaptiveCard.onAnchorClicked;\r\n\r\n    return onAnchorClickedHandler !== undefined ? onAnchorClickedHandler(element, anchor) : false;\r\n}\r\n\r\nfunction raiseExecuteActionEvent(action: Action) {\r\n    let card = action.parent ? action.parent.getRootElement() as AdaptiveCard : undefined;\r\n    let onExecuteActionHandler = (card && card.onExecuteAction) ? card.onExecuteAction : AdaptiveCard.onExecuteAction;\r\n\r\n    if (action.prepareForExecution() && onExecuteActionHandler) {\r\n        onExecuteActionHandler(action);\r\n    }\r\n}\r\n\r\nfunction raiseInlineCardExpandedEvent(action: ShowCardAction, isExpanded: boolean) {\r\n    let card = action.parent ? action.parent.getRootElement() as AdaptiveCard : undefined;\r\n    let onInlineCardExpandedHandler = (card && card.onInlineCardExpanded) ? card.onInlineCardExpanded : AdaptiveCard.onInlineCardExpanded;\r\n\r\n    if (onInlineCardExpandedHandler) {\r\n        onInlineCardExpandedHandler(action, isExpanded);\r\n    }\r\n}\r\n\r\nfunction raiseInputValueChangedEvent(input: Input) {\r\n    let card = input.getRootElement() as AdaptiveCard;\r\n    let onInputValueChangedHandler = (card && card.onInputValueChanged) ? card.onInputValueChanged : AdaptiveCard.onInputValueChanged;\r\n\r\n    if (onInputValueChangedHandler) {\r\n        onInputValueChangedHandler(input);\r\n    }\r\n}\r\n\r\nfunction raiseElementVisibilityChangedEvent(element: CardElement, shouldUpdateLayout: boolean = true) {\r\n    let rootElement = element.getRootElement();\r\n\r\n    if (shouldUpdateLayout) {\r\n        rootElement.updateLayout();\r\n    }\r\n\r\n    let card = rootElement as AdaptiveCard;\r\n    let onElementVisibilityChangedHandler = (card && card.onElementVisibilityChanged) ? card.onElementVisibilityChanged : AdaptiveCard.onElementVisibilityChanged;\r\n\r\n    if (onElementVisibilityChangedHandler !== undefined) {\r\n        onElementVisibilityChangedHandler(element);\r\n    }\r\n}\r\n\r\nexport abstract class ContainerWithActions extends Container {\r\n    private _actionCollection: ActionCollection;\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this._actionCollection.parse(source[\"actions\"], context);\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        this._actionCollection.toJSON(target, \"actions\", context);\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let element = super.internalRender();\r\n\r\n        if (element) {\r\n            let renderedActions = this._actionCollection.render(this.hostConfig.actions.actionsOrientation, false);\r\n\r\n            if (renderedActions) {\r\n                Utils.appendChild(\r\n                    element,\r\n                    Utils.renderSeparation(\r\n                        this.hostConfig,\r\n                        {\r\n                            spacing: this.hostConfig.getEffectiveSpacing(this.hostConfig.actions.spacing)\r\n                        },\r\n                        Enums.Orientation.Horizontal));\r\n                Utils.appendChild(element, renderedActions);\r\n            }\r\n\r\n            if (this.renderIfEmpty) {\r\n                return element;\r\n            }\r\n            else {\r\n                return element.children.length > 0 ? element : undefined;\r\n            }\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected getHasExpandedAction(): boolean {\r\n        if (this.renderedActionCount == 0) {\r\n            return false;\r\n        }\r\n        else if (this.renderedActionCount == 1) {\r\n            return this._actionCollection.expandedAction !== undefined && !this.hostConfig.actions.preExpandSingleShowCardAction;\r\n        }\r\n        else {\r\n            return this._actionCollection.expandedAction !== undefined;\r\n        }\r\n    }\r\n\r\n    protected get renderedActionCount(): number {\r\n        return this._actionCollection.renderedActionCount;\r\n    }\r\n\r\n    protected get renderIfEmpty(): boolean {\r\n        return false;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this._actionCollection = new ActionCollection(this);\r\n    }\r\n\r\n    getActionCount(): number {\r\n        return this._actionCollection.items.length;\r\n    }\r\n\r\n    getActionAt(index: number): Action | undefined {\r\n        if (index >= 0 && index < this.getActionCount()) {\r\n            return this._actionCollection.items[index];\r\n        }\r\n        else {\r\n            return super.getActionAt(index);\r\n        }\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        let result: Action | undefined = this._actionCollection.getActionById(id);\r\n\r\n        return result ? result : super.getActionById(id);\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (this._actionCollection) {\r\n            this._actionCollection.validateProperties(context);\r\n        }\r\n    }\r\n\r\n    isLastElement(element: CardElement): boolean {\r\n        return super.isLastElement(element) && this._actionCollection.items.length == 0;\r\n    }\r\n\r\n    addAction(action: Action) {\r\n        this._actionCollection.addAction(action);\r\n    }\r\n\r\n    clear() {\r\n        super.clear();\r\n\r\n        this._actionCollection.clear();\r\n    }\r\n\r\n    getAllInputs(): Input[] {\r\n        return super.getAllInputs().concat(this._actionCollection.getAllInputs());\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return super.getResourceInformation().concat(this._actionCollection.getResourceInformation());\r\n    }\r\n\r\n    isBleedingAtBottom(): boolean {\r\n        if (this._actionCollection.renderedActionCount == 0) {\r\n            return super.isBleedingAtBottom();\r\n        }\r\n        else {\r\n            if (this._actionCollection.items.length == 1) {\r\n                return this._actionCollection.expandedAction !== undefined && !this.hostConfig.actions.preExpandSingleShowCardAction;\r\n            }\r\n            else {\r\n                return this._actionCollection.expandedAction !== undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    get isStandalone(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport interface IMarkdownProcessingResult {\r\n    didProcess: boolean;\r\n    outputHtml?: any;\r\n}\r\n\r\n// @dynamic\r\nexport class AdaptiveCard extends ContainerWithActions {\r\n    static readonly schemaUrl = \"http://adaptivecards.io/schemas/adaptive-card.json\";\r\n\r\n    //#region Schema\r\n\r\n    protected static readonly $schemaProperty = new CustomProperty<string>(\r\n        Versions.v1_0,\r\n        \"$schema\",\r\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\r\n            return AdaptiveCard.schemaUrl;\r\n        },\r\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: Versions | undefined, context: BaseSerializationContext) => {\r\n            context.serializeValue(target, property.name, AdaptiveCard.schemaUrl);\r\n        });\r\n\r\n    static readonly versionProperty = new CustomProperty<Version | undefined>(\r\n        Versions.v1_0,\r\n        \"version\",\r\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\r\n            let version = Version.parse(source[property.name], context);\r\n\r\n            if (version === undefined) {\r\n                version = Versions.latest;\r\n\r\n                context.logParseEvent(\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    \"Invalid card version. Defaulting to latest version (\" + version.toString() + \")\");\r\n            }\r\n\r\n            return version;\r\n        },\r\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: Versions | undefined, context: BaseSerializationContext) => {\r\n            if (value !== undefined) {\r\n                context.serializeValue(target, property.name, value.toString());\r\n            }\r\n        },\r\n        Versions.v1_0);\r\n    static readonly fallbackTextProperty = new StringProperty(Versions.v1_0, \"fallbackText\");\r\n    static readonly speakProperty = new StringProperty(Versions.v1_0, \"speak\");\r\n\r\n    @property(AdaptiveCard.versionProperty)\r\n    version: Version;\r\n\r\n    @property(AdaptiveCard.fallbackTextProperty)\r\n    fallbackText?: string;\r\n\r\n    @property(AdaptiveCard.speakProperty)\r\n    speak?: string;\r\n\r\n    //#endregion\r\n\r\n    static onAnchorClicked?: (element: CardElement, anchor: HTMLAnchorElement) => boolean;\r\n    static onExecuteAction?: (action: Action) => void;\r\n    static onElementVisibilityChanged?: (element: CardElement) => void;\r\n    static onImageLoaded?: (image: Image) => void;\r\n    static onInlineCardExpanded?: (action: ShowCardAction, isExpanded: boolean) => void;\r\n    static onInputValueChanged?: (input: Input) => void;\r\n    static onProcessMarkdown?: (text: string, result: IMarkdownProcessingResult) => void;\r\n\r\n    static get processMarkdown(): (text: string) => string {\r\n        throw new Error(\"The processMarkdown event has been removed. Please update your code and set onProcessMarkdown instead.\")\r\n    }\r\n\r\n    static set processMarkdown(value: (text: string) => string) {\r\n        throw new Error(\"The processMarkdown event has been removed. Please update your code and set onProcessMarkdown instead.\")\r\n    }\r\n\r\n    static applyMarkdown(text: string): IMarkdownProcessingResult {\r\n        let result: IMarkdownProcessingResult = {\r\n            didProcess: false\r\n        };\r\n\r\n        if (AdaptiveCard.onProcessMarkdown) {\r\n            AdaptiveCard.onProcessMarkdown(text, result);\r\n        }\r\n        else if ((<any>window).markdownit) {\r\n            // Check for markdownit\r\n            let markdownIt: any = (<any>window).markdownit;\r\n            result.outputHtml = markdownIt().render(text);\r\n            result.didProcess = true;\r\n        }\r\n        else {\r\n            console.warn(\"Markdown processing isn't enabled. Please see https://www.npmjs.com/package/adaptivecards#supporting-markdown\")\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private _fallbackCard?: AdaptiveCard;\r\n\r\n    private isVersionSupported(): boolean {\r\n        if (this.bypassVersionCheck) {\r\n            return true;\r\n        }\r\n        else {\r\n            let unsupportedVersion: boolean =\r\n                !this.version ||\r\n                !this.version.isValid ||\r\n                (this.maxVersion.major < this.version.major) ||\r\n                (this.maxVersion.major == this.version.major && this.maxVersion.minor < this.version.minor);\r\n\r\n            return !unsupportedVersion;\r\n        }\r\n    }\r\n\r\n    protected getItemsCollectionPropertyName(): string {\r\n        return \"body\";\r\n    }\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        this._fallbackCard = undefined;\r\n\r\n        let fallbackElement = context.parseElement(undefined, source[\"fallback\"], !this.isDesignMode());\r\n\r\n        if (fallbackElement) {\r\n            this._fallbackCard = new AdaptiveCard();\r\n            this._fallbackCard.addItem(fallbackElement);\r\n        }\r\n\r\n        super.internalParse(source, context);\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        this.setValue(AdaptiveCard.versionProperty, context.targetVersion);\r\n\r\n        super.internalToJSON(target, context);\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let renderedElement = super.internalRender();\r\n\r\n        if (GlobalSettings.useAdvancedCardBottomTruncation && renderedElement) {\r\n            // Unlike containers, the root card element should be allowed to\r\n            // be shorter than its content (otherwise the overflow truncation\r\n            // logic would never get triggered)\r\n            renderedElement.style.removeProperty(\"minHeight\");\r\n        }\r\n\r\n        return renderedElement;\r\n    }\r\n\r\n    protected getHasBackground(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected getDefaultPadding(): PaddingDefinition {\r\n        return new PaddingDefinition(\r\n            Enums.Spacing.Padding,\r\n            Enums.Spacing.Padding,\r\n            Enums.Spacing.Padding,\r\n            Enums.Spacing.Padding);\r\n    }\r\n\r\n    protected shouldSerialize(context: SerializationContext): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get renderIfEmpty(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get bypassVersionCheck(): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected get allowCustomStyle() {\r\n        return this.hostConfig.adaptiveCard && this.hostConfig.adaptiveCard.allowCustomStyle;\r\n    }\r\n\r\n    protected get hasBackground(): boolean {\r\n        return true;\r\n    }\r\n\r\n    onAnchorClicked?: (element: CardElement, anchor: HTMLAnchorElement) => boolean;\r\n    onExecuteAction?: (action: Action) => void;\r\n    onElementVisibilityChanged?: (element: CardElement) => void;\r\n    onImageLoaded?: (image: Image) => void;\r\n    onInlineCardExpanded?: (action: ShowCardAction, isExpanded: boolean) => void;\r\n    onInputValueChanged?: (input: Input) => void;\r\n\r\n    designMode: boolean = false;\r\n\r\n    getJsonTypeName(): string {\r\n        return \"AdaptiveCard\";\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (this.getValue(CardElement.typeNameProperty) !== \"AdaptiveCard\") {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.MissingCardType,\r\n                \"Invalid or missing card type. Make sure the card's type property is set to \\\"AdaptiveCard\\\".\");\r\n        }\r\n\r\n        if (!this.bypassVersionCheck && !this.version) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                \"The version property must be specified.\");\r\n        }\r\n        else if (!this.isVersionSupported()) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.UnsupportedCardVersion,\r\n                \"The specified card version (\" + this.version.toString() + \") is not supported. The maximum supported card version is \" + this.maxVersion.toString());\r\n        }\r\n    }\r\n\r\n    render(target?: HTMLElement): HTMLElement | undefined {\r\n        let renderedCard: HTMLElement | undefined;\r\n\r\n        if (this.shouldFallback() && this._fallbackCard) {\r\n            this._fallbackCard.hostConfig = this.hostConfig;\r\n\r\n            renderedCard = this._fallbackCard.render();\r\n        }\r\n        else {\r\n            renderedCard = super.render();\r\n\r\n            if (renderedCard) {\r\n                renderedCard.classList.add(this.hostConfig.makeCssClassName(\"ac-adaptiveCard\"));\r\n\r\n                // Having a tabIndex on the root container for a card can mess up accessibility in some scenarios.\r\n                // However, we've shipped this behavior before, and so can't just turn it off in a point release. For\r\n                // now, to unblock accessibility scenarios for our customers, we've got an option to turn it off. In a\r\n                // future release, we should strongly consider flipping the default such that we *don't* emit a tabIndex\r\n                // by default.\r\n                if (GlobalSettings.setTabIndexAtCardRoot) {\r\n                    renderedCard.tabIndex = 0;\r\n                }\r\n\r\n                if (this.speak) {\r\n                    renderedCard.setAttribute(\"aria-label\", this.speak);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (target) {\r\n            Utils.appendChild(target, renderedCard);\r\n\r\n            this.updateLayout();\r\n        }\r\n\r\n        return renderedCard;\r\n    }\r\n\r\n    updateLayout(processChildren: boolean = true) {\r\n        super.updateLayout(processChildren);\r\n\r\n        if (GlobalSettings.useAdvancedCardBottomTruncation && this.isDisplayed()) {\r\n            let padding = this.hostConfig.getEffectiveSpacing(Enums.Spacing.Default);\r\n\r\n            this['handleOverflow']((<HTMLElement>this.renderedElement).offsetHeight - padding);\r\n        }\r\n    }\r\n\r\n    shouldFallback(): boolean {\r\n        return super.shouldFallback() || !this.isVersionSupported();\r\n    }\r\n\r\n    get hasVisibleSeparator(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nclass InlineAdaptiveCard extends AdaptiveCard {\r\n    //#region Schema\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"InlineAdaptiveCard\";\r\n    }\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        schema.remove(\r\n            AdaptiveCard.$schemaProperty,\r\n            AdaptiveCard.versionProperty);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    protected getDefaultPadding(): PaddingDefinition {\r\n        return new PaddingDefinition(\r\n            this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding,\r\n            Enums.Spacing.Padding,\r\n            this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding,\r\n            Enums.Spacing.Padding);\r\n    }\r\n\r\n    protected get bypassVersionCheck(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get defaultStyle(): string {\r\n        if (this.suppressStyle) {\r\n            return Enums.ContainerStyle.Default;\r\n        }\r\n        else {\r\n            return this.hostConfig.actions.showCard.style ? this.hostConfig.actions.showCard.style : Enums.ContainerStyle.Emphasis;\r\n        }\r\n    }\r\n\r\n    suppressStyle: boolean = false;\r\n\r\n    render(target?: HTMLElement): HTMLElement | undefined {\r\n        let renderedCard = super.render(target);\r\n\r\n        if (renderedCard) {\r\n            renderedCard.setAttribute(\"aria-live\", \"polite\");\r\n            renderedCard.removeAttribute(\"tabindex\");\r\n        }\r\n\r\n        return renderedCard;\r\n    }\r\n}\r\n\r\nexport class GlobalRegistry {\r\n    static populateWithDefaultElements(registry: CardObjectRegistry<CardElement>) {\r\n        registry.clear();\r\n\r\n        registry.register(\"Container\", Container);\r\n        registry.register(\"TextBlock\", TextBlock);\r\n        registry.register(\"RichTextBlock\", RichTextBlock, Versions.v1_2);\r\n        registry.register(\"TextRun\", TextRun, Versions.v1_2);\r\n        registry.register(\"Image\", Image);\r\n        registry.register(\"ImageSet\", ImageSet);\r\n        registry.register(\"Media\", Media, Versions.v1_1);\r\n        registry.register(\"FactSet\", FactSet);\r\n        registry.register(\"ColumnSet\", ColumnSet);\r\n        registry.register(\"ActionSet\", ActionSet, Versions.v1_2);\r\n        registry.register(\"Input.Text\", TextInput);\r\n        registry.register(\"Input.Date\", DateInput);\r\n        registry.register(\"Input.Time\", TimeInput);\r\n        registry.register(\"Input.Number\", NumberInput);\r\n        registry.register(\"Input.ChoiceSet\", ChoiceSetInput);\r\n        registry.register(\"Input.Toggle\", ToggleInput);\r\n    }\r\n\r\n    static populateWithDefaultActions(registry: CardObjectRegistry<Action>) {\r\n        registry.clear();\r\n\r\n        registry.register(OpenUrlAction.JsonTypeName, OpenUrlAction);\r\n        registry.register(SubmitAction.JsonTypeName, SubmitAction);\r\n        registry.register(ShowCardAction.JsonTypeName, ShowCardAction);\r\n        registry.register(ToggleVisibilityAction.JsonTypeName, ToggleVisibilityAction, Versions.v1_2);\r\n    }\r\n\r\n    static readonly elements = new CardObjectRegistry<CardElement>();\r\n    static readonly actions = new CardObjectRegistry<Action>();\r\n\r\n    static reset() {\r\n        GlobalRegistry.populateWithDefaultElements(GlobalRegistry.elements);\r\n        GlobalRegistry.populateWithDefaultActions(GlobalRegistry.actions);\r\n    }\r\n}\r\n\r\nGlobalRegistry.reset();\r\n\r\nconst enum TypeErrorType {\r\n    UnknownType,\r\n    ForbiddenType\r\n}\r\n\r\nexport class SerializationContext extends BaseSerializationContext {\r\n    private _elementRegistry?: CardObjectRegistry<CardElement>;\r\n    private _actionRegistry?: CardObjectRegistry<Action>;\r\n\r\n    private internalParseCardObject<T extends CardObject>(\r\n        parent: CardElement | undefined,\r\n        source: any,\r\n        forbiddenTypeNames: string[],\r\n        allowFallback: boolean,\r\n        createInstanceCallback: (typeName: string) => T | undefined,\r\n        logParseEvent: (typeName: string, errorType: TypeErrorType) => void): T | undefined {\r\n        let result: T | undefined = undefined;\r\n\r\n        if (source && typeof source === \"object\") {\r\n            let tryToFallback = false;\r\n            let typeName = Utils.parseString(source[\"type\"]);\r\n\r\n            if (typeName) {\r\n                if (forbiddenTypeNames.indexOf(typeName) >= 0) {\r\n                    logParseEvent(typeName, TypeErrorType.ForbiddenType);\r\n                }\r\n                else {\r\n                    result = createInstanceCallback(typeName);\r\n\r\n                    if (!result) {\r\n                        tryToFallback = allowFallback;\r\n\r\n                        logParseEvent(typeName, TypeErrorType.UnknownType);\r\n                    }\r\n                    else {\r\n                        result.setParent(parent);\r\n                        result.parse(source, this);\r\n\r\n                        tryToFallback = result.shouldFallback() && allowFallback;\r\n                    }\r\n\r\n                    if (tryToFallback) {\r\n                        let fallback = source[\"fallback\"];\r\n\r\n                        if (!fallback && parent) {\r\n                            parent.setShouldFallback(true);\r\n                        }\r\n                        if (typeof fallback === \"string\" && fallback.toLowerCase() === \"drop\") {\r\n                            result = undefined;\r\n                        }\r\n                        else if (typeof fallback === \"object\") {\r\n                            result = this.internalParseCardObject<T>(\r\n                                parent,\r\n                                fallback,\r\n                                forbiddenTypeNames,\r\n                                true,\r\n                                createInstanceCallback,\r\n                                logParseEvent);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected cardObjectParsed(o: SerializableObject, source: any) {\r\n        if (o instanceof Action && this.onParseAction) {\r\n            this.onParseAction(o, source, this);\r\n        }\r\n        else if (o instanceof CardElement && this.onParseElement) {\r\n            this.onParseElement(o, source, this);\r\n        }\r\n    }\r\n\r\n    onParseAction?: (action: Action, source: any, context: SerializationContext) => void;\r\n    onParseElement?: (element: CardElement, source: any, context: SerializationContext) => void;\r\n\r\n    parseCardObject<T extends CardObject>(\r\n        parent: CardElement | undefined,\r\n        source: any,\r\n        forbiddenTypeNames: string[],\r\n        allowFallback: boolean,\r\n        createInstanceCallback: (typeName: string) => T | undefined,\r\n        logParseEvent: (typeName: string, errorType: TypeErrorType) => void): T | undefined {\r\n        let result = this.internalParseCardObject(\r\n            parent,\r\n            source,\r\n            forbiddenTypeNames,\r\n            allowFallback,\r\n            createInstanceCallback,\r\n            logParseEvent);\r\n\r\n        if (result !== undefined) {\r\n            this.cardObjectParsed(result, source);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseElement(parent: CardElement | undefined, source: any, allowFallback: boolean): CardElement | undefined {\r\n        return this.parseCardObject<CardElement>(\r\n            parent,\r\n            source,\r\n            [], // Forbidden types not supported for elements for now\r\n            allowFallback,\r\n            (typeName: string) => {\r\n                return this.elementRegistry.createInstance(typeName, this.targetVersion);\r\n            },\r\n            (typeName: string, errorType: TypeErrorType) => {\r\n                if (errorType === TypeErrorType.UnknownType) {\r\n                    this.logParseEvent(\r\n                        Enums.ValidationEvent.UnknownElementType,\r\n                        \"Unknown element type: \" + typeName + \". Fallback will be used if present.\");\r\n                }\r\n                else {\r\n                    this.logParseEvent(\r\n                        Enums.ValidationEvent.ElementTypeNotAllowed,\r\n                        \"Element type \" + typeName + \" is not allowed in this context.\");\r\n                }\r\n            });\r\n    }\r\n\r\n    parseAction(\r\n        parent: CardElement,\r\n        source: any,\r\n        forbiddenActionTypes: string[],\r\n        allowFallback: boolean): Action | undefined {\r\n        return this.parseCardObject<Action>(\r\n            parent,\r\n            source,\r\n            forbiddenActionTypes,\r\n            allowFallback,\r\n            (typeName: string) => {\r\n                return this.actionRegistry.createInstance(typeName, this.targetVersion);\r\n            },\r\n            (typeName: string, errorType: TypeErrorType) => {\r\n                if (errorType == TypeErrorType.UnknownType) {\r\n                    return {\r\n                        error: Enums.ValidationEvent.UnknownActionType,\r\n                        message: \"Unknown action type: \" + typeName + \". Fallback will be used if present.\"\r\n                    }\r\n                }\r\n                else {\r\n                    return {\r\n                        error: Enums.ValidationEvent.ActionTypeNotAllowed,\r\n                        message: \"Action type \" + typeName + \" is not allowed in this context.\"\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    get elementRegistry(): CardObjectRegistry<CardElement> {\r\n        return this._elementRegistry ? this._elementRegistry : GlobalRegistry.elements;\r\n    }\r\n\r\n    // Not using a property setter here because the setter should accept \"undefined\"\r\n    // whereas the getter should never return undefined.\r\n    setElementRegistry(value: CardObjectRegistry<CardElement> | undefined) {\r\n        this._elementRegistry = value;\r\n    }\r\n\r\n    get actionRegistry(): CardObjectRegistry<Action> {\r\n        return this._actionRegistry ? this._actionRegistry : GlobalRegistry.actions;\r\n    }\r\n\r\n    // Not using a property setter here because the setter should accept \"undefined\"\r\n    // whereas the getter should never return undefined.\r\n    setActionRegistry(value: CardObjectRegistry<Action> | undefined) {\r\n        this._actionRegistry = value;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nabstract class AbstractTextFormatter {\r\n    private _regularExpression: RegExp;\r\n\r\n    protected abstract internalFormat(lang: string | undefined, matches: RegExpExecArray): string;\r\n\r\n    constructor(regularExpression: RegExp) {\r\n        this._regularExpression = regularExpression;\r\n    }\r\n\r\n    format(lang: string | undefined, input: string | undefined): string | undefined {\r\n        let matches;\r\n\r\n        if (input) {\r\n            let result = input;\r\n\r\n            while ((matches = this._regularExpression.exec(input)) != null) {\r\n                result = result.replace(matches[0], this.internalFormat(lang, matches));\r\n            };\r\n\r\n            return result;\r\n        }\r\n        else {\r\n            return input;\r\n        }\r\n    }\r\n}\r\n\r\nclass DateFormatter extends AbstractTextFormatter {\r\n    protected internalFormat(lang: string | undefined, matches: RegExpExecArray): string {\r\n        let date = new Date(Date.parse(matches[1]));\r\n        let format = matches[2] != undefined ? matches[2].toLowerCase() : \"compact\";\r\n\r\n        if (format != \"compact\") {\r\n            return date.toLocaleDateString(lang, { day: \"numeric\", weekday: format, month: format, year: \"numeric\" });\r\n        }\r\n        else {\r\n            return date.toLocaleDateString();\r\n        }\r\n    }\r\n}\r\n\r\nclass TimeFormatter extends AbstractTextFormatter {\r\n    protected internalFormat(lang: string | undefined, matches: RegExpExecArray): string {\r\n        let date = new Date(Date.parse(matches[1]));\r\n\r\n        return date.toLocaleTimeString(lang, { hour: 'numeric', minute: '2-digit' });\r\n    }\r\n}\r\n\r\nexport function formatText(lang: string | undefined, text: string | undefined): string | undefined {\r\n    const formatters: AbstractTextFormatter[] = [\r\n        new DateFormatter(/\\{{2}DATE\\((\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:Z|(?:(?:-|\\+)\\d{2}:\\d{2})))(?:, ?(COMPACT|LONG|SHORT))?\\)\\}{2}/g),\r\n        new TimeFormatter(/\\{{2}TIME\\((\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:Z|(?:(?:-|\\+)\\d{2}:\\d{2})))\\)\\}{2}/g)\r\n    ];\r\n\r\n    let result = text;\r\n\r\n    for (let formatter of formatters) {\r\n        result = formatter.format(lang, result);\r\n    }\r\n\r\n    return result;\r\n}\r\n"],"sourceRoot":""}